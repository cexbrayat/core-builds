{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/core/esm5/src/util/property.js","../../../packages/core/esm5/src/di/injection_token.js","../../../packages/core/esm5/src/util/decorators.js","../../../packages/core/esm5/src/change_detection/constants.js","../../../packages/core/esm5/src/util.js","../../../packages/core/esm5/src/di/forward_ref.js","../../../packages/core/esm5/src/di/injector.js","../../../packages/core/esm5/src/type.js","../../../packages/core/esm5/src/reflection/reflection_capabilities.js","../../../packages/core/esm5/src/metadata/resource_loading.js","../../../packages/core/esm5/src/render3/ng_dev_mode.js","../../../packages/core/esm5/src/metadata/view.js","../../../packages/core/esm5/src/render3/definition.js","../../../packages/core/esm5/src/render3/assert.js","../../../packages/core/esm5/src/change_detection/change_detection_util.js","../../../packages/core/esm5/src/render3/util.js","../../../packages/core/esm5/src/render3/context_discovery.js","../../../packages/core/esm5/src/render3/hooks.js","../../../packages/core/esm5/src/render3/interfaces/renderer.js","../../../packages/core/esm5/src/render3/node_assert.js","../../../packages/core/esm5/src/render3/node_manipulation.js","../../../packages/core/esm5/src/render3/node_selector_matcher.js","../../../packages/core/esm5/src/render3/styling/util.js","../../../packages/core/esm5/src/render3/styling/class_and_style_bindings.js","../../../packages/core/esm5/src/render3/instructions.js","../../../packages/core/esm5/src/render3/errors.js","../../../packages/core/esm5/src/render3/component.js","../../../packages/core/esm5/src/render3/features/inherit_definition_feature.js","../../../packages/core/esm5/src/render3/features/ng_onchanges_feature.js","../../../packages/core/esm5/src/render3/di.js","../../../packages/core/esm5/src/linker/component_factory_resolver.js","../../../packages/core/esm5/src/render3/view_ref.js","../../../packages/core/esm5/src/render3/view_engine_compatibility.js","../../../packages/core/esm5/src/ivy_switch/runtime/legacy.js","../../../packages/core/esm5/src/linker/element_ref.js","../../../packages/core/esm5/src/render/api.js","../../../packages/core/esm5/src/render3/component_ref.js","../../../packages/core/esm5/src/render3/i18n.js","../../../packages/core/esm5/src/di/r3_injector.js","../../../packages/core/esm5/src/render3/ng_module_ref.js","../../../packages/core/esm5/src/render3/pure_function.js","../../../packages/core/esm5/src/render3/pipe.js","../../../packages/core/esm5/src/event_emitter.js","../../../packages/core/esm5/src/linker/template_ref.js","../../../packages/core/esm5/src/render3/query.js","../../../packages/core/esm5/src/sanitization/bypass.js","../../../packages/core/esm5/src/sanitization/inert_body.js","../../../packages/core/esm5/src/sanitization/url_sanitizer.js","../../../packages/core/esm5/src/sanitization/html_sanitizer.js","../../../packages/core/esm5/src/sanitization/security.js","../../../packages/core/esm5/src/sanitization/style_sanitizer.js","../../../packages/core/esm5/src/sanitization/sanitization.js","../../../packages/core/esm5/src/render3/jit/environment.js","../../../packages/core/esm5/src/render3/jit/util.js","../../../packages/core/esm5/src/render3/jit/module.js","../../../packages/core/esm5/src/render3/jit/directive.js","../../../packages/core/esm5/src/render3/jit/injectable.js","../../../packages/core/esm5/src/render3/jit/pipe.js","../../../packages/core/esm5/src/ivy_switch/compiler/legacy.js","../../../packages/core/esm5/src/metadata/directives.js","../../../packages/core/esm5/src/version.js","../../../packages/core/esm5/src/errors.js","../../../packages/core/esm5/src/error_handler.js","../../../packages/core/esm5/src/di/reflective_errors.js","../../../packages/core/esm5/src/di/reflective_key.js","../../../packages/core/esm5/src/reflection/reflector.js","../../../packages/core/esm5/src/di/reflective_provider.js","../../../packages/core/esm5/src/di/reflective_injector.js","../../../packages/core/esm5/src/application_init.js","../../../packages/core/esm5/src/application_tokens.js","../../../packages/core/esm5/src/console.js","../../../packages/core/esm5/src/linker/compiler.js","../../../packages/core/esm5/src/profile/wtf_impl.js","../../../packages/core/esm5/src/zone/ng_zone.js","../../../packages/core/esm5/src/testability/testability.js","../../../packages/core/esm5/src/application_ref.js","../../../packages/core/esm5/src/linker/ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/query_list.js","../../../packages/core/esm5/src/linker/system_js_ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/view_container_ref.js","../../../packages/core/esm5/src/change_detection/change_detector_ref.js","../../../packages/core/esm5/src/linker/view_ref.js","../../../packages/core/esm5/src/debug/debug_node.js","../../../packages/core/esm5/src/change_detection/differs/default_iterable_differ.js","../../../packages/core/esm5/src/change_detection/differs/default_keyvalue_differ.js","../../../packages/core/esm5/src/change_detection/differs/iterable_differs.js","../../../packages/core/esm5/src/change_detection/differs/keyvalue_differs.js","../../../packages/core/esm5/src/i18n/tokens.js","../../../packages/core/esm5/src/application_module.js","../../../packages/core/esm5/src/view/types.js","../../../packages/core/esm5/src/view/errors.js","../../../packages/core/esm5/src/view/util.js","../../../packages/core/esm5/src/view/element.js","../../../packages/core/esm5/src/view/ng_module.js","../../../packages/core/esm5/src/view/view_attach.js","../../../packages/core/esm5/src/view/refs.js","../../../packages/core/esm5/src/view/provider.js","../../../packages/core/esm5/src/view/query.js","../../../packages/core/esm5/src/view/ng_content.js","../../../packages/core/esm5/src/view/pure_expression.js","../../../packages/core/esm5/src/view/text.js","../../../packages/core/esm5/src/view/view.js","../../../packages/core/esm5/src/view/services.js","../../../packages/core/esm5/src/view/entrypoint.js","../../../packages/core/esm5/src/render3/discovery_utils.js","../../../packages/core/esm5/src/render3/debug.js","../../../packages/core/esm5/src/render3/styling/core_player_handler.js","../../../packages/core/esm5/src/render3/player.js"],"names":["exports","module","factory","require","extendStatics","d","b","__proto__","Array","p","hasOwnProperty","__","this","constructor","Object","create","prototype","assign","t","s","i","n","arguments","length","call","getClosureSafeProperty","objWithPropertyToExtract","key","fillProperties","target","source","InjectionToken","_desc","options","ngMetadataName","ngInjectableDef","undefined","defineInjectable","providedIn","toString","metaCtor","makeMetadataCtor","props","DecoratorFactory","args","_i","apply","concat","annotationInstance","_a","bind","cls","typeFn","ANNOTATIONS","defineProperty","value","push","additionalProcessing","parentClass","values","propName","ParamDecoratorFactory","parameters","PARAMETERS","index","PropDecoratorFactory","name","meta","PROP_METADATA","unshift","decoratorInstance","OnPush","Default","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Errored","Destroyed","__window","window","__self","self","WorkerGlobalScope","_symbolIterator","Symbol_1","iterator","getOwnPropertyNames","Map","keys","scheduleMicroTask","fn","Zone","promise","then","stringify","token","map","join","overriddenName","res","resolveForwardRef","type","__forward_ref__","forwardRef","NullInjector","get","notFoundValue","_THROW_IF_NOT_FOUND","Error","parent","isArray","StaticInjector","providers","THROW_IF_NOT_FOUND","Injector","NULL","inject","INJECTOR","EMPTY","slice","NULL_INJECTOR","records","provider","provide","deps","providerDeps","j","annotations","annotation","Optional","SkipSelf","Self","Inject","useExisting","USE_VALUE$1","USE_VALUE","useNew","useValue","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","set","MULTI_PROVIDER_FN","record","resolvedProvider","flags","tryResolveToken","_records","e","tokenPath","NG_TEMP_TOKEN_PATH","SOURCE","message","formatError","tokens","NO_NEW_LINE","depRecords","depRecord","childRecord","obj","resolveToken","CIRCULAR","text","charAt","substr","context","parts","JSON","_currentInjector","setCurrentInjector","injector","injectableDef","getInjectableDef","injectArgs","types","arg","Type","Function","DELEGATE_CTOR","_reflect","reflect","_global","ReflectionCapabilities","paramTypes","paramAnnotations","result","_ownParameters","exec","typeStr","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","parentCtor","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","_zipTypesAndAnnotations","paramAnnotations_1","getParentCtor","_ownAnnotations","typeOrFunc","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","prop","parentPropMetadata_1","forEach","ownPropMetadata","hasLifecycleHook","setter","resolveEnum","decoratorInvocations","annotationCls","decoratorInvocation","parentProto","ctor","getPrototypeOf","componentResourceResolutionQueue","Set","newCounters","ShadowDom","firstTemplatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererRemoveNode","EMPTY$1","ngDevMode","styles","componentDefinition","EMPTY_ARRAY$1","animations","data","def","diPublic","consts","vars","hostVars","template","hostBindings","contentQueries","contentQueriesRefresh","attributes","inputs","invertObject","declaredInputs","outputs","exportAs","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnDestroy","onPush","changeDetection","ChangeDetectionStrategy","directiveTypes","extractDirectiveDef","pipeDefs","pipeTypes","extractPipeDef","viewQuery","features","viewProviders","id","_renderCompCount","getComponentDef","getDirectiveDef","getPipeDef","defineNgModule","bootstrap","declarations","imports","secondary","minifiedKey","publicName","declaredName","newLookup","defineBase","baseDefinition","definePipe","pipeDef","assertComponentType","actual","msg","devModeEqual","a","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","comparator","iterator1","getSymbolIterator","iterator2","item1","next","item2","done","WrappedValue","wrap","isWrapped","SimpleChange","isFirstChange","stringify$1","readElementValue","getRootView","assertDefined","lViewData","readPatchedLViewData","readPatchedData","nodeIndex","component","findViaComponent","isDirectiveInstance","directiveInstance","TVIEW","firstChild","getDirectiveStartIndex","directiveIndexEnd","getDirectiveEndIndex","directiveIndexStart","findViaDirective","directiveStartIndex","discoverDirectives","native","existingCtx","createLContext","attachPatchData","directives","mpValue","rElement","parent_1","parentNode","parentContext","findViaNativeElement","getComponentViewByInstance","componentInstance","view","getComponentViewByIndex","HOST","getNativeByTNode","traverseNextElement","child","componentIndices","elementComponentIndex","CONTEXT","queueInitHooks","assertEqual","initHooks","queueLifecycleHooks","start","end","queueContentHooks","contentHooks","queueViewHooks","afterViewInit","viewHooks","executeInitHooks","currentView","creationMode","executeHooks","allHooks","checkHooks","RendererStyleFlags3","assertNodeOfPossibleTypes","typeName","getLContainer","embeddedView","containerHostIndex","CONTAINER_INDEX","PARENT","projectionNodeIndex","viewToWalk","rootTNode","nextTNode","action","renderer","renderParent","beforeNode","nodeOrContainer","isLContainer","executeNodeAction","NATIVE","lContainer","VIEWS","node","head","componentView","HOST_NODE","projectionNodeStack$1","NEXT","findComponentView","insertBefore","isProceduralRenderer","removeChild","getContainerRenderParent","assertNodeType","insertView","lView","parentView","containerIndex","views","splice","QUERIES","detachView","removeIndex","detached","viewToDetach","addRemoveViewFromContainer","removeView","containerHost","destroyLView","destroyNode","walkTNodeTree","rootView","childIndex","viewOrContainer","HEADER_OFFSET","getLViewChild","container","cleanUpView","getParentState","state","viewData","cleanup","removeEventListener","listener","cleanupFn","CLEANUP","RENDERER","canInsertNativeNode","hostTNode","currentNode","getHighestElementContainer","nativeInsertBefore","appendChild","childEl","childTNode","parentEl","getParentNative","parentTNode","indexOf","getRenderParent","ngContainer","getBeforeNodeForView","containerNative","viewTNode","parentNative","projectedTNode","projectionView","RENDER_PARENT","ngContainerChildTNode","appendProjectedNode","tProjectionNode","isNodeMatchingSelector","selector","nodeClassesLen","matchEndIdx","nodeAttrs","selectOnlyMarkerIdx","mode","current","tagName","isPositive","skipToNextSelector","attrIndexInNode","findAttrIndexInNode","selectorAttrValue","nodeAttrValue","maybeAttrName","assertNotEqual","matchIndex","cssClassToMatch","attrs","selectOnlyMode","isNodeMatchingSelectorList","ngProjectAsAttrIdx","NG_PROJECT_AS_ATTR_NAME","getProjectAsAttrValue","selectors","ngProjectAsAttrVal","textSelectors","initialStylingValues","storageIndex","slotValue","wrapper","element","stylingTemplate","getTNode","getOrCreatePlayerContext","setValue","singleIndex","indexForMulti","getMultiOrSingleIndex","currFlag","valueForMulti","getValue","singleDirty","isClassBased_5","valueExists","multiDirty","setDirty","renderStyling","styleStore","classStore","multiStartIndex","getMultiStartIndex","getStyleSanitizer","valueToApply","isClassBased_6","getInitialValue","flag","setClass","setStyle","styleSanitizer","sanitizer","store","DashCase","setProperty","className","add","addClass","isDirtyYes","adjustedIndex","startIndex","flagA","tmpFlag","flagB","getPointers","indexB","singleIndexA","getInitialIndex","_flag","singleIndexB","setFlag","pointers","indexA","setProp","getProp","insertNewMultiProperty","classBased","doShift","indexStartPosition","isDirty","isClassBased","isSanitizable","prepareInitialFlag","getRenderer","rendererFactory","contextViewData","bindingRootIndex","enterView","newView","oldView","FLAGS","bindingStartIndex","previousOrParentTNode","isParent","creationOnly","checkNoChangesMode","viewCheckHooks","refreshDescendantViews","setHostBindings","parentFirstTemplatePass","ACTIVE_INDEX","container_1","dynamicViewData","directiveDefIdx","refreshContentQueries","components","expandoInstructions","BINDING_INDEX","expandoStartIndex","currentDirectiveIndex","instruction","currentElementIndex","executeInitAndContentHooks","createLViewData","instance","blueprint","DECLARATION_VIEW","createNodeAtIndex","assertLessThan","createViewNode","adjustBlueprintForNewNode","resetComponentState","_isParent","_previousOrParentTNode","viewToRender","leaveView","rf","nestingLevel","hostView","componentOrContext","templateFn","begin","namespaceHTML","componentRefresh","getRenderFlags","_currentNamespace","elementStart","localRefs","elementCreate","assertDataInRange","overriddenRenderer","rendererToUse","createElement","createDirectivesAndLocals","localRefExtractor","bindingsEnabled","exportsMap","","matches","currentMatches","findDirectiveMatches","valueIndex","resolveDirective","totalHostVars","saveNameToExportMap","cacheMatchingDirectivesForNode","isContentQueryHost","currentQueries","count","addComponentLogic","localNames","localIndex","generateExpandoBlock","directiveCount","prefillHostVars","registry","throwMultipleComponentError","CIRCULAR$1","directiveCreate","createTView","viewIndex","pipes","initialViewLength","fill","createViewBlueprint","contentCheckHooks","destroyHooks","pipeDestroyHooks","directiveRegistry","setUpAttributes","isProc","attrName","namespaceURI","attrVal","setAttributeNS","attrName_1","setAttribute","createRenderer","rNode","elementOrSelector","defaultRenderer","selectRootElement","querySelector","createError","useCapture","listen","eventName","listenerFn","storeCleanupFn","wrappedListener","preventDefault","wrapListenerWithPreventDefault","addEventListener","cleanupInstances","getCleanup","getTViewCleanup","generatePropertyAliases","storeCleanupWithContext","elementEnd","assertHasParent","NO_CHANGE","element_1","getNativeByIndex","removeAttribute","strValue","dataValue","inputData","createTNode","tViews","tParent","injectorIndex","initialInputs","tNodeFlags","direction","propStore","isInput","defs","directiveDef","propertyAliasMap","internalName","elementStyling","classDeclarations","styleDeclarations","stylesLookup","classesLookup","hasPassedDeclarations","initialStyleDeclarations","totalStyleDeclarations","initialClassDeclarations","totalProps","styleProps","classNames","maxLength","multiStart","indexForSingle","initialFlag","isClassBased_1","indexForInitial","createStylingContextTemplate","classes","ignoreAllClassUpdates","ignoreAllStyleUpdates","EMPTY_ARR","applyAllClasses","split","EMPTY_OBJ","isClassBased_2","propIndex","classesStartIndex","newProp","adjustedPropIndex","newValue","ctxIndex","hasValueChanged","initialValue","indexOfEntry","findEntryPositionByProp","flagToCompare","valueToCompare","dirty","isClassBased_3","propLimit","isClassBased_4","textNative","createTextNode","textBinding","element_2","directive","baseDirectiveCreate","directiveIndex","initialInputData","minifiedInputName","attrValue","inputsToStore","generateInitialInputs","setInputsFromAttrs","addToViewTree","getCurrentSanitizer","assertPreviousIsParent","createLContainer","hostNative","isForViewContainerRef","containerInternal","pipeRegistry","comment","createComment","rendererCreateComment","containerRefreshStart","containerRefreshEnd","nextIndex","containerTNode","tContainerNode","startIdx","viewBlockId","viewAtPositionId","scanForView","containerTViews","getOrCreateEmbeddedTView","createView","embeddedViewEnd","viewHost","adjustedElementIndex","projectionDef","componentNode","projection","noOfNodeBuckets","pData","tails","componentChild","bucketIndex","matchingSelectorIndex","nextNode","selectorIndex","nodeToProject","currentComponentView","projectedView","firstProjectedNode","projectionNodeStack","adjustedHostIndex","TAIL","markViewDirty","rootContext","nothingScheduled","scheduleTick","clean","_CLEAN_PROMISE","Promise","r","res_1","scheduler","tickRootContext","playerHandler","flushPlayers","hostTView","updateViewQuery","interpolationV","different","content","interpolation2","prefix","v0","i0","v1","suffix","interpolation3","i1","v2","interpolation4","i2","v3","bindingUpdated4","interpolation5","i3","v4","bindingUpdated","interpolation6","i4","v5","bindingUpdated2","interpolation7","i5","v6","bindingUpdated3","interpolation8","i6","v7","getBinding","bindingIndex","isDifferent","oldValue","currValue","throwErrorIfNoChangesMode","exp3","exp4","registerContentQuery","queryList","savedContentQueriesLength","CONTENT_QUERIES","tViewContentQueries","arr","createRootComponentView","getOrCreateTView","directiveDefs","ROOT_EXPANDO_INSTRUCTIONS","createRootComponent","hostRNode","componentDef","hostFeatures","feature","createRootContext","LifecycleHooksFeature","rootTView","InheritDefinitionFeature","definition","isComponentDef","superType","ngComponentDef","ngDirectiveDef","baseDef","ngBaseDef","superDef","writeableDef","maybeUnwrapEmpty","prevHostBindings_1","elementIndex","superHostBindings_1","prevViewQuery_1","ctx","superViewQuery_1","prevContentQueries_1","superContentQueries_1","prevContentQueriesRefresh_1","queryIndex","superContentQueriesRefresh_1","onDestroy","features_1","superPrototype","afterViewChecked","NgOnChangesFeature","privateMinKey_1","PRIVATE_PREFIX","originalProperty","checkProto","proto","getter","setter_1","simpleChanges","writable","currentChange","currentValue","configurable","_loop_1","delegateHook","ngOnChanges","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","setUpBloom","parentData","PARENT_INJECTOR","bloomIndex","parentIndex","getParentInjectorLocation","viewOffset","startView","NG_ELEMENT_ID","nextNgElementId","b6","bloomBit","b7","b5","tData","mask","directiveInject","getPreviousOrParentTNode","attrNameToInject","bloomHash","injectorView","shouldNotSearchParent","injectorHasToken","parentLocation","getParentInjectorView","searchDirectivesOnInjector","searchMatchesQueuedForCreation","formerInjector","INJECTOR$1","nodeFlags","TNODE","getFactoryOf","typeAny","getInjectorDef","getInheritedFactory","noComponentFactoryError","error","ComponentFactoryResolver","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver$1","_parent","_ngModule","_factories","factories","CodegenComponentFactoryResolver","_super","ComponentFactoryBoundToModule","ngModule","_this","componentType","_appRef","_viewContainerRef","ViewRef","_context","_lookUpContext","destroy","viewAttached","_view","getRendererFactory","detectChanges","checkNoChanges","RootViewRef","detectChangesInRootView","ElementRefToken","ElementRef_","__extends","TemplateRefToken","TemplateRef_","_declarationParentView","elementRef","_tView","_renderer","_queries","_injectorIndex","container$$1","declarationView","queries","renderEmbeddedTemplate","viewRef","_tViewNode","createViewRef","isComponent","componentIndex","noopFactory","ivyOn.R3_ELEMENT_REF_FACTORY","ViewContainerRefToken","ViewContainerRef_","_lContainer","_hostTNode","_hostView","createElementRef","enumerable","clear","_viewRefs","templateRef","adjustedIdx","_adjustIndex","componentFactory","projectableNodes","ngModuleRef","contextInjector","parentInjector","NgModuleRef","insert","move","newIndex","shift","nativeElement","templateUrl","slotCount","encapsulation","Important","Renderer2","ComponentFactoryResolver$$1","nonMinified","minified","array","ROOT_CONTEXT","SCHEDULER","ComponentFactory","ComponentFactory$$1","toRefArray","rootSelectorOrNode","isInternalRootView","WRAP_RENDERER_FACTORY2","v","domRendererFactory3","locateHostElement","rootFlags","requestAnimationFrame","tElementNode","projection$$1","nodeList","previousTNode","firstTNode","ComponentRef","componentRef","ComponentRef$$1","ElementRef","viewEngine_ComponentFactory","location","destroyCbs","changeDetectorRef","viewEngine_ComponentRef","appendI18nNode","rendererMoveNode","_getViewData","i18nApply","instructions","localPreviousTNode","localParentTNode","elementTNode","textRNode","removedElement","removedTNode","load","NULL_INJECTOR$2","getNullInjector","createInjector","defType","additionalProviders","R3Injector","destroyed","deepForEach","processProvider","makeRecord","assertNotDestroyed","service","injectableDefInScope","injectableDefRecord","hydrate","EMPTY_ARRAY","EMPTY_ARRAY$2","parents","has","imported","processInjectorType","delete","isTypeProvider","NOT_YET","isValueProvider","isExistingProvider","isFactoryProvider","classRef_1","hasDeps","existing","multiRecord_1","CIRCULAR$2","isRootInjector","_bootstrapComponents","ngModuleDef","getNgModuleDef","ngModuleType","viewEngine_NgModuleRef","COMPONENT_FACTORY_RESOLVER","NgModuleFactory","NgModuleRef$$1","callback","NgModuleFactory$$1","pureFunction0","slotOffset","pureFn","thisArg","pureFunction1","exp","pureFunction2","exp1","exp2","pureFunction3","pureFunction4","pureFunction5","exp5","getBindingRoot","pureFunction6","exp6","pureFunction7","exp7","pureFunction8","exp8","pureFunctionV","exps","getTView","getPipeDef$1","pipeName","pipeBind1","pipeBind2","pipeBind3","pipeBind4","pipeBindV","EventEmitter","isAsync","emit","schedulerFn","err","completeFn","generatorOrNext","__isAsync","setTimeout","complete","Subscription","sink","subscribe","errorFn","rxjs","Subject","TemplateRef","predicate","descend","read","deep","createQuery","shallowResults","deepResults","LQueries_","addNode","shallow","copyQueriesToContainer","query","containerValues","list","copyQueriesToView","insertView$1","removeView$1","viewValuesIdx","removed","queryRead","factoryFn","matchingIdx","getIdxOfMatchingDirective","queryReadByTNodeType","ViewEngine_TemplateRef","addMatch","getIdxOfMatchingSelector","directiveIdx","previous","changes","_values","QueryList_","some","reset","item","unsubscribe","memoryIndex","QueryType","QueryList","track","queryRefresh","queryListImpl","_valuesTree","bypassSanitizationTrustString","trustedString","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","innerHTML","DOMParser","getInertBodyElement","getInertBodyElement_DOMParser","getInertBodyElement_XHR","html","xhr","XMLHttpRequest","responseType","open","send","parseFromString","templateEl","elAttrs","el","childNode","nodeType","Node","ELEMENT_NODE","stripCustomNsAttrs","DATA_URL_PATTERN","_sanitizeUrl","url","String","match","SAFE_URL_PATTERN","tagSet","tags","sets","sets_1","OPTIONAL_END_TAG_INLINE_ELEMENTS","BLOCK_ELEMENTS","merge$1","OPTIONAL_END_TAG_BLOCK_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","HTML_ATTRS","startElement","TEXT_NODE","chars","sanitizedSomething","endElement","checkClobberedElement","nodeName","toLowerCase","VALID_ELEMENTS","buf","elAttr","lower","VOID_ELEMENTS","SanitizingHtmlSerializer","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","replace","SURROGATE_PAIR_REGEXP","charCodeAt","NON_ALPHANUMERIC_REGEXP","inertBodyHelper","InertBodyHelper","unsafeHtml","unsafeHtmlInput","parsedHtml","mXSSAttempts","safeHtml","sanitizeChildren","getTemplateContent","isDevMode","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","_sanitizeStyle","trim","urlMatch","URL_RE","SAFE_STYLE_VALUE","outsideSingle","c","outsideDouble","hasBalancedQuotes","sanitizeHtml","sanitize","sanitizeStyle","unsafeStyle","sanitizeUrl","unsafeUrl","sanitizeResourceUrl","unsafeResourceUrl","angularCoreEnv","ɵdefineBase","ɵdefineComponent","r3.definePipe","ɵdefineDirective","r3.directiveInject","r3.getFactoryOf","defineInjector","ɵdefineNgModule","ɵdefinePipe","ɵdirectiveInject","ɵgetFactoryOf","ɵgetInheritedFactory","r3.PublicFeature","ɵinjectAttribute","injectAttribute","ɵtemplateRefExtractor","templateRefExtractor","ɵNgOnChangesFeature","ɵPublicFeature","r3.nextContext","ɵInheritDefinitionFeature","r3.containerRefreshStart","ɵelementAttribute","elementAttribute","ɵbind","ɵcontainer","ɵnextContext","nextContext","ɵcontainerRefreshStart","r3.namespaceSVG","ɵcontainerRefreshEnd","r3.enableBindings","ɵloadQueryList","loadQueryList","ɵnamespaceHTML","r3.elementStart","ɵnamespaceMathML","r3.elementEnd","ɵnamespaceSVG","r3.element","ɵenableBindings","r3.elementContainerStart","ɵdisableBindings","r3.elementContainerEnd","ɵelementStart","ɵelementEnd","ɵelement","ɵEC","ɵeC","ɵpureFunction0","r3.pureFunction5","ɵpureFunction1","r3.pureFunction6","ɵpureFunction2","r3.pureFunction7","ɵpureFunction3","r3.pureFunction8","ɵpureFunction4","r3.pureFunctionV","ɵpureFunction5","ɵpureFunction6","r3.restoreView","ɵpureFunction7","ɵpureFunction8","ɵpureFunctionV","ɵgetCurrentView","r3.interpolation4","ɵrestoreView","restoreView","ɵinterpolation1","r3.interpolation6","ɵinterpolation2","r3.interpolation7","ɵinterpolation3","r3.interpolation8","ɵinterpolation4","r3.interpolationV","ɵinterpolation5","ɵinterpolation6","r3.listener","ɵinterpolation7","ɵinterpolation8","r3.projection","ɵinterpolationV","ɵelementClassProp","r3.pipeBind1","ɵlistener","ɵload","ɵprojection","r3.pipeBind4","ɵelementProperty","r3.pipeBindV","ɵpipeBind1","ɵpipeBind2","ɵpipeBind3","r3.query","ɵpipeBind4","ɵpipeBindV","ɵprojectionDef","r3.reference","ɵpipe","pipe","ɵquery","ɵqueryRefresh","ɵregisterContentQuery","r3.elementStylingApply","ɵreference","r3.template","ɵelementStyling","ɵelementStylingMap","r3.textBinding","ɵelementStyleProp","elementStyleProp","ɵelementStylingApply","r3.embeddedViewEnd","ɵtemplate","ɵtext","ɵtextBinding","r3.i18nStart","ɵembeddedViewStart","embeddedViewStart","ɵembeddedViewEnd","r3.i18nApply","ɵi18nAttribute","sanitization.sanitizeHtml","ɵi18nExp","i18nExp","ɵi18nStart","i18nStart","ɵi18nEnd","i18nEnd","ɵi18nApply","ɵsanitizeHtml","sanitization.sanitizeUrl","ɵsanitizeStyle","unsafeScript","dep","_angular_compiler","LiteralExpr","host","setTokenAndResolvedType","R3ResolvedDependencyType","resolved","WrappedNodeExpr","Token","param","optional","skipSelf","Host","attributeName","Attribute","compileNgModuleDefs","moduleType","flatten$1","EMPTY_ARRAY$3","NG_MODULE_DEF","flatten","wrapReference","expandModuleWithProviders","compileR3NgModule","emitInline","jitExpression","expression","ngInjectorDef","NG_INJECTOR_DEF","reflectDependencies","compileInjector","statements","patchComponentDefWithScope","transitiveScopes","from","compilation","dir","transitiveScopesFor","isNgModule","transitiveCompileScopes","scopes","exported","declared","importedTyped","importedScope","entry","exportedTyped","exportedScope","out","metadata","parseHostBindings","listeners","properties","field","ann","hostPropertyName","isHostListener","outputsFromMetadata","parseInputOutputs","inputsFromType","bindingPropertyName","isOutput","outputsFromType","tslib_1.__assign","typeArgumentCount","__assign","inputsFromMetadata","lifecycle","usesOnChanges","reduce","USE_VALUE$2","NG_COMPONENT_DEF","styleUrls","parseTemplate","constantPool","ConstantPool","preserveWhitespaces","compileR3Component","errors","preStatements","ngSelectorScope","sourceMapUrl","compileDirectiveFromMetadata","directiveMetadata","makeBindingParser","ngPipeDef","name_1","compilePipeFromMetadata","pure","srcMeta","NG_INJECTABLE_DEF","hasAProvider","isUseClassProvider","isUseFactoryProvider","isUseValueProvider","isUseExistingProvider","ctorDeps","userDeps","convertDependencies","compileInjectable","declaration","NG_DIRECTIVE_DEF","NG_PIPE_DEF","injectableType","convertInjectableProviderToFactory","reflectionCapabilities","valueProvider_1","existingProvider_1","factoryProvider_1","classProvider_1","deps_2","deps_3","inheritedBaseDef","initializeBaseDef","full","major","patch","defaultErrorLogger","console","ErrorHandler","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","_console","getOriginalError","constructResolvingPath","findFirstClosedCycle","reverse","errMsg","constructResolvingMessage","wrappedError","addKey","noAnnotationError","params","ii","parameter","signature","ReflectiveKey","_globalKeyRegistry","numberOfKeys","_allKeys","newKey","KeyRegistry","size","caps","Reflector","method","importUri","fromKey","ReflectiveDependency","resolvedFactories","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","resolvedDeps","reflector","_dependenciesFor","aliasInstance","constructDependencies","normalizedProvidersMap","ResolvedReflectiveProvider_","_normalizeProviders","_extractToken","_createDependency","paramMetadata","visibility","ReflectiveInjector_","_providers","_constructionCounter","len","keyIds","objs","resolveAndInstantiate","instantiateResolved","getProviderAtIndex","_new","_instantiateProvider","_instantiate","ResolvedReflectiveFactory$$1","originalException","_getByReflectiveDependency","injectionError","INJECTOR_KEY","_getByKeySelf","_getObjByKeyId","keyId","UNDEFINED","inj","inj_","_mapProviders","displayName","APP_INITIALIZER","ApplicationInitStatus","appInits","initialized","runInitializers","asyncInitPromises","resolve","initResult","isPromise","all","catch","reject","Injectable","APP_ID","PLATFORM_INITIALIZER","APP_BOOTSTRAP_LISTENER","warn","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","clearCacheFor","getModuleId","detectWTF","trace","wtf","events","hasPendingMicrotasks","onStable","assertZonePatched","zone","_nesting","_outer","_inner","fork","isAngularZone","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","invoke","hasTaskState","hasTask","change","microTask","checkStable","hasPendingMacrotasks","macroTask","onHandleError","handleError","scheduleEventTask","EMPTY_PAYLOAD","noop$1","runTask","noop","isStable","onMicrotaskEmpty","runOutsideAngular","NoopNgZone","_ngZone","run","taskTrackingZone","_watchAngularEvents","onUnstable","_didWork","_isZoneStable","NgZone","assertNotInAngularZone","_runCallbacksIfReady","Testability","increasePendingRequestCount","decreasePendingRequestCount","_pendingCount","_callbacks","cb","pop","clearTimeout","timeoutId","doneCb","getPendingTasks","filter","updateCb","pending_1","macroTasks","timeout","getPendingRequestCount","using","exactMatch","TestabilityRegistry","unregisterApplication","getTestability","elem","findInAncestors","NgProbeToken","createPlatform","_platform","ALLOW_MULTIPLE_PLATFORMS","PlatformRef","createPlatformFactory","parentPlatformFactory","marker","desc","extraProviders","getPlatform","injectedProviders","assertPlatform","requiredToken","platform","_injector","moduleFactory","ngZone","ngZoneOption","getNgZone","ngZoneInjector","moduleRef","exceptionHandler","remove","_modules","onError","errorHandler","initStatus","donePromise","_moduleDoBootstrap","compilerOptions","appRef","ApplicationRef","f","ngDoBootstrap","_destroyed","optionsReducer","dst","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_stable","componentTypes","tick","Observable","observer","assertInAngularZone","merge","unstableSub","ComponentFactory$1","componentOrFactory","selectorOrNode","compRef","_unloadComponent","testability","registerApplication","_loadComponent","_runningTick","_tickScope","_views","attachView","wtfCreateScope","Console","_results","flatten$2","flat","first","loadAndCompile","path","exportName","loadFactory","factoryClassSuffix","System","import","_config","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","checkNotEmpty","modulePath","ViewContainerRef","ChangeDetectorRef","ViewRef$1","EmbeddedViewRef","EventListener","DebugNode","nativeNode","_debugContext","DebugElement","references","providerTokens","addChild","childNodes","insertChildrenAfter","newChildren","siblingIndex","refChild","newChild","refIndex","triggerEventHandler","eventObj","DefaultIterableDifferFactory","DefaultIterableDiffer","trackByFn","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","nextRemove","addRemoveOffset","adjPreviousIndex","getPreviousIndex","moveOffsets","currentIndex","_nextRemoved","previousIndex","localCurrentIndex","localMovePreviousIndex","offset","diff","collection","check","index_1","_trackByFn","looseIdentical","trackById","itemTrackBy","mayBeDirty","_verifyReinsertion","_addIdentityChange","_next","nextRecord","_nextPrevious","_nextAdded","_removalsTail","previousRecord","_prev","_moveAfter","_reinsertAfter","reinsertRecord","_addToRemovals","_unlink","_nextMoved","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","_remove","toIndex","_identityChangesTail","_identityChangesHead","_nextIdentityChange","_head","_tail","_nextDup","_DuplicateItemRecordList","atOrAfterIndex","_prevDup","duplicates","moveOffset","isJsObject","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","_reset","_forEach","_getOrCreateRecordForKey","_insertBeforeOrAppend","previousValue","before","record_1","_maybeAddToChanges","KeyValueChangeRecord_","_nextChanged","_addToAdditions","_addToChanges","IterableDiffers","iterable","find","supports","KeyValueDiffers","kv","TRANSLATIONS_FORMAT","MissingTranslationStrategy","Warning","defaultIterableDiffers","_iterableDiffersFactory","_keyValueDiffersFactory","NgModule","APPLICATION_MODULE_PROVIDERS","shiftInitState","priorInitState","newInitState","initState","shouldCallLifecycleInitHook","initIndex","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","isFirstCheck","_tokenKeyCache","tokenKey","EMPTY_RENDERER_TYPE_ID","_renderCompCount$1","checkBinding","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","currView","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","markParentViewsForCheck","nodes","asElementData","handleEvent","declaredViewContainer","viewParentEl","matchedQueries","valueType","queryId","matchedQueryIds","filterQueryId","splitDepsDsl","sourceName","renderHost","componentRendererType","ViewEncapsulation","Native","renderElement","resolveDefinition","DEFINITION_CACHE","NOOP","visitRootRenderNodes","nextSibling","endIndex","nodeDef","visitRenderNode","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","childCount","projectedNodes","root","renderNode","bindingFlags","execRenderNodeAction","rn","embeddedViews","_embeddedViews","k","NS_PREFIX_RE","splitNamespace","calcBindingFlags","bindings","elDef","getParentRenderElement","preserveContent","ns","name_2","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","elementEventFullName","output","listenTarget","listenerView","checkAndUpdateElementValue","elData","binding","renderNode$$1","securityContext","renderValue","setElementAttribute","setElementClass","unit","resolveNgModuleDep","depDef","former","InjectorRefTokenKey","tokenKey_1","INJECTORRefTokenKey$1","providerDef","_def","providersByKey","_createProviderInstance","providerInstance","UNDEFINED_VALUE","_createProviderInstance$1","injectable","depValues","_createClass","_callFactory","attachEmbeddedView","elementData","viewContainerParent","addToArray","vcElementData","projectedViews","dvcElementData","_projectedViews","viewDef","parentNodeDef","attachProjectedView","detachEmbeddedView","removeFromArray","renderAttachEmbeddedView","prevView","prevRenderNode","getComponentViewDefinitionFactory","viewDefFactory","ComponentFactory_","_inputs","_outputs","ngContentSelectors","inputsArr","templateName","outputsArr","componentNodeIndex","EMPTY_CONTEXT","asProviderData","tslib_1.__extends","VERSION","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","Injector_","createViewContainerData","_data","ref","attachToViewContainerRef","viewRef_","oldViewIndex","newViewIndex","dirtyParentQueries","renderDetachView","createChangeDetectorRef","fs","disposables","detachFromAppRef","attachToAppRef","vcRef","createTemplateData","_parentView","createInjector$1","createRendererV1","RendererAdapter","namespaceAndName","hostElement","parentElement","createText","projectNodes","attachViewAfter","viewRootNodes","attributeValue","isAdd","styleName","styleValue","setText","animate","bootstrapComponents","NgModuleRef_","_moduleType","provDef","injectFlags","lifecycles","checkIndex","matchedQueriesDsl","splitMatchedQueriesDsl","depDefs","outputIndex","childFlags","directChildFlags","childMatchedQueries","createPipeInstance","createDirectiveInstance","outputObservable","subscription","eventHandlerClosure","createClass","allowPrivateServices","callFactory","tokenKey$$1","ChangeDetectorRefTokenKey","RendererV1TokenKey","findCompView","searchView","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","viewContainer","TemplateRefTokenKey","INJECTORRefTokenKey","allProviders","publicProviders","providerData","providerDef_1","isComponentView","unwrap","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","isEmbeddedView","tplDef","filterId","queryIds","asQueryList","checkAndUpdateQuery","newValues","elementDef","calcQueryValues","notify","boundValue","bindingType","queryDef","dvc","queryValueType","appendNgContent","_pureExpressionDef","propertyNames","nonMinifiedName","nodeCount","lastRenderRootNode","parentEnd","anchorDef$$1","compRenderer","rendererType","outputCount","createViewNodes","compViewDef","nodeData","createProviderInstance","initView","execEmbeddedViewsAction","ViewAction","CheckNoChanges","updateRenderer","markProjectedViewsForCheck","updateDirectives","CheckAndUpdate","execQueriesAction","callInit","checkAndUpdateNode","argStyle","v8","v9","bindLen","changed","checkAndUpdateElementInline","_addInterpolationPart","checkAndUpdateTextInline","updateProp","checkAndUpdateDirectiveInline","asPureExpressionData","transform","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","i_1","checkNoChangesNode","checkNoChangesQuery","Destroy","asTextData","renderText","destroyViewNodes","CreateViewNodes","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","execComponentViewsAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","services","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","createProdRootView","prodCheckAndUpdateNode","RendererFactory2","Sanitizer","viewDef$$1","viewDefOverrides","hasOverrides","providerOverrides","hasDeprecatedOverrides","override","deprecatedBehavior","modules","comp","compFactory","applyProviderOverridesToView","elIndicesWithOverwrittenProviders","lastElementDef","elementIndicesWithOverwrittenProviders","elIndex","prodCheckNoChangesNode","callWithDebugContext","DebugAction","debugUpdateDirectives","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextDirectiveWithBinding","debugUpdateRenderer","nextRenderNodeWithBinding","givenValues","bindingValues","normalizeDebugBindingName","attr","CAMEL_CASE_REGEXP","m","normalizeDebugBindingValue","elView","elOrCompView","childDef","collectReferences","findHostElement","logError","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","oldAction","_currentAction","oldNodeIndex","_currentNodeIndex","_currentView","getCurrentDebugContext","DebugRendererFactory2","DebugRenderer2","renderData","whenRenderingDone","debugContextFactory","namespace","debugCtx","debugEl","getDebugNode","debugChildEl","debugRefEl","oldChild","removeClass","style","NgModuleFactory_","_ngModuleDefFactory","initServicesIfNeeded","isRoot","getContext","getLocalRefs","loadContext","localRefName","Render3DebugRendererFactory2","Render3DebugContext","_nativeNode","lDebugCtx","directivesCount","directiveIdxEnd","directiveIdxStart","_players","player","CorePlayerHandler","queuePlayer","urlMap","cachedResourceResolve","resp","resourceResolver","unwrapResponse","urlFetches","styleUrl","styleOffset","opts","componentTag","translation","placeholders","staticText","i18nTagRegex","idx","b1","b2","translationParts","nbTemplates","templateRoots","maxIndex","tmplIndex","tmplInstructions","partIndex","phIndex","currentElements","templateRootIndex","openedTagCount","phVisited","currentExpressions","newTmplIndex","phKeys","ph","tmplElements","tmplExpressions","lastChildIndex","animationContext","elementContext","getRootContext","moduleFactories","templateFactory","componentProvider","UNDEFINED_RENDERER_TYPE_ID","outputDefs","fixedAttrs","_b","bindingDefs","_c","namespaceAndName_1","suffixOrSecurityContext","_d","ns_1","_e","None","isFilled","resolveRendererType2","valueCount","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","_toStringWithNull","constAndInterp","APP_ROOT","propToIndex","nbKeys","globalBindingIdx","nodeIdx","currentElementHasPublicProviders","currentElementHasPrivateProviders","currentParent","viewBindingCount","currentRenderParent","viewMatchedQueries","nodeMatchedQueries","isPrivateService","newParent","isNgContainer","viewNodeFlags","rootNodeFlags","viewRootNodeFlags"],"mappings":"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","file":"/Users/ced-pro/Code/angular/angular/dist/packages-dist/core/bundles/core.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @return {?}\n */\nexport function getClosureSafeProperty(objWithPropertyToExtract) {\n    for (var key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === /** @type {?} */ (getClosureSafeProperty)) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param {?} target The target to set properties on\n * @param {?} source The source of the property keys and values to set\n * @return {?}\n */\nexport function fillProperties(target, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n//# sourceMappingURL=property.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from './defs';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @template T\n */\nvar /**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @template T\n */\nInjectionToken = /** @class */ (function () {\n    function InjectionToken(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n        else {\n            /** @nocollapse */ this.ngInjectableDef = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    InjectionToken.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"InjectionToken \" + this._desc; };\n    return InjectionToken;\n}());\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @template T\n */\nexport { InjectionToken };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    InjectionToken.prototype.ngMetadataName;\n    /** @type {?} */\n    InjectionToken.prototype.ngInjectableDef;\n    /** @type {?} */\n    InjectionToken.prototype._desc;\n}\n/**\n * @record\n * @template T\n */\nexport function InjectableDefToken() { }\n/** @type {?} */\nInjectableDefToken.prototype.ngInjectableDef;\n//# sourceMappingURL=injection_token.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * \\@ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @record\n */\nexport function TypeDecorator() { }\n/** @type {?} */\nexport var ANNOTATIONS = '__annotations__';\n/** @type {?} */\nexport var PARAMETERS = '__parameters__';\n/** @type {?} */\nexport var PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n * @template T\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @param {?=} typeFn\n * @return {?}\n */\nexport function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function DecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call.apply(metaCtor, [this].concat(args));\n            return this;\n        }\n        /** @type {?} */\n        var annotationInstance = new ((_a = (/** @type {?} */ (DecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn.apply(void 0, [cls].concat(args));\n            /** @type {?} */\n            var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                (/** @type {?} */ (cls))[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (DecoratorFactory)).annotationCls = DecoratorFactory;\n    return /** @type {?} */ (DecoratorFactory);\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props) {\n    return function ctor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (props) {\n            /** @type {?} */\n            var values = props.apply(void 0, args);\n            for (var propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makeParamDecorator(name, props, parentClass) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function ParamDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        var annotationInstance = new ((_a = (/** @type {?} */ (ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        (/** @type {?} */ (ParamDecorator)).annotation = annotationInstance;\n        return ParamDecorator;\n        /**\n         * @param {?} cls\n         * @param {?} unusedKey\n         * @param {?} index\n         * @return {?}\n         */\n        function ParamDecorator(cls, unusedKey, index) {\n            /** @type {?} */\n            var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                (/** @type {?} */ (cls))[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @return {?}\n */\nexport function makePropDecorator(name, props, parentClass, additionalProcessing) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function PropDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        var decoratorInstance = new ((_a = (/** @type {?} */ (PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        /**\n         * @param {?} target\n         * @param {?} name\n         * @return {?}\n         */\n        function PropDecorator(target, name) {\n            /** @type {?} */\n            var constructor = target.constructor;\n            /** @type {?} */\n            var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                (/** @type {?} */ (constructor))[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing.apply(void 0, [target, name].concat(args));\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n//# sourceMappingURL=decorators.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ChangeDetectionStrategy = {\n    /**\n       * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n       * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n       * Change detection can still be explictly invoked.\n       */\n    OnPush: 0,\n    /**\n       * Use the default `CheckAlways` strategy, in which change detection is automatic until\n       * explicitly deactivated.\n       */\n    Default: 1,\n};\nexport { ChangeDetectionStrategy };\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nvar ChangeDetectorStatus = {\n    /**\n       * A state in which, after calling `detectChanges()`, the change detector\n       * state becomes `Checked`, and must be explicitly invoked or reactivated.\n       */\n    CheckOnce: 0,\n    /**\n       * A state in which change detection is skipped until the change detector mode\n       * becomes `CheckOnce`.\n       */\n    Checked: 1,\n    /**\n       * A state in which change detection continues automatically until explictly\n       * deactivated.\n       */\n    CheckAlways: 2,\n    /**\n       * A state in which a change detector sub tree is not a part of the main tree and\n       * should be skipped.\n       */\n    Detached: 3,\n    /**\n       * Indicates that the change detector encountered an error checking a binding\n       * or calling a directive lifecycle method and is now in an inconsistent state. Change\n       * detectors in this state do not detect changes.\n       */\n    Errored: 4,\n    /**\n       * Indicates that the change detector has been destroyed.\n       */\n    Destroyed: 5,\n};\nexport { ChangeDetectorStatus };\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n//# sourceMappingURL=constants.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar __window = typeof window !== 'undefined' && window;\n/** @type {?} */\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\n/** @type {?} */\nvar __global = typeof global !== 'undefined' && global;\n/** @type {?} */\nvar _global = __global || __window || __self;\n/** @type {?} */\nvar promise = Promise.resolve(0);\nexport { _global as global };\n/** @type {?} */\nvar _symbolIterator = null;\n/**\n * @return {?}\n */\nexport function getSymbolIterator() {\n    if (!_symbolIterator) {\n        /** @type {?} */\n        var Symbol_1 = _global['Symbol'];\n        if (Symbol_1 && Symbol_1.iterator) {\n            _symbolIterator = Symbol_1.iterator;\n        }\n        else {\n            /** @type {?} */\n            var keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                /** @type {?} */\n                var key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nexport function scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(function () { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    /** @type {?} */\n    var res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    /** @type {?} */\n    var newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\n/**\n * An interface that a function passed into {\\@link forwardRef} has to implement.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * \\@experimental\n * @record\n */\nexport function ForwardRefFn() { }\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@experimental\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn) {\n    (/** @type {?} */ (forwardRefFn)).__forward_ref__ = forwardRef;\n    (/** @type {?} */ (forwardRefFn)).toString = function () { return stringify(this()); };\n    return (/** @type {?} */ (/** @type {?} */ (forwardRefFn)));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@experimental\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type) {\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n        type.__forward_ref__ === forwardRef) {\n        return (/** @type {?} */ (type))();\n    }\n    else {\n        return type;\n    }\n}\n//# sourceMappingURL=forward_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { getClosureSafeProperty } from '../util/property';\nimport { defineInjectable, getInjectableDef } from './defs';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/** @type {?} */\nexport var SOURCE = '__source';\n/** @type {?} */\nvar _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nexport var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/** *\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@experimental\n  @type {?} */\nexport var INJECTOR = new InjectionToken('INJECTOR');\nvar NullInjector = /** @class */ (function () {\n    function NullInjector() {\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    NullInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            throw new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n        }\n        return notFoundValue;\n    };\n    return NullInjector;\n}());\nexport { NullInjector };\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n *\n * @abstract\n */\nvar Injector = /** @class */ (function () {\n    function Injector() {\n    }\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     */\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    Injector.create = /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    };\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new NullInjector();\n    /** @nocollapse */ Injector.ngInjectableDef = defineInjectable({\n        providedIn: /** @type {?} */ ('any'),\n        factory: function () { return inject(INJECTOR); },\n    });\n    return Injector;\n}());\nexport { Injector };\nif (false) {\n    /** @type {?} */\n    Injector.THROW_IF_NOT_FOUND;\n    /** @type {?} */\n    Injector.NULL;\n    /** @nocollapse @type {?} */\n    Injector.ngInjectableDef;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     * @abstract\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?} The instance from the injector if defined, otherwise the `notFoundValue`.\n     */\n    Injector.prototype.get = function (token, notFoundValue, flags) { };\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue) { };\n}\n/** @type {?} */\nvar IDENT = function (value) {\n    return value;\n};\nvar ɵ0 = IDENT;\n/** @type {?} */\nvar EMPTY = /** @type {?} */ ([]);\n/** @type {?} */\nvar CIRCULAR = IDENT;\n/** @type {?} */\nvar MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nvar ɵ1 = MULTI_PROVIDER_FN;\n/** @type {?} */\nexport var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n/** @type {?} */\nvar NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nvar NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @enum {number} */\nvar OptionFlags = {\n    Optional: 1,\n    CheckSelf: 2,\n    CheckParent: 4,\n    Default: 6,\n};\n/** @type {?} */\nvar NULL_INJECTOR = Injector.NULL;\n/** @type {?} */\nvar NEW_LINE = /\\n/gm;\n/** @type {?} */\nvar NO_NEW_LINE = 'ɵ';\nvar StaticInjector = /** @class */ (function () {\n    function StaticInjector(providers, parent, source) {\n        if (parent === void 0) { parent = NULL_INJECTOR; }\n        if (source === void 0) { source = null; }\n        this.parent = parent;\n        this.source = source;\n        /** @type {?} */\n        var records = this._records = new Map();\n        records.set(Injector, /** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        records.set(INJECTOR, /** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    StaticInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (flags === void 0) { flags = 0 /* Default */; }\n        /** @type {?} */\n        var record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            /** @type {?} */\n            var tokenPath = e[NG_TEMP_TOKEN_PATH];\n            if (token[SOURCE]) {\n                tokenPath.unshift(token[SOURCE]);\n            }\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\n            e[NG_TOKEN_PATH] = tokenPath;\n            e[NG_TEMP_TOKEN_PATH] = null;\n            throw e;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    StaticInjector.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var tokens = /** @type {?} */ ([]);\n        /** @type {?} */\n        var records = this._records;\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n    };\n    return StaticInjector;\n}());\nexport { StaticInjector };\nif (false) {\n    /** @type {?} */\n    StaticInjector.prototype.parent;\n    /** @type {?} */\n    StaticInjector.prototype.source;\n    /** @type {?} */\n    StaticInjector.prototype._records;\n}\n/** @typedef {?} */\nvar SupportedProvider;\n/**\n * @record\n */\nfunction Record() { }\n/** @type {?} */\nRecord.prototype.fn;\n/** @type {?} */\nRecord.prototype.useNew;\n/** @type {?} */\nRecord.prototype.deps;\n/** @type {?} */\nRecord.prototype.value;\n/**\n * @record\n */\nfunction DependencyRecord() { }\n/** @type {?} */\nDependencyRecord.prototype.token;\n/** @type {?} */\nDependencyRecord.prototype.options;\n/** @typedef {?} */\nvar TokenPath;\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    /** @type {?} */\n    var deps = computeDeps(provider);\n    /** @type {?} */\n    var fn = IDENT;\n    /** @type {?} */\n    var value = EMPTY;\n    /** @type {?} */\n    var useNew = false;\n    /** @type {?} */\n    var provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = (/** @type {?} */ (provider)).useValue;\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        fn = (/** @type {?} */ (provider)).useFactory;\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        // Just use IDENT\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        useNew = true;\n        fn = resolveForwardRef((/** @type {?} */ (provider)).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (var i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            /** @type {?} */\n            var token = resolveForwardRef(provider.provide);\n            /** @type {?} */\n            var resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                /** @type {?} */\n                var multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = /** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    }));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n            }\n            /** @type {?} */\n            var record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        /** @type {?} */\n        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    var _a;\n    /** @type {?} */\n    var value;\n    if (record && !(flags & 4 /* SkipSelf */)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            /** @type {?} */\n            var obj = undefined;\n            /** @type {?} */\n            var useNew = record.useNew;\n            /** @type {?} */\n            var fn = record.fn;\n            /** @type {?} */\n            var depRecords = record.deps;\n            /** @type {?} */\n            var deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (var i = 0; i < depRecords.length; i++) {\n                    /** @type {?} */\n                    var depRecord = depRecords[i];\n                    /** @type {?} */\n                    var options = depRecord.options;\n                    /** @type {?} */\n                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, childRecord, records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, 0 /* Default */));\n                }\n            }\n            record.value = value = useNew ? new ((_a = (/** @type {?} */ (fn))).bind.apply(_a, [void 0].concat(deps)))() : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & 2 /* Self */)) {\n        value = parent.get(token, notFoundValue, 0 /* Default */);\n    }\n    return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    /** @type {?} */\n    var deps = EMPTY;\n    /** @type {?} */\n    var providerDeps = (/** @type {?} */ (provider)).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (var i = 0; i < providerDeps.length; i++) {\n            /** @type {?} */\n            var options = 6 /* Default */;\n            /** @type {?} */\n            var token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (var j = 0, annotations = token; j < annotations.length; j++) {\n                    /** @type {?} */\n                    var annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = (/** @type {?} */ (annotation)).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token: token, options: options });\n        }\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        /** @type {?} */\n        var token = resolveForwardRef((/** @type {?} */ (provider)).useExisting);\n        deps = [{ token: token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, source) {\n    if (source === void 0) { source = null; }\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    /** @type {?} */\n    var context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        /** @type {?} */\n        var parts = /** @type {?} */ ([]);\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                /** @type {?} */\n                var value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = \"{\" + parts.join(', ') + \"}\";\n    }\n    return \"StaticInjectorError\" + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj));\n}\n/** @enum {number} */\nvar InjectFlags = {\n    Default: 0,\n    /**\n       * Specifies that an injector should retrieve a dependency from any injector until reaching the\n       * host element of the current component. (Only used with Element Injector)\n       */\n    Host: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional: 8,\n};\nexport { InjectFlags };\n/** *\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n  @type {?} */\nvar _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nexport function setCurrentInjector(injector) {\n    /** @type {?} */\n    var former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function inject(token, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    if (_currentInjector === undefined) {\n        throw new Error(\"inject() must be called from an injection context\");\n    }\n    else if (_currentInjector === null) {\n        /** @type {?} */\n        var injectableDef = getInjectableDef(token);\n        if (injectableDef && injectableDef.providedIn == 'root') {\n            return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                injectableDef.value;\n        }\n        if (flags & 8 /* Optional */)\n            return null;\n        throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n    }\n    else {\n        return _currentInjector.get(token, flags & 8 /* Optional */ ? null : undefined, flags);\n    }\n}\n/**\n * @param {?} types\n * @return {?}\n */\nexport function injectArgs(types) {\n    /** @type {?} */\n    var args = [];\n    for (var i = 0; i < types.length; i++) {\n        /** @type {?} */\n        var arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            /** @type {?} */\n            var type = undefined;\n            /** @type {?} */\n            var flags = 0 /* Default */;\n            for (var j = 0; j < arg.length; j++) {\n                /** @type {?} */\n                var meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= 8 /* Optional */;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= 4 /* SkipSelf */;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= 2 /* Self */;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject(/** @type {?} */ ((type)), flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\nexport { ɵ0, ɵ1 };\n//# sourceMappingURL=injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** *\n * \\@description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n *\n  @type {?} */\nexport var Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isType(v) {\n    return typeof v === 'function';\n}\n//# sourceMappingURL=type.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type, isType } from '../type';\nimport { global, stringify } from '../util';\nimport { ANNOTATIONS, PARAMETERS, PROP_METADATA } from '../util/decorators';\n/** *\n * Attention: These regex has to hold even if the code is minified!\n  @type {?} */\nexport var DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n/** @type {?} */\nexport var INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{/;\n/** @type {?} */\nexport var INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{[\\s\\S]*constructor\\s*\\(/;\nvar ReflectionCapabilities = /** @class */ (function () {\n    function ReflectionCapabilities(reflect) {\n        this._reflect = reflect || global['Reflect'];\n    }\n    /**\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.isReflectionEnabled = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.factory = /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) { return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new (t.bind.apply(t, [void 0].concat(args)))();\n    }; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._zipTypesAndAnnotations = /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    function (paramTypes, paramAnnotations) {\n        /** @type {?} */\n        var result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (var i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownParameters = /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (type, parentCtor) {\n        /** @type {?} */\n        var typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if ((/** @type {?} */ (type)).parameters && (/** @type {?} */ (type)).parameters !== parentCtor.parameters) {\n            return (/** @type {?} */ (type)).parameters;\n        }\n        /** @type {?} */\n        var tsickleCtorParams = (/** @type {?} */ (type)).ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            /** @type {?} */\n            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            /** @type {?} */\n            var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n            /** @type {?} */\n            var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n            });\n            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n        }\n        /** @type {?} */\n        var paramAnnotations = type.hasOwnProperty(PARAMETERS) && (/** @type {?} */ (type))[PARAMETERS];\n        /** @type {?} */\n        var paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array((/** @type {?} */ (type.length))).fill(undefined);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.parameters = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(type);\n        /** @type {?} */\n        var parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownAnnotations = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).annotations && (/** @type {?} */ (typeOrFunc)).annotations !== parentCtor.annotations) {\n            /** @type {?} */\n            var annotations = (/** @type {?} */ (typeOrFunc)).annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).decorators && (/** @type {?} */ (typeOrFunc)).decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata((/** @type {?} */ (typeOrFunc)).decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return (/** @type {?} */ (typeOrFunc))[ANNOTATIONS];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        /** @type {?} */\n        var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownPropMetadata = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).propMetadata &&\n            (/** @type {?} */ (typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n            /** @type {?} */\n            var propMetadata = (/** @type {?} */ (typeOrFunc)).propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).propDecorators &&\n            (/** @type {?} */ (typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n            /** @type {?} */\n            var propDecorators_1 = (/** @type {?} */ (typeOrFunc)).propDecorators;\n            /** @type {?} */\n            var propMetadata_1 = /** @type {?} */ ({});\n            Object.keys(propDecorators_1).forEach(function (prop) {\n                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n            });\n            return propMetadata_1;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return (/** @type {?} */ (typeOrFunc))[PROP_METADATA];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        var propMetadata = {};\n        if (parentCtor !== Object) {\n            /** @type {?} */\n            var parentPropMetadata_1 = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                propMetadata[propName] = parentPropMetadata_1[propName];\n            });\n        }\n        /** @type {?} */\n        var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach(function (propName) {\n                /** @type {?} */\n                var decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push.apply(decorators, propMetadata[propName]);\n                }\n                decorators.push.apply(decorators, ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.guards = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return {}; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return /** @type {?} */ (new Function('o', 'return o.' + name + ';')); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return /** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;'));\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        /** @type {?} */\n        var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n        return /** @type {?} */ (new Function('o', 'args', functionBody));\n    };\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return \"./\" + stringify(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return \"./\" + stringify(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return runtime;\n    };\n    /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveEnum = /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (enumIdentifier, name) { return enumIdentifier[name]; };\n    return ReflectionCapabilities;\n}());\nexport { ReflectionCapabilities };\nif (false) {\n    /** @type {?} */\n    ReflectionCapabilities.prototype._reflect;\n}\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(function (decoratorInvocation) {\n        /** @type {?} */\n        var decoratorType = decoratorInvocation.type;\n        /** @type {?} */\n        var annotationCls = decoratorType.annotationCls;\n        /** @type {?} */\n        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n    });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor) {\n    /** @type {?} */\n    var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    /** @type {?} */\n    var parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n//# sourceMappingURL=reflection_capabilities.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponnent{\n * }\n *\n * // Calling `renderComponent` will fail because `MyComponent`'s `\\@Compenent.templateUrl`\n * // needs to be resolved because `renderComponent` is synchronous process.\n * // renderComponent(MyComponent);\n *\n * // Calling `resolveComponentResources` will resolve `\\@Compenent.templateUrl` into\n * // `\\@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n * // Use browser's `fetch` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible to returning a `Promise` of the resolved\n * URL. Browser's `fetch` method is a good default implementation.\n * @return {?}\n */\nexport function resolveComponentResources(resourceResolver) {\n    /** @type {?} */\n    var urlFetches = [];\n    /** @type {?} */\n    var urlMap = new Map();\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function cachedResourceResolve(url) {\n        /** @type {?} */\n        var promise = urlMap.get(url);\n        if (!promise) {\n            /** @type {?} */\n            var resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n            urlFetches.push(promise);\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach(function (component) {\n        if (component.templateUrl) {\n            cachedResourceResolve(component.templateUrl).then(function (template) {\n                component.template = template;\n                component.templateUrl = undefined;\n            });\n        }\n        /** @type {?} */\n        var styleUrls = component.styleUrls;\n        /** @type {?} */\n        var styles = component.styles || (component.styles = []);\n        /** @type {?} */\n        var styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach(function (styleUrl, index) {\n            styles.push(''); // pre-allocate array.\n            cachedResourceResolve(styleUrl).then(function (style) {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            });\n        });\n    });\n    componentResourceResolutionQueue.clear();\n    return Promise.all(urlFetches).then(function () { return null; });\n}\n/** @type {?} */\nvar componentResourceResolutionQueue = new Set();\n/**\n * @param {?} metadata\n * @return {?}\n */\nexport function maybeQueueResolutionOfComponentResources(metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.add(metadata);\n    }\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function componentNeedsResolution(component) {\n    return component.templateUrl || component.styleUrls && component.styleUrls.length;\n}\n/**\n * @return {?}\n */\nexport function clearResolutionOfComponentResourcesQueue() {\n    componentResourceResolutionQueue.clear();\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\n//# sourceMappingURL=resource_loading.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nexport function ngDevModeResetPerfCounters() {\n    /** @type {?} */\n    var newCounters = {\n        firstTemplatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererCreateComment: 0,\n    };\n    // NOTE: Under Ivy we may have both window & global defined in the Node\n    //    environment since ensureDocument() in render3.ts sets global.window.\n    if (typeof window != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        (/** @type {?} */ (window))['ngDevMode'] = newCounters;\n    }\n    if (typeof global != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        (/** @type {?} */ (global))['ngDevMode'] = newCounters;\n    }\n    if (typeof self != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        (/** @type {?} */ (self))['ngDevMode'] = newCounters;\n    }\n    return newCounters;\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngDevModeResetPerfCounters();\n}\n//# sourceMappingURL=ng_dev_mode.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ViewEncapsulation = {\n    /**\n       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n       * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n       * selectors.\n       *\n       * This is the default option.\n       */\n    Emulated: 0,\n    /**\n       * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n       * Use the native encapsulation mechanism of the renderer.\n       *\n       * For the DOM this means using the deprecated [Shadow DOM\n       * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       */\n    Native: 1,\n    /**\n       * Don't provide any template or style encapsulation.\n       */\n    None: 2,\n    /**\n       * Use Shadow DOM to encapsulate styles.\n       *\n       * For the DOM this means using modern [Shadow\n       * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       */\n    ShadowDom: 3,\n};\nexport { ViewEncapsulation };\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from './fields';\n/** @type {?} */\nexport var EMPTY = {};\n/** @type {?} */\nexport var EMPTY_ARRAY = [];\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    Object.freeze(EMPTY);\n    Object.freeze(EMPTY_ARRAY);\n}\n/** @type {?} */\nvar _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nexport function defineComponent(componentDefinition) {\n    /** @type {?} */\n    var type = componentDefinition.type;\n    /** @type {?} */\n    var pipeTypes = /** @type {?} */ ((componentDefinition.pipes));\n    /** @type {?} */\n    var directiveTypes = /** @type {?} */ ((componentDefinition.directives));\n    /** @type {?} */\n    var declaredInputs = /** @type {?} */ ({});\n    /** @type {?} */\n    var encapsulation = componentDefinition.encapsulation || ViewEncapsulation.Emulated;\n    /** @type {?} */\n    var styles = componentDefinition.styles || EMPTY_ARRAY;\n    /** @type {?} */\n    var animations = componentDefinition.animations || null;\n    /** @type {?} */\n    var data = componentDefinition.data || {};\n    if (animations) {\n        data[\"animations\"] = animations;\n    }\n    /** @type {?} */\n    var def = {\n        type: type,\n        diPublic: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        hostVars: componentDefinition.hostVars || 0,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || /** @type {?} */ ((null)),\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        contentQueriesRefresh: componentDefinition.contentQueriesRefresh || null,\n        attributes: componentDefinition.attributes || null,\n        inputs: invertObject(componentDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(componentDefinition.outputs),\n        exportAs: componentDefinition.exportAs || null,\n        onInit: type.prototype.ngOnInit || null,\n        doCheck: type.prototype.ngDoCheck || null,\n        afterContentInit: type.prototype.ngAfterContentInit || null,\n        afterContentChecked: type.prototype.ngAfterContentChecked || null,\n        afterViewInit: type.prototype.ngAfterViewInit || null,\n        afterViewChecked: type.prototype.ngAfterViewChecked || null,\n        onDestroy: type.prototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: directiveTypes ?\n            function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef); } :\n            null,\n        pipeDefs: pipeTypes ?\n            function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n            null,\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: data,\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: encapsulation,\n        providers: EMPTY_ARRAY,\n        viewProviders: EMPTY_ARRAY,\n        id: \"c\" + _renderCompCount++, styles: styles,\n    };\n    /** @type {?} */\n    var feature = componentDefinition.features;\n    feature && feature.forEach(function (fn) { return fn(def); });\n    return /** @type {?} */ (def);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractDirectiveDef(type) {\n    /** @type {?} */\n    var def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n    }\n    return /** @type {?} */ ((def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractPipeDef(type) {\n    /** @type {?} */\n    var def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n    }\n    return /** @type {?} */ ((def));\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nexport function defineNgModule(def) {\n    /** @type {?} */\n    var res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY,\n        declarations: def.declarations || EMPTY_ARRAY,\n        imports: def.imports || EMPTY_ARRAY,\n        exports: def.exports || EMPTY_ARRAY,\n        transitiveCompileScopes: null,\n    };\n    return /** @type {?} */ (res);\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName')\n *   propName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   a0: 'propName1',\n *   b1: ['publicName', 'propName2'],\n * }\n * ```\n *\n * becomes\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'publicName': 'b1'\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in:\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'propName2': 'b1'\n * }\n * ```\n *\n * @param {?} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY;\n    /** @type {?} */\n    var newLookup = {};\n    for (var minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            /** @type {?} */\n            var publicName = obj[minifiedKey];\n            /** @type {?} */\n            var declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[declaredName] = minifiedKey);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @template T\n * @param {?} baseDefinition The base definition parameters\n * @return {?}\n */\nexport function defineBase(baseDefinition) {\n    /** @type {?} */\n    var declaredInputs = /** @type {?} */ ({});\n    return {\n        inputs: invertObject(baseDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(baseDefinition.outputs),\n    };\n}\n/** *\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n  @type {?} */\nexport var defineDirective = /** @type {?} */ ((defineComponent));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n * @return {?}\n */\nexport function definePipe(pipeDef) {\n    return /** @type {?} */ ((/** @type {?} */ ({\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    })));\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getComponentDef(type) {\n    return (/** @type {?} */ (type))[NG_COMPONENT_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getDirectiveDef(type) {\n    return (/** @type {?} */ (type))[NG_DIRECTIVE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getPipeDef(type) {\n    return (/** @type {?} */ (type))[NG_PIPE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getNgModuleDef(type) {\n    return (/** @type {?} */ (type))[NG_MODULE_DEF] || null;\n}\n//# sourceMappingURL=definition.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getComponentDef, getNgModuleDef } from './definition';\n/**\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertNumber(actual, msg) {\n    if (typeof actual != 'number') {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertSame(actual, expected, msg) {\n    if (actual !== expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertNotDefined(actual, msg) {\n    if (actual != null) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nexport function assertComponentType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.'; }\n    if (!getComponentDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nexport function assertNgModuleType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.'; }\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} msg\n * @return {?}\n */\nfunction throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(\"ASSERTION ERROR: \" + msg);\n}\n//# sourceMappingURL=assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getSymbolIterator, looseIdentical } from '../util';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a, b) {\n    /** @type {?} */\n    var isListLikeIterableA = isListLikeIterable(a);\n    /** @type {?} */\n    var isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        /** @type {?} */\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        /** @type {?} */\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nvar /**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nWrappedValue = /** @class */ (function () {\n    function WrappedValue(value) {\n        this.wrapped = value;\n    }\n    /** Creates a wrapped value. */\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.wrap = /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return new WrappedValue(value); };\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.unwrap = /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n    /** Returns true if `value` is a wrapped value. */\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.isWrapped = /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return value instanceof WrappedValue; };\n    return WrappedValue;\n}());\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nexport { WrappedValue };\nif (false) {\n    /**\n     * @deprecated from 5.3, use `unwrap()` instead - will switch to protected\n     * @type {?}\n     */\n    WrappedValue.prototype.wrapped;\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n */\nvar /**\n * Represents a basic change from a previous to a new value.\n *\n */\nSimpleChange = /** @class */ (function () {\n    function SimpleChange(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    SimpleChange.prototype.isFirstChange = /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    function () { return this.firstChange; };\n    return SimpleChange;\n}());\n/**\n * Represents a basic change from a previous to a new value.\n *\n */\nexport { SimpleChange };\nif (false) {\n    /** @type {?} */\n    SimpleChange.prototype.previousValue;\n    /** @type {?} */\n    SimpleChange.prototype.currentValue;\n    /** @type {?} */\n    SimpleChange.prototype.firstChange;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nexport function areIterablesEqual(a, b, comparator) {\n    /** @type {?} */\n    var iterator1 = a[getSymbolIterator()]();\n    /** @type {?} */\n    var iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        /** @type {?} */\n        var item1 = iterator1.next();\n        /** @type {?} */\n        var item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        /** @type {?} */\n        var iterator = obj[getSymbolIterator()]();\n        /** @type {?} */\n        var item = void 0;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nexport function isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n//# sourceMappingURL=change_detection_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { devModeEqual } from '../change_detection/change_detection_util';\nimport { assertDefined, assertLessThan } from './assert';\nimport { ACTIVE_INDEX } from './interfaces/container';\nimport { MONKEY_PATCH_KEY_NAME } from './interfaces/context';\nimport { CONTEXT, FLAGS, HEADER_OFFSET, HOST, PARENT, TVIEW } from './interfaces/view';\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @param {?} checkNoChangesMode\n * @return {?}\n */\nexport function isDifferent(a, b, checkNoChangesMode) {\n    if (ngDevMode && checkNoChangesMode) {\n        return !devModeEqual(a, b);\n    }\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function stringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    return '' + value;\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nexport function flatten(list) {\n    /** @type {?} */\n    var result = [];\n    /** @type {?} */\n    var i = 0;\n    while (i < list.length) {\n        /** @type {?} */\n        var item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n/**\n * Retrieves a value from any `LViewData` or `TData`.\n * @template T\n * @param {?} index\n * @param {?} arr\n * @return {?}\n */\nexport function loadInternal(index, arr) {\n    ngDevMode && assertDataInRangeInternal(index + HEADER_OFFSET, arr);\n    return arr[index + HEADER_OFFSET];\n}\n/**\n * @param {?} index\n * @param {?} arr\n * @return {?}\n */\nexport function assertDataInRangeInternal(index, arr) {\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n/**\n * Takes the value of a slot in `LViewData` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LViewData. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param {?} value The initial value in `LViewData`\n * @return {?}\n */\nexport function readElementValue(value) {\n    while (Array.isArray(value)) {\n        value = /** @type {?} */ (value[HOST]);\n    }\n    return value;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n * @param {?} index\n * @param {?} arr\n * @return {?}\n */\nexport function getNativeByIndex(index, arr) {\n    return readElementValue(arr[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nexport function getNativeByTNode(tNode, hostView) {\n    return readElementValue(hostView[tNode.index]);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nexport function getTNode(index, view) {\n    return /** @type {?} */ (view[TVIEW].data[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} hostView\n * @return {?}\n */\nexport function getComponentViewByIndex(nodeIndex, hostView) {\n    /** @type {?} */\n    var slotValue = hostView[nodeIndex];\n    return slotValue.length >= HEADER_OFFSET ? slotValue : slotValue[HOST];\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isContentQueryHost(tNode) {\n    return (tNode.flags & 16384 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isComponent(tNode) {\n    return (tNode.flags & 4096 /* isComponent */) === 4096 /* isComponent */;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isLContainer(value) {\n    // Styling contexts are also arrays, but their first index contains an element node\n    return Array.isArray(value) && typeof value[ACTIVE_INDEX] === 'number';\n}\n/**\n * Retrieve the root view from any component by walking the parent `LViewData` until\n * reaching the root `LViewData`.\n *\n * @param {?} target\n * @return {?}\n */\nexport function getRootView(target) {\n    ngDevMode && assertDefined(target, 'component');\n    /** @type {?} */\n    var lViewData = Array.isArray(target) ? (/** @type {?} */ (target)) : /** @type {?} */ ((readPatchedLViewData(target)));\n    while (lViewData && !(lViewData[FLAGS] & 64 /* IsRoot */)) {\n        lViewData = /** @type {?} */ ((lViewData[PARENT]));\n    }\n    return lViewData;\n}\n/**\n * @param {?} viewOrComponent\n * @return {?}\n */\nexport function getRootContext(viewOrComponent) {\n    return /** @type {?} */ (getRootView(viewOrComponent)[CONTEXT]);\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n * @param {?} target\n * @return {?}\n */\nexport function readPatchedData(target) {\n    return target[MONKEY_PATCH_KEY_NAME];\n}\n/**\n * @param {?} target\n * @return {?}\n */\nexport function readPatchedLViewData(target) {\n    /** @type {?} */\n    var value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : (/** @type {?} */ (value)).lViewData;\n    }\n    return null;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport './ng_dev_mode';\nimport { assertEqual } from './assert';\nimport { MONKEY_PATCH_KEY_NAME } from './interfaces/context';\nimport { CONTEXT, HEADER_OFFSET, HOST, TVIEW } from './interfaces/view';\nimport { getComponentViewByIndex, getNativeByTNode, readElementValue, readPatchedData } from './util';\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LViewData` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n * @param {?} target\n * @return {?}\n */\nexport function getContext(target) {\n    /** @type {?} */\n    var mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LViewData instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            /** @type {?} */\n            var lViewData = /** @type {?} */ ((mpValue));\n            /** @type {?} */\n            var nodeIndex = void 0;\n            /** @type {?} */\n            var component = undefined;\n            /** @type {?} */\n            var directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lViewData, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lViewData, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = discoverDirectives(nodeIndex, lViewData, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lViewData, /** @type {?} */ (target));\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            /** @type {?} */\n            var native = readElementValue(lViewData[nodeIndex]);\n            /** @type {?} */\n            var existingCtx = readPatchedData(native);\n            /** @type {?} */\n            var context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lViewData, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (var i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        /** @type {?} */\n        var rElement = /** @type {?} */ (target);\n        ngDevMode && assertDomElement(rElement);\n        /** @type {?} */\n        var parent_1 = /** @type {?} */ (rElement);\n        while (parent_1 = parent_1.parentNode) {\n            /** @type {?} */\n            var parentContext = readPatchedData(parent_1);\n            if (parentContext) {\n                /** @type {?} */\n                var lViewData = void 0;\n                if (Array.isArray(parentContext)) {\n                    lViewData = /** @type {?} */ (parentContext);\n                }\n                else {\n                    lViewData = parentContext.lViewData;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lViewData) {\n                    return null;\n                }\n                /** @type {?} */\n                var index = findViaNativeElement(lViewData, rElement);\n                if (index >= 0) {\n                    /** @type {?} */\n                    var native = readElementValue(lViewData[index]);\n                    /** @type {?} */\n                    var context = createLContext(lViewData, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return (/** @type {?} */ (mpValue)) || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n * @param {?} lViewData\n * @param {?} nodeIndex\n * @param {?} native\n * @return {?}\n */\nfunction createLContext(lViewData, nodeIndex, native) {\n    return {\n        lViewData: lViewData,\n        nodeIndex: nodeIndex, native: native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param {?} componentInstance\n * @return {?} The component's view\n */\nexport function getComponentViewByInstance(componentInstance) {\n    /** @type {?} */\n    var lViewData = readPatchedData(componentInstance);\n    /** @type {?} */\n    var view;\n    if (Array.isArray(lViewData)) {\n        /** @type {?} */\n        var nodeIndex = findViaComponent(lViewData, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lViewData);\n        /** @type {?} */\n        var context = createLContext(lViewData, nodeIndex, /** @type {?} */ (view[HOST]));\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        /** @type {?} */\n        var context = /** @type {?} */ ((lViewData));\n        view = getComponentViewByIndex(context.nodeIndex, context.lViewData);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n * @param {?} target\n * @param {?} data\n * @return {?}\n */\nexport function attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LViewData and returns the matching index\n * @param {?} lViewData\n * @param {?} target\n * @return {?}\n */\nfunction findViaNativeElement(lViewData, target) {\n    /** @type {?} */\n    var tNode = lViewData[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        var native = /** @type {?} */ ((getNativeByTNode(tNode, lViewData)));\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n * @param {?} tNode\n * @return {?}\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else if (tNode.parent) {\n        return tNode.parent.next || null;\n    }\n    return null;\n}\n/**\n * Locates the component within the given LViewData and returns the matching index\n * @param {?} lViewData\n * @param {?} componentInstance\n * @return {?}\n */\nfunction findViaComponent(lViewData, componentInstance) {\n    /** @type {?} */\n    var componentIndices = lViewData[TVIEW].components;\n    if (componentIndices) {\n        for (var i = 0; i < componentIndices.length; i++) {\n            /** @type {?} */\n            var elementComponentIndex = componentIndices[i];\n            /** @type {?} */\n            var componentView = getComponentViewByIndex(elementComponentIndex, lViewData);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        /** @type {?} */\n        var rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lViewData);\n        /** @type {?} */\n        var rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LViewData and returns the matching index\n * @param {?} lViewData\n * @param {?} directiveInstance\n * @return {?}\n */\nfunction findViaDirective(lViewData, directiveInstance) {\n    /** @type {?} */\n    var tNode = lViewData[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        var directiveIndexStart = getDirectiveStartIndex(tNode);\n        /** @type {?} */\n        var directiveIndexEnd = getDirectiveEndIndex(tNode, directiveIndexStart);\n        for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lViewData[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * @param {?} element\n * @return {?}\n */\nfunction assertDomElement(element) {\n    assertEqual(element.nodeType, 1, 'The provided value must be an instance of an HTMLElement');\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param {?} nodeIndex The node index\n * @param {?} lViewData The target view data\n * @param {?} includeComponents Whether or not to include components in returned directives\n * @return {?}\n */\nexport function discoverDirectives(nodeIndex, lViewData, includeComponents) {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (lViewData[TVIEW].data[nodeIndex]);\n    /** @type {?} */\n    var directiveStartIndex = getDirectiveStartIndex(tNode);\n    /** @type {?} */\n    var directiveEndIndex = getDirectiveEndIndex(tNode, directiveStartIndex);\n    if (!includeComponents && tNode.flags & 4096 /* isComponent */)\n        directiveStartIndex++;\n    return lViewData.slice(directiveStartIndex, directiveEndIndex);\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n * @param {?} lViewData\n * @param {?} nodeIndex\n * @return {?}\n */\nexport function discoverLocalRefs(lViewData, nodeIndex) {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (lViewData[TVIEW].data[nodeIndex]);\n    if (tNode && tNode.localNames) {\n        /** @type {?} */\n        var result = {};\n        for (var i = 0; i < tNode.localNames.length; i += 2) {\n            /** @type {?} */\n            var localRefName = tNode.localNames[i];\n            /** @type {?} */\n            var directiveIndex = /** @type {?} */ (tNode.localNames[i + 1]);\n            result[localRefName] =\n                directiveIndex === -1 ? /** @type {?} */ ((getNativeByTNode(tNode, lViewData))) : lViewData[directiveIndex];\n        }\n        return result;\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getDirectiveStartIndex(tNode) {\n    // the tNode instances store a flag value which then has a\n    // pointer which tells the starting index of where all the\n    // active directives are in the master directive array\n    return tNode.flags >> 15 /* DirectiveStartingIndexShift */;\n}\n/**\n * @param {?} tNode\n * @param {?} startIndex\n * @return {?}\n */\nfunction getDirectiveEndIndex(tNode, startIndex) {\n    /** @type {?} */\n    var count = tNode.flags & 4095 /* DirectiveCountMask */;\n    return count ? (startIndex + count) : -1;\n}\n//# sourceMappingURL=context_discovery.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual } from './assert';\nimport { FLAGS } from './interfaces/view';\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param {?} index The index of the directive in LViewData\n * @param {?} onInit\n * @param {?} doCheck\n * @param {?} tView The current TView\n * @return {?}\n */\nexport function queueInitHooks(index, onInit, doCheck, tView) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    if (onInit) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n    }\n    if (doCheck) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n    }\n}\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n * @param {?} flags\n * @param {?} tView\n * @return {?}\n */\nexport function queueLifecycleHooks(flags, tView) {\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        var start = flags >> 15 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var count = flags & 4095 /* DirectiveCountMask */;\n        /** @type {?} */\n        var end = start + count;\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (tView.data[i]);\n            queueContentHooks(def, tView, i);\n            queueViewHooks(def, tView, i);\n            queueDestroyHooks(def, tView, i);\n        }\n    }\n}\n/**\n * Queues afterContentInit and afterContentChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueContentHooks(def, tView, i) {\n    if (def.afterContentInit) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n    }\n    if (def.afterContentChecked) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n    }\n}\n/**\n * Queues afterViewInit and afterViewChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueViewHooks(def, tView, i) {\n    if (def.afterViewInit) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n    }\n    if (def.afterViewChecked) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n    }\n}\n/**\n * Queues onDestroy hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueDestroyHooks(def, tView, i) {\n    if (def.onDestroy != null) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n    }\n}\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeInitHooks(currentView, tView, creationMode) {\n    if (currentView[FLAGS] & 16 /* RunInit */) {\n        executeHooks(currentView, tView.initHooks, tView.checkHooks, creationMode);\n        currentView[FLAGS] &= ~16 /* RunInit */;\n    }\n}\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param {?} data\n * @param {?} allHooks\n * @param {?} checkHooks\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeHooks(data, allHooks, checkHooks, creationMode) {\n    /** @type {?} */\n    var hooksToCall = creationMode ? allHooks : checkHooks;\n    if (hooksToCall) {\n        callHooks(data, hooksToCall);\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * creation mode.\n *\n * @param {?} currentView The current view\n * @param {?} arr The array in which the hooks are found\n * @return {?}\n */\nexport function callHooks(currentView, arr) {\n    for (var i = 0; i < arr.length; i += 2) {\n        (/** @type {?} */ (arr[i + 1])).call(currentView[/** @type {?} */ (arr[i])]);\n    }\n}\n//# sourceMappingURL=hooks.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nexport { RendererStyleFlags3 };\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/** @typedef {?} */\nvar Renderer3;\nexport { Renderer3 };\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n *\n * @record\n */\nexport function ObjectOrientedRenderer3() { }\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createComment;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createElement;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createElementNS;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createTextNode;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.querySelector;\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nexport function isProceduralRenderer(renderer) {\n    return !!((/** @type {?} */ (renderer)).listen);\n}\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n * @record\n */\nexport function ProceduralRenderer3() { }\n/** @type {?} */\nProceduralRenderer3.prototype.destroy;\n/** @type {?} */\nProceduralRenderer3.prototype.createComment;\n/** @type {?} */\nProceduralRenderer3.prototype.createElement;\n/** @type {?} */\nProceduralRenderer3.prototype.createText;\n/**\n * This property is allowed to be null / undefined,\n * in which case the view engine won't call it.\n * This is used as a performance optimization for production mode.\n * @type {?|undefined}\n */\nProceduralRenderer3.prototype.destroyNode;\n/** @type {?} */\nProceduralRenderer3.prototype.appendChild;\n/** @type {?} */\nProceduralRenderer3.prototype.insertBefore;\n/** @type {?} */\nProceduralRenderer3.prototype.removeChild;\n/** @type {?} */\nProceduralRenderer3.prototype.selectRootElement;\n/** @type {?} */\nProceduralRenderer3.prototype.setAttribute;\n/** @type {?} */\nProceduralRenderer3.prototype.removeAttribute;\n/** @type {?} */\nProceduralRenderer3.prototype.addClass;\n/** @type {?} */\nProceduralRenderer3.prototype.removeClass;\n/** @type {?} */\nProceduralRenderer3.prototype.setStyle;\n/** @type {?} */\nProceduralRenderer3.prototype.removeStyle;\n/** @type {?} */\nProceduralRenderer3.prototype.setProperty;\n/** @type {?} */\nProceduralRenderer3.prototype.setValue;\n/** @type {?} */\nProceduralRenderer3.prototype.listen;\n/**\n * @record\n */\nexport function RendererFactory3() { }\n/** @type {?} */\nRendererFactory3.prototype.createRenderer;\n/** @type {?|undefined} */\nRendererFactory3.prototype.begin;\n/** @type {?|undefined} */\nRendererFactory3.prototype.end;\n/** @type {?} */\nexport var domRendererFactory3 = {\n    createRenderer: function (hostElement, rendererType) { return document; }\n};\n/**\n * Subset of API needed for appending elements and text nodes.\n * @record\n */\nexport function RNode() { }\n/** @type {?} */\nRNode.prototype.removeChild;\n/**\n * Insert a child node.\n *\n * Used exclusively for adding View root nodes into ViewAnchor location.\n * @type {?}\n */\nRNode.prototype.insertBefore;\n/**\n * Append a child node.\n *\n * Used exclusively for building up DOM which are static (ie not View roots)\n * @type {?}\n */\nRNode.prototype.appendChild;\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n * @record\n */\nexport function RElement() { }\n/** @type {?} */\nRElement.prototype.style;\n/** @type {?} */\nRElement.prototype.classList;\n/** @type {?} */\nRElement.prototype.className;\n/** @type {?} */\nRElement.prototype.setAttribute;\n/** @type {?} */\nRElement.prototype.removeAttribute;\n/** @type {?} */\nRElement.prototype.setAttributeNS;\n/** @type {?} */\nRElement.prototype.addEventListener;\n/** @type {?} */\nRElement.prototype.removeEventListener;\n/** @type {?|undefined} */\nRElement.prototype.setProperty;\n/**\n * @record\n */\nexport function RCssStyleDeclaration() { }\n/** @type {?} */\nRCssStyleDeclaration.prototype.removeProperty;\n/** @type {?} */\nRCssStyleDeclaration.prototype.setProperty;\n/**\n * @record\n */\nexport function RDomTokenList() { }\n/** @type {?} */\nRDomTokenList.prototype.add;\n/** @type {?} */\nRDomTokenList.prototype.remove;\n/**\n * @record\n */\nexport function RText() { }\n/** @type {?} */\nRText.prototype.textContent;\n/**\n * @record\n */\nexport function RComment() { }\n/** @type {?} */\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=renderer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined, assertEqual } from './assert';\n/**\n * @param {?} tNode\n * @param {?} type\n * @return {?}\n */\nexport function assertNodeType(tNode, type) {\n    assertDefined(tNode, 'should be called with a TNode');\n    assertEqual(tNode.type, type, \"should be a \" + typeName(type));\n}\n/**\n * @param {?} tNode\n * @param {...?} types\n * @return {?}\n */\nexport function assertNodeOfPossibleTypes(tNode) {\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        types[_i - 1] = arguments[_i];\n    }\n    assertDefined(tNode, 'should be called with a TNode');\n    /** @type {?} */\n    var found = types.some(function (type) { return tNode.type === type; });\n    assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', ') + \" but got \" + typeName(tNode.type));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    if (type == 4 /* ElementContainer */)\n        return 'ElementContainer';\n    return '<unknown>';\n}\n//# sourceMappingURL=node_assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined } from './assert';\nimport { attachPatchData } from './context_discovery';\nimport { callHooks } from './hooks';\nimport { NATIVE, RENDER_PARENT, VIEWS, unusedValueExportToPlacateAjd as unused1 } from './interfaces/container';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/projection';\nimport { isProceduralRenderer, unusedValueExportToPlacateAjd as unused4 } from './interfaces/renderer';\nimport { CLEANUP, CONTAINER_INDEX, FLAGS, HEADER_OFFSET, HOST_NODE, NEXT, PARENT, QUERIES, RENDERER, TVIEW, unusedValueExportToPlacateAjd as unused5 } from './interfaces/view';\nimport { assertNodeType } from './node_assert';\nimport { getNativeByTNode, isLContainer, readElementValue, stringify } from './util';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n/**\n * Retrieves the parent element of a given node.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nexport function getParentNative(tNode, currentView) {\n    return tNode.parent == null ? getHostNative(currentView) :\n        getNativeByTNode(tNode.parent, currentView);\n}\n/**\n * Gets the host element given a view. Will return null if the current view is an embedded view,\n * which does not have a host element.\n * @param {?} currentView\n * @return {?}\n */\nexport function getHostNative(currentView) {\n    /** @type {?} */\n    var hostTNode = /** @type {?} */ (currentView[HOST_NODE]);\n    return hostTNode && hostTNode.type !== 2 /* View */ ?\n        (/** @type {?} */ (getNativeByTNode(hostTNode, /** @type {?} */ ((currentView[PARENT]))))) :\n        null;\n}\n/**\n * @param {?} tNode\n * @param {?} embeddedView\n * @return {?}\n */\nexport function getLContainer(tNode, embeddedView) {\n    if (tNode.index === -1) {\n        /** @type {?} */\n        var containerHostIndex = embeddedView[CONTAINER_INDEX];\n        return containerHostIndex > -1 ? /** @type {?} */ ((embeddedView[PARENT]))[containerHostIndex] : null;\n    }\n    else {\n        // This is a inline view node (e.g. embeddedViewStart)\n        return /** @type {?} */ (((embeddedView[PARENT]))[/** @type {?} */ ((tNode.parent)).index]);\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n * @param {?} tViewNode\n * @param {?} view\n * @return {?}\n */\nexport function getContainerRenderParent(tViewNode, view) {\n    /** @type {?} */\n    var container = getLContainer(tViewNode, view);\n    return container ? container[RENDER_PARENT] : null;\n}\n/** @enum {number} */\nvar WalkTNodeTreeAction = {\n    /** node insert in the native environment */\n    Insert: 0,\n    /** node detach from the native environment */\n    Detach: 1,\n    /** node destruction using the renderer's API */\n    Destroy: 2,\n};\n/** *\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n  @type {?} */\nvar projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param {?} viewToWalk the view to walk\n * @param {?} action identifies the action to be performed on the elements\n * @param {?} renderer the current renderer.\n * @param {?} renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param {?=} beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n * @return {?}\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n    /** @type {?} */\n    var rootTNode = /** @type {?} */ (viewToWalk[TVIEW].node);\n    /** @type {?} */\n    var projectionNodeIndex = -1;\n    /** @type {?} */\n    var currentView = viewToWalk;\n    /** @type {?} */\n    var tNode = /** @type {?} */ (rootTNode.child);\n    while (tNode) {\n        /** @type {?} */\n        var nextTNode = null;\n        if (tNode.type === 3 /* Element */) {\n            executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), beforeNode);\n            /** @type {?} */\n            var nodeOrContainer = currentView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                // This element has an LContainer, and its comment needs to be handled\n                executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], beforeNode);\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            /** @type {?} */\n            var lContainer = /** @type {?} */ (((currentView))[tNode.index]);\n            executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], beforeNode);\n            if (renderParent)\n                lContainer[RENDER_PARENT] = renderParent;\n            if (lContainer[VIEWS].length) {\n                currentView = lContainer[VIEWS][0];\n                nextTNode = currentView[TVIEW].node;\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainer[NATIVE];\n            }\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            /** @type {?} */\n            var componentView = findComponentView(/** @type {?} */ ((currentView)));\n            /** @type {?} */\n            var componentHost = /** @type {?} */ (componentView[HOST_NODE]);\n            /** @type {?} */\n            var head = (/** @type {?} */ (componentHost.projection))[/** @type {?} */ (tNode.projection)];\n            // Must store both the TNode and the view because this projection node could be nested\n            // deeply inside embedded views, and we need to get back down to this particular nested view.\n            projectionNodeStack[++projectionNodeIndex] = tNode;\n            projectionNodeStack[++projectionNodeIndex] = /** @type {?} */ ((currentView));\n            if (head) {\n                currentView = /** @type {?} */ ((componentView[PARENT]));\n                nextTNode = /** @type {?} */ (currentView[TVIEW].data[head.index]);\n            }\n        }\n        else {\n            // Otherwise, this is a View or an ElementContainer\n            nextTNode = tNode.child;\n        }\n        if (nextTNode === null) {\n            // this last node was projected, we need to get back down to its projection node\n            if (tNode.next === null && (tNode.flags & 8192 /* isProjected */)) {\n                currentView = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n                tNode = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n            }\n            nextTNode = tNode.next;\n            /**\n                   * Find the next node in the TNode tree, taking into account the place where a node is\n                   * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n                   *\n                   * If there is no sibling node, then it goes to the next sibling of the parent node...\n                   * until it reaches rootNode (at which point null is returned).\n                   */\n            while (!nextTNode) {\n                // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                tNode = tNode.parent || currentView[TVIEW].node;\n                if (tNode === null || tNode === rootTNode)\n                    return null;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (tNode.type === 0 /* Container */) {\n                    currentView = /** @type {?} */ ((currentView[PARENT]));\n                    beforeNode = currentView[tNode.index][NATIVE];\n                }\n                if (tNode.type === 2 /* View */ && currentView[NEXT]) {\n                    currentView = /** @type {?} */ (currentView[NEXT]);\n                    nextTNode = currentView[TVIEW].node;\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n            }\n        }\n        tNode = nextTNode;\n    }\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lViewData LViewData for which we want a host element node\n * @return {?} The host node\n */\nexport function findComponentView(lViewData) {\n    /** @type {?} */\n    var rootTNode = lViewData[HOST_NODE];\n    while (rootTNode && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lViewData[PARENT], 'viewData.parent');\n        lViewData = /** @type {?} */ ((lViewData[PARENT]));\n        rootTNode = lViewData[HOST_NODE];\n    }\n    return lViewData;\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} node\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeNodeAction(action, renderer, parent, node, beforeNode) {\n    if (action === 0 /* Insert */) {\n        isProceduralRenderer(/** @type {?} */ ((renderer))) ?\n            (/** @type {?} */ (renderer)).insertBefore(/** @type {?} */ ((parent)), node, /** @type {?} */ (beforeNode)) : /** @type {?} */ ((parent)).insertBefore(node, /** @type {?} */ (beforeNode), true);\n    }\n    else if (action === 1 /* Detach */) {\n        isProceduralRenderer(/** @type {?} */ ((renderer))) ?\n            (/** @type {?} */ (renderer)).removeChild(/** @type {?} */ ((parent)), node) : /** @type {?} */ ((parent)).removeChild(node);\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++; /** @type {?} */\n        (((/** @type {?} */ (renderer)).destroyNode))(node);\n    }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nexport function createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(stringify(value)) :\n        renderer.createTextNode(stringify(value));\n}\n/**\n * @param {?} viewToWalk\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nexport function addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n    /** @type {?} */\n    var renderParent = getContainerRenderParent(/** @type {?} */ (viewToWalk[TVIEW].node), viewToWalk);\n    ngDevMode && assertNodeType(/** @type {?} */ (viewToWalk[TVIEW].node), 2 /* View */);\n    if (renderParent) {\n        /** @type {?} */\n        var renderer = viewToWalk[RENDERER];\n        walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n    }\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nexport function destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    if (rootView[TVIEW].childIndex === -1) {\n        return cleanUpView(rootView);\n    }\n    /** @type {?} */\n    var viewOrContainer = getLViewChild(rootView);\n    while (viewOrContainer) {\n        /** @type {?} */\n        var next = null;\n        if (viewOrContainer.length >= HEADER_OFFSET) {\n            /** @type {?} */\n            var view = /** @type {?} */ (viewOrContainer);\n            if (view[TVIEW].childIndex > -1)\n                next = getLViewChild(view);\n        }\n        else {\n            /** @type {?} */\n            var container = /** @type {?} */ (viewOrContainer);\n            if (container[VIEWS].length)\n                next = container[VIEWS][0];\n        }\n        if (next == null) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (viewOrContainer && !/** @type {?} */ ((viewOrContainer))[NEXT] && viewOrContainer !== rootView) {\n                cleanUpView(viewOrContainer);\n                viewOrContainer = getParentState(viewOrContainer, rootView);\n            }\n            cleanUpView(viewOrContainer || rootView);\n            next = viewOrContainer && /** @type {?} */ ((viewOrContainer))[NEXT];\n        }\n        viewOrContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} lView The view to insert\n * @param {?} lContainer The container into which the view should be inserted\n * @param {?} parentView The new parent of the inserted view\n * @param {?} index The index at which to insert the view\n * @param {?} containerIndex The index of the container node, if dynamic\n * @return {?}\n */\nexport function insertView(lView, lContainer, parentView, index, containerIndex) {\n    /** @type {?} */\n    var views = lContainer[VIEWS];\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1][NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index];\n        views.splice(index, 0, lView);\n    }\n    else {\n        views.push(lView);\n        lView[NEXT] = null;\n    }\n    // Dynamically inserted views need a reference to their parent container's host so it's\n    // possible to jump from a view to its container's next when walking the node tree.\n    if (containerIndex > -1) {\n        lView[CONTAINER_INDEX] = containerIndex;\n        lView[PARENT] = parentView;\n    }\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        /** @type {?} */ ((lView[QUERIES])).insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 8 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} lContainer The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @param {?} detached Whether or not this view is already detached.\n * @return {?}\n */\nexport function detachView(lContainer, removeIndex, detached) {\n    /** @type {?} */\n    var views = lContainer[VIEWS];\n    /** @type {?} */\n    var viewToDetach = views[removeIndex];\n    if (removeIndex > 0) {\n        views[removeIndex - 1][NEXT] = /** @type {?} */ (viewToDetach[NEXT]);\n    }\n    views.splice(removeIndex, 1);\n    if (!detached) {\n        addRemoveViewFromContainer(viewToDetach, false);\n    }\n    if (viewToDetach[QUERIES]) {\n        /** @type {?} */ ((viewToDetach[QUERIES])).removeView();\n    }\n    viewToDetach[CONTAINER_INDEX] = -1;\n    viewToDetach[PARENT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~8 /* Attached */;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} lContainer The container from which to remove a view\n * @param {?} containerHost\n * @param {?} removeIndex The index of the view to remove\n * @return {?}\n */\nexport function removeView(lContainer, containerHost, removeIndex) {\n    /** @type {?} */\n    var view = lContainer[VIEWS][removeIndex];\n    detachView(lContainer, removeIndex, !!containerHost.detached);\n    destroyLView(view);\n}\n/**\n * Gets the child of the given LViewData\n * @param {?} viewData\n * @return {?}\n */\nexport function getLViewChild(viewData) {\n    /** @type {?} */\n    var childIndex = viewData[TVIEW].childIndex;\n    return childIndex === -1 ? null : viewData[childIndex];\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} view The view to be destroyed.\n * @return {?}\n */\nexport function destroyLView(view) {\n    /** @type {?} */\n    var renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n        walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n    }\n    destroyViewTree(view);\n    // Sets the destroyed flag\n    view[FLAGS] |= 32 /* Destroyed */;\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} state The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nexport function getParentState(state, rootView) {\n    /** @type {?} */\n    var tNode;\n    if (state.length >= HEADER_OFFSET && (tNode = /** @type {?} */ (((/** @type {?} */ (state))))[HOST_NODE]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return /** @type {?} */ (getLContainer(/** @type {?} */ (tNode), /** @type {?} */ (state)));\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return state[PARENT] === rootView ? null : state[PARENT];\n    }\n}\n/**\n * Removes all listeners and call all onDestroys in a given view.\n *\n * @param {?} viewOrContainer\n * @return {?}\n */\nfunction cleanUpView(viewOrContainer) {\n    if ((/** @type {?} */ (viewOrContainer)).length >= HEADER_OFFSET) {\n        /** @type {?} */\n        var view = /** @type {?} */ (viewOrContainer);\n        removeListeners(view);\n        executeOnDestroys(view);\n        executePipeOnDestroys(view);\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (view[TVIEW].id === -1 && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            (/** @type {?} */ (view[RENDERER])).destroy();\n        }\n    }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} viewData\n * @return {?}\n */\nfunction removeListeners(viewData) {\n    /** @type {?} */\n    var cleanup = /** @type {?} */ ((viewData[TVIEW].cleanup));\n    if (cleanup != null) {\n        for (var i = 0; i < cleanup.length - 1; i += 2) {\n            if (typeof cleanup[i] === 'string') {\n                /** @type {?} */\n                var native = readElementValue(viewData[cleanup[i + 1]]);\n                /** @type {?} */\n                var listener = /** @type {?} */ ((viewData[CLEANUP]))[cleanup[i + 2]];\n                native.removeEventListener(cleanup[i], listener, cleanup[i + 3]);\n                i += 2;\n            }\n            else if (typeof cleanup[i] === 'number') {\n                /** @type {?} */\n                var cleanupFn = /** @type {?} */ ((viewData[CLEANUP]))[cleanup[i]];\n                cleanupFn();\n            }\n            else {\n                /** @type {?} */\n                var context = /** @type {?} */ ((viewData[CLEANUP]))[cleanup[i + 1]];\n                cleanup[i].call(context);\n            }\n        }\n        viewData[CLEANUP] = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    /** @type {?} */\n    var tView = view[TVIEW];\n    /** @type {?} */\n    var destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        callHooks(view, destroyHooks);\n    }\n}\n/**\n * Calls pipe destroy hooks for this view\n * @param {?} viewData\n * @return {?}\n */\nfunction executePipeOnDestroys(viewData) {\n    /** @type {?} */\n    var pipeDestroyHooks = viewData[TVIEW] && viewData[TVIEW].pipeDestroyHooks;\n    if (pipeDestroyHooks) {\n        callHooks(/** @type {?} */ ((viewData)), pipeDestroyHooks);\n    }\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nexport function getRenderParent(tNode, currentView) {\n    if (canInsertNativeNode(tNode, currentView)) {\n        /** @type {?} */\n        var hostTNode = currentView[HOST_NODE];\n        return tNode.parent == null && /** @type {?} */ ((hostTNode)).type === 2 /* View */ ?\n            getContainerRenderParent(/** @type {?} */ (hostTNode), currentView) : /** @type {?} */ (getParentNative(tNode, currentView));\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction canInsertNativeChildOfElement(tNode) {\n    // If the parent is null, then we are inserting across views. This happens when we\n    // insert a root element of the component view into the component host element and it\n    // should always be eager.\n    if (tNode.parent == null ||\n        // We should also eagerly insert if the parent is a regular, non-component element\n        // since we know that this relationship will never be broken.\n        tNode.parent.type === 3 /* Element */ && !(tNode.parent.flags & 4096 /* isComponent */)) {\n        return true;\n    }\n    // Parent is a Component. Component's content nodes are not inserted immediately\n    // because they will be projected, and so doing insert at this point would be wasteful.\n    // Since the projection would than move it to its final destination.\n    return false;\n}\n/**\n * We might delay insertion of children for a given view if it is disconnected.\n * This might happen for 2 main reasons:\n * - view is not inserted into any container (view was created but not inserted yet)\n * - view is inserted into a container but the container itself is not inserted into the DOM\n * (container might be part of projection or child of a view that is not inserted yet).\n *\n * In other words we can insert children of a given view if this view was inserted into a container\n * and\n * the container itself has its render parent determined.\n * @param {?} viewTNode\n * @param {?} view\n * @return {?}\n */\nfunction canInsertNativeChildOfView(viewTNode, view) {\n    /** @type {?} */\n    var container = /** @type {?} */ ((getLContainer(viewTNode, view)));\n    if (container == null || container[RENDER_PARENT] == null) {\n        // The `View` is not inserted into a `Container` or the parent `Container`\n        // itself is disconnected. So we have to delay.\n        return false;\n    }\n    // The parent `Container` is in inserted state, so we can eagerly insert into\n    // this location.\n    return true;\n}\n/**\n * Returns whether a native element can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is mare for projection but has not been inserted\n *   into destination.\n *\n *\n * @param {?} tNode\n * @param {?} currentView Current LView being processed.\n * @return {?} boolean Whether the child should be inserted now (or delayed until later).\n */\nexport function canInsertNativeNode(tNode, currentView) {\n    /** @type {?} */\n    var currentNode = tNode;\n    /** @type {?} */\n    var parent = tNode.parent;\n    if (tNode.parent && tNode.parent.type === 4 /* ElementContainer */) {\n        currentNode = getHighestElementContainer(tNode);\n        parent = currentNode.parent;\n    }\n    if (parent === null)\n        parent = currentView[HOST_NODE];\n    if (parent && parent.type === 2 /* View */) {\n        return canInsertNativeChildOfView(/** @type {?} */ (parent), currentView);\n    }\n    else {\n        // Parent is a regular element or a component\n        return canInsertNativeChildOfElement(currentNode);\n    }\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?} childEl The child that should be appended\n * @param {?} childTNode The TNode of the child element\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nexport function appendChild(childEl, childTNode, currentView) {\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        var renderer = currentView[RENDERER];\n        /** @type {?} */\n        var parentEl = getParentNative(childTNode, currentView);\n        /** @type {?} */\n        var parentTNode = childTNode.parent || /** @type {?} */ ((currentView[HOST_NODE]));\n        if (parentTNode.type === 2 /* View */) {\n            /** @type {?} */\n            var lContainer = /** @type {?} */ (getLContainer(/** @type {?} */ (parentTNode), currentView));\n            /** @type {?} */\n            var views = lContainer[VIEWS];\n            /** @type {?} */\n            var index = views.indexOf(currentView);\n            nativeInsertBefore(renderer, /** @type {?} */ ((lContainer[RENDER_PARENT])), childEl, getBeforeNodeForView(index, views, lContainer[NATIVE]));\n        }\n        else if (parentTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            var elementContainer = getHighestElementContainer(childTNode);\n            /** @type {?} */\n            var renderParent = /** @type {?} */ ((getRenderParent(elementContainer, currentView)));\n            nativeInsertBefore(renderer, renderParent, childEl, parentEl);\n        }\n        else {\n            isProceduralRenderer(renderer) ? renderer.appendChild(/** @type {?} */ (((parentEl))), childEl) : /** @type {?} */ ((parentEl)).appendChild(childEl);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Gets the top-level ng-container if ng-containers are nested.\n *\n * @param {?} ngContainer The TNode of the starting ng-container\n * @return {?} tNode The TNode of the highest level ng-container\n */\nfunction getHighestElementContainer(ngContainer) {\n    while (ngContainer.parent != null && ngContainer.parent.type === 4 /* ElementContainer */) {\n        ngContainer = ngContainer.parent;\n    }\n    return ngContainer;\n}\n/**\n * @param {?} index\n * @param {?} views\n * @param {?} containerNative\n * @return {?}\n */\nexport function getBeforeNodeForView(index, views, containerNative) {\n    if (index + 1 < views.length) {\n        /** @type {?} */\n        var view = /** @type {?} */ (views[index + 1]);\n        /** @type {?} */\n        var viewTNode = /** @type {?} */ (view[HOST_NODE]);\n        return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n    }\n    else {\n        return containerNative;\n    }\n}\n/**\n * Removes the `child` element from the DOM if not in view and not projected.\n *\n * @param {?} childTNode The TNode of the child to remove\n * @param {?} childEl The child that should be removed\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was removed\n */\nexport function removeChild(childTNode, childEl, currentView) {\n    // We only remove the element if not in View or not projected.\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        var parentNative = /** @type {?} */ (((getParentNative(childTNode, currentView))));\n        /** @type {?} */\n        var renderer = currentView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.removeChild(/** @type {?} */ (parentNative), childEl) : /** @type {?} */ ((parentNative)).removeChild(childEl);\n        return true;\n    }\n    return false;\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} projectedTNode The TNode to be projected\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nexport function appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    /** @type {?} */\n    var native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    /** @type {?} */\n    var renderParent = getRenderParent(tProjectionNode, currentView);\n    /** @type {?} */\n    var nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        nodeOrContainer[RENDER_PARENT] = renderParent;\n        /** @type {?} */\n        var views = nodeOrContainer[VIEWS];\n        for (var i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            var ngContainerChildTNode = /** @type {?} */ (projectedTNode.child);\n            while (ngContainerChildTNode) {\n                appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n                ngContainerChildTNode = ngContainerChildTNode.next;\n            }\n        }\n        if (isLContainer(nodeOrContainer)) {\n            nodeOrContainer[RENDER_PARENT] = renderParent;\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n//# sourceMappingURL=node_manipulation.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { assertDefined, assertNotEqual } from './assert';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/node';\nimport { NG_PROJECT_AS_ATTR_NAME, unusedValueExportToPlacateAjd as unused2 } from './interfaces/projection';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2;\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    /** @type {?} */\n    var nodeClassesLen = nodeClassAttrVal.length;\n    /** @type {?} */\n    var matchIndex = /** @type {?} */ ((nodeClassAttrVal)).indexOf(cssClassToMatch);\n    /** @type {?} */\n    var matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && /** @type {?} */ ((nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && /** @type {?} */ ((nodeClassAttrVal))[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector\n * @return {?} true if node matches the selector.\n */\nexport function isNodeMatchingSelector(tNode, selector) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    /** @type {?} */\n    var mode = 4 /* ELEMENT */;\n    /** @type {?} */\n    var nodeAttrs = /** @type {?} */ ((tNode.attrs));\n    /** @type {?} */\n    var selectOnlyMarkerIdx = nodeAttrs ? nodeAttrs.indexOf(1 /* SelectOnly */) : -1;\n    /** @type {?} */\n    var skipToNextSelector = false;\n    for (var i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        var current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(/** @type {?} */ (current))) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = (/** @type {?} */ (current)) | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && current !== tNode.tagName) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            /** @type {?} */\n            var attrName = mode & 8 /* CLASS */ ? 'class' : current;\n            /** @type {?} */\n            var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            /** @type {?} */\n            var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            if (selectorAttrValue !== '') {\n                /** @type {?} */\n                var nodeAttrValue = void 0;\n                /** @type {?} */\n                var maybeAttrName = nodeAttrs[attrIndexInNode];\n                if (selectOnlyMarkerIdx > -1 && attrIndexInNode > selectOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(maybeAttrName, 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = /** @type {?} */ (nodeAttrs[attrIndexInNode + 1]);\n                }\n                if (mode & 8 /* CLASS */ &&\n                    !isCssClassMatching(/** @type {?} */ (nodeAttrValue), /** @type {?} */ (selectorAttrValue)) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\n/**\n * Examines an attributes definition array from a node to find the index of the\n * attribute with the specified name.\n *\n * NOTE: Will not find namespaced attributes.\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs) {\n    if (attrs === null)\n        return -1;\n    /** @type {?} */\n    var selectOnlyMode = false;\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var maybeAttrName = attrs[i];\n        if (maybeAttrName === name) {\n            return i;\n        }\n        else if (maybeAttrName === 0 /* NamespaceURI */) {\n            // NOTE(benlesh): will not find namespaced attributes. This is by design.\n            i += 4;\n        }\n        else {\n            if (maybeAttrName === 1 /* SelectOnly */) {\n                selectOnlyMode = true;\n            }\n            i += selectOnlyMode ? 1 : 2;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @return {?}\n */\nexport function isNodeMatchingSelectorList(tNode, selector) {\n    for (var i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function getProjectAsAttrValue(tNode) {\n    /** @type {?} */\n    var nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        /** @type {?} */\n        var ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return /** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]);\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n * @param {?} tNode\n * @param {?} selectors\n * @param {?} textSelectors\n * @return {?}\n */\nexport function matchingSelectorIndex(tNode, selectors, textSelectors) {\n    /** @type {?} */\n    var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (var i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null && isNodeMatchingSelectorList(tNode, selectors[i])) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\n//# sourceMappingURL=node_selector_matcher.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getContext } from '../context_discovery';\nimport { ACTIVE_INDEX } from '../interfaces/container';\nimport { FLAGS, HEADER_OFFSET, HOST } from '../interfaces/view';\nimport { getTNode } from '../util';\n/** @type {?} */\nexport var EMPTY_ARR = [];\n/** @type {?} */\nexport var EMPTY_OBJ = {};\n/**\n * @param {?=} element\n * @param {?=} sanitizer\n * @param {?=} initialStylingValues\n * @return {?}\n */\nexport function createEmptyStylingContext(element, sanitizer, initialStylingValues) {\n    return [\n        null,\n        // PlayerContext\n        sanitizer || null,\n        // StyleSanitizer\n        initialStylingValues || [null],\n        0,\n        0,\n        // ClassOffset\n        element || null,\n        null,\n        null\n    ];\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n * @param {?} element\n * @param {?} templateStyleContext\n * @return {?}\n */\nexport function allocStylingContext(element, templateStyleContext) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((templateStyleContext.slice()));\n    context[5 /* ElementPosition */] = element;\n    return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param {?} index Index of the style allocation. See: `elementStyling`.\n * @param {?} viewData The view to search for the styling context\n * @return {?}\n */\nexport function getStylingContext(index, viewData) {\n    /** @type {?} */\n    var storageIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    var slotValue = viewData[storageIndex];\n    /** @type {?} */\n    var wrapper = viewData;\n    while (Array.isArray(slotValue)) {\n        wrapper = slotValue;\n        slotValue = /** @type {?} */ (slotValue[HOST]);\n    }\n    if (isStylingContext(wrapper)) {\n        return /** @type {?} */ (wrapper);\n    }\n    else {\n        /** @type {?} */\n        var stylingTemplate = getTNode(index, viewData).stylingTemplate;\n        if (wrapper !== viewData)\n            storageIndex = HOST;\n        return wrapper[storageIndex] = stylingTemplate ?\n            allocStylingContext(slotValue, stylingTemplate) :\n            createEmptyStylingContext(slotValue);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isStylingContext(value) {\n    // Not an LViewData or an LContainer\n    return typeof value[FLAGS] !== 'number' && typeof value[ACTIVE_INDEX] !== 'number';\n}\n/**\n * @param {?} target\n * @param {?=} context\n * @return {?}\n */\nexport function getOrCreatePlayerContext(target, context) {\n    context = context || /** @type {?} */ ((getContext(target)));\n    if (ngDevMode && !context) {\n        throw new Error('Only elements that exist in an Angular application can be used for player access');\n    }\n    var lViewData = context.lViewData, nodeIndex = context.nodeIndex;\n    /** @type {?} */\n    var stylingContext = getStylingContext(nodeIndex - HEADER_OFFSET, lViewData);\n    return stylingContext[0 /* PlayerContext */] || allocPlayerContext(stylingContext);\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction allocPlayerContext(data) {\n    return data[0 /* PlayerContext */] = [];\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RendererStyleFlags3, isProceduralRenderer } from '../interfaces/renderer';\nimport { EMPTY_ARR, EMPTY_OBJ, createEmptyStylingContext } from './util';\n/**\n * Creates a styling context template where styling information is stored.\n * Any styles that are later referenced using `updateStyleProp` must be\n * passed in within this function. Initial values for those styles are to\n * be declared after all initial style properties are declared (this change in\n * mode between declarations and initial styles is made possible using a special\n * enum value found in `definition.ts`).\n *\n * @param {?=} initialClassDeclarations a list of class declarations and initial class values\n *    that are used later within the styling context.\n *\n *    -> ['foo', 'bar', SPECIAL_ENUM_VAL, 'foo', true]\n *       This implies that `foo` and `bar` will be later styled and that the `foo`\n *       class will be applied to the element as an initial class since it's true\n * @param {?=} initialStyleDeclarations a list of style declarations and initial style values\n *    that are used later within the styling context.\n *\n *    -> ['width', 'height', SPECIAL_ENUM_VAL, 'width', '100px']\n *       This implies that `width` and `height` will be later styled and that the `width`\n *       property has an initial value of `100px`.\n *\n * @param {?=} styleSanitizer\n * @return {?}\n */\nexport function createStylingContextTemplate(initialClassDeclarations, initialStyleDeclarations, styleSanitizer) {\n    /** @type {?} */\n    var initialStylingValues = [null];\n    /** @type {?} */\n    var context = createEmptyStylingContext(null, styleSanitizer, initialStylingValues);\n    /** @type {?} */\n    var stylesLookup = {};\n    /** @type {?} */\n    var classesLookup = {};\n    /** @type {?} */\n    var totalStyleDeclarations = 0;\n    if (initialStyleDeclarations) {\n        /** @type {?} */\n        var hasPassedDeclarations = false;\n        for (var i = 0; i < initialStyleDeclarations.length; i++) {\n            /** @type {?} */\n            var v = /** @type {?} */ (initialStyleDeclarations[i]);\n            // this flag value marks where the declarations end the initial values begin\n            if (v === 1 /* VALUES_MODE */) {\n                hasPassedDeclarations = true;\n            }\n            else {\n                /** @type {?} */\n                var prop = /** @type {?} */ (v);\n                if (hasPassedDeclarations) {\n                    /** @type {?} */\n                    var value = /** @type {?} */ (initialStyleDeclarations[++i]);\n                    initialStylingValues.push(value);\n                    stylesLookup[prop] = initialStylingValues.length - 1;\n                }\n                else {\n                    totalStyleDeclarations++;\n                    stylesLookup[prop] = 0;\n                }\n            }\n        }\n    }\n    // make where the class offsets begin\n    context[4 /* ClassOffsetPosition */] = totalStyleDeclarations;\n    if (initialClassDeclarations) {\n        /** @type {?} */\n        var hasPassedDeclarations = false;\n        for (var i = 0; i < initialClassDeclarations.length; i++) {\n            /** @type {?} */\n            var v = /** @type {?} */ (initialClassDeclarations[i]);\n            // this flag value marks where the declarations end the initial values begin\n            if (v === 1 /* VALUES_MODE */) {\n                hasPassedDeclarations = true;\n            }\n            else {\n                /** @type {?} */\n                var className = /** @type {?} */ (v);\n                if (hasPassedDeclarations) {\n                    /** @type {?} */\n                    var value = /** @type {?} */ (initialClassDeclarations[++i]);\n                    initialStylingValues.push(value);\n                    classesLookup[className] = initialStylingValues.length - 1;\n                }\n                else {\n                    classesLookup[className] = 0;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    var styleProps = Object.keys(stylesLookup);\n    /** @type {?} */\n    var classNames = Object.keys(classesLookup);\n    /** @type {?} */\n    var classNamesIndexStart = styleProps.length;\n    /** @type {?} */\n    var totalProps = styleProps.length + classNames.length;\n    /** @type {?} */\n    var maxLength = totalProps * 3 /* Size */ * 2 + 8 /* SingleStylesStartPosition */;\n    // we need to fill the array from the start so that we can access\n    // both the multi and the single array positions in the same loop block\n    for (var i = 8 /* SingleStylesStartPosition */; i < maxLength; i++) {\n        context.push(null);\n    }\n    /** @type {?} */\n    var singleStart = 8 /* SingleStylesStartPosition */;\n    /** @type {?} */\n    var multiStart = totalProps * 3 /* Size */ + 8 /* SingleStylesStartPosition */;\n    // fill single and multi-level styles\n    for (var i = 0; i < totalProps; i++) {\n        /** @type {?} */\n        var isClassBased_1 = i >= classNamesIndexStart;\n        /** @type {?} */\n        var prop = isClassBased_1 ? classNames[i - classNamesIndexStart] : styleProps[i];\n        /** @type {?} */\n        var indexForInitial = isClassBased_1 ? classesLookup[prop] : stylesLookup[prop];\n        /** @type {?} */\n        var initialValue = initialStylingValues[indexForInitial];\n        /** @type {?} */\n        var indexForMulti = i * 3 /* Size */ + multiStart;\n        /** @type {?} */\n        var indexForSingle = i * 3 /* Size */ + singleStart;\n        /** @type {?} */\n        var initialFlag = prepareInitialFlag(prop, isClassBased_1, styleSanitizer || null);\n        setFlag(context, indexForSingle, pointers(initialFlag, indexForInitial, indexForMulti));\n        setProp(context, indexForSingle, prop);\n        setValue(context, indexForSingle, null);\n        /** @type {?} */\n        var flagForMulti = initialFlag | (initialValue !== null ? 1 /* Dirty */ : 0 /* None */);\n        setFlag(context, indexForMulti, pointers(flagForMulti, indexForInitial, indexForSingle));\n        setProp(context, indexForMulti, prop);\n        setValue(context, indexForMulti, null);\n    }\n    // there is no initial value flag for the master index since it doesn't\n    // reference an initial style value\n    setFlag(context, 3 /* MasterFlagPosition */, pointers(0, 0, multiStart));\n    setContextDirty(context, initialStylingValues.length > 1);\n    return context;\n}\n/**\n * Sets and resolves all `multi` styling on an `StylingContext` so that they can be\n * applied to the element once `renderStyling` is called.\n *\n * All missing styles/class (any values that are not provided in the new `styles`\n * or `classes` params) will resolve to `null` within their respective positions\n * in the context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style values.\n * @param {?} classes The key/value map of CSS class names that will be used for the update.\n * @param {?=} styles The key/value map of CSS styles that will be used for the update.\n * @return {?}\n */\nexport function updateStylingMap(context, classes, styles) {\n    styles = styles || null;\n    /** @type {?} */\n    var ignoreAllClassUpdates = classes === context[6 /* PreviousMultiClassValue */];\n    /** @type {?} */\n    var ignoreAllStyleUpdates = styles === context[7 /* PreviousMultiStyleValue */];\n    if (ignoreAllClassUpdates && ignoreAllStyleUpdates)\n        return;\n    /** @type {?} */\n    var classNames = EMPTY_ARR;\n    /** @type {?} */\n    var applyAllClasses = false;\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (!ignoreAllClassUpdates) {\n        context[6 /* PreviousMultiClassValue */] = classes;\n        if (typeof classes == 'string') {\n            classNames = classes.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n        else {\n            classNames = classes ? Object.keys(classes) : EMPTY_ARR;\n        }\n    }\n    classes = /** @type {?} */ ((classes || EMPTY_OBJ));\n    if (!ignoreAllStyleUpdates) {\n        context[7 /* PreviousMultiStyleValue */] = styles;\n    }\n    /** @type {?} */\n    var styleProps = styles ? Object.keys(styles) : EMPTY_ARR;\n    styles = styles || EMPTY_OBJ;\n    /** @type {?} */\n    var classesStartIndex = styleProps.length;\n    /** @type {?} */\n    var multiStartIndex = getMultiStartIndex(context);\n    /** @type {?} */\n    var dirty = false;\n    /** @type {?} */\n    var ctxIndex = multiStartIndex;\n    /** @type {?} */\n    var propIndex = 0;\n    /** @type {?} */\n    var propLimit = styleProps.length + classNames.length;\n    // the main loop here will try and figure out how the shape of the provided\n    // styles differ with respect to the context. Later if the context/styles/classes\n    // are off-balance then they will be dealt in another loop after this one\n    while (ctxIndex < context.length && propIndex < propLimit) {\n        /** @type {?} */\n        var isClassBased_2 = propIndex >= classesStartIndex;\n        /** @type {?} */\n        var processValue = (!isClassBased_2 && !ignoreAllStyleUpdates) || (isClassBased_2 && !ignoreAllClassUpdates);\n        // when there is a cache-hit for a string-based class then we should\n        // avoid doing any work diffing any of the changes\n        if (processValue) {\n            /** @type {?} */\n            var adjustedPropIndex = isClassBased_2 ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            var newProp = isClassBased_2 ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            var newValue = isClassBased_2 ? (applyAllClasses ? true : classes[newProp]) : styles[newProp];\n            /** @type {?} */\n            var prop = getProp(context, ctxIndex);\n            if (prop === newProp) {\n                /** @type {?} */\n                var value = getValue(context, ctxIndex);\n                /** @type {?} */\n                var flag = getPointers(context, ctxIndex);\n                if (hasValueChanged(flag, value, newValue)) {\n                    setValue(context, ctxIndex, newValue);\n                    /** @type {?} */\n                    var initialValue = getInitialValue(context, flag);\n                    // there is no point in setting this to dirty if the previously\n                    // rendered value was being referenced by the initial style (or null)\n                    if (hasValueChanged(flag, initialValue, newValue)) {\n                        setDirty(context, ctxIndex, true);\n                        dirty = true;\n                    }\n                }\n            }\n            else {\n                /** @type {?} */\n                var indexOfEntry = findEntryPositionByProp(context, newProp, ctxIndex);\n                if (indexOfEntry > 0) {\n                    /** @type {?} */\n                    var valueToCompare = getValue(context, indexOfEntry);\n                    /** @type {?} */\n                    var flagToCompare = getPointers(context, indexOfEntry);\n                    swapMultiContextEntries(context, ctxIndex, indexOfEntry);\n                    if (hasValueChanged(flagToCompare, valueToCompare, newValue)) {\n                        /** @type {?} */\n                        var initialValue = getInitialValue(context, flagToCompare);\n                        setValue(context, ctxIndex, newValue);\n                        if (hasValueChanged(flagToCompare, initialValue, newValue)) {\n                            setDirty(context, ctxIndex, true);\n                            dirty = true;\n                        }\n                    }\n                }\n                else {\n                    /** @type {?} */\n                    var newFlag = prepareInitialFlag(newProp, isClassBased_2, getStyleSanitizer(context));\n                    insertNewMultiProperty(context, ctxIndex, isClassBased_2, newProp, newFlag, newValue);\n                    dirty = true;\n                }\n            }\n        }\n        ctxIndex += 3 /* Size */;\n        propIndex++;\n    }\n    // this means that there are left-over values in the context that\n    // were not included in the provided styles/classes and in this\n    // case the  goal is to \"remove\" them from the context (by nullifying)\n    while (ctxIndex < context.length) {\n        /** @type {?} */\n        var flag = getPointers(context, ctxIndex);\n        /** @type {?} */\n        var isClassBased_3 = (flag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        var processValue = (!isClassBased_3 && !ignoreAllStyleUpdates) || (isClassBased_3 && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            var value = getValue(context, ctxIndex);\n            /** @type {?} */\n            var doRemoveValue = valueExists(value, isClassBased_3);\n            if (doRemoveValue) {\n                setDirty(context, ctxIndex, true);\n                setValue(context, ctxIndex, null);\n                dirty = true;\n            }\n        }\n        ctxIndex += 3 /* Size */;\n    }\n    /** @type {?} */\n    var sanitizer = getStyleSanitizer(context);\n    while (propIndex < propLimit) {\n        /** @type {?} */\n        var isClassBased_4 = propIndex >= classesStartIndex;\n        /** @type {?} */\n        var processValue = (!isClassBased_4 && !ignoreAllStyleUpdates) || (isClassBased_4 && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            var adjustedPropIndex = isClassBased_4 ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            var prop = isClassBased_4 ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            var value = isClassBased_4 ? (applyAllClasses ? true : classes[prop]) : styles[prop];\n            /** @type {?} */\n            var flag = prepareInitialFlag(prop, isClassBased_4, sanitizer) | 1 /* Dirty */;\n            context.push(flag, prop, value);\n            dirty = true;\n        }\n        propIndex++;\n    }\n    if (dirty) {\n        setContextDirty(context, true);\n    }\n}\n/**\n * Sets and resolves a single styling property/value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style value.\n * @param {?} index The index of the property which is being updated.\n * @param {?} value The CSS style value that will be assigned\n * @return {?}\n */\nexport function updateStyleProp(context, index, value) {\n    /** @type {?} */\n    var singleIndex = 8 /* SingleStylesStartPosition */ + index * 3 /* Size */;\n    /** @type {?} */\n    var currValue = getValue(context, singleIndex);\n    /** @type {?} */\n    var currFlag = getPointers(context, singleIndex);\n    // didn't change ... nothing to make a note of\n    if (hasValueChanged(currFlag, currValue, value)) {\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value);\n        /** @type {?} */\n        var indexForMulti = getMultiOrSingleIndex(currFlag);\n        /** @type {?} */\n        var valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value)) {\n            /** @type {?} */\n            var multiDirty = false;\n            /** @type {?} */\n            var singleDirty = true;\n            /** @type {?} */\n            var isClassBased_5 = (currFlag & 2 /* Class */) === 2 /* Class */;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value, isClassBased_5) && valueExists(valueForMulti, isClassBased_5)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setContextDirty(context, true);\n        }\n    }\n}\n/**\n * This method will toggle the referenced CSS class (by the provided index)\n * within the given context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided class value.\n * @param {?} index The index of the CSS class which is being updated.\n * @param {?} addOrRemove Whether or not to add or remove the CSS class\n * @return {?}\n */\nexport function updateClassProp(context, index, addOrRemove) {\n    /** @type {?} */\n    var adjustedIndex = index + context[4 /* ClassOffsetPosition */];\n    updateStyleProp(context, adjustedIndex, addOrRemove);\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param {?} context The styling context that will be used to determine\n *      what styles will be rendered\n * @param {?} renderer the renderer that will be used to apply the styling\n * @param {?=} styleStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} classStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @return {?}\n */\nexport function renderStyling(context, renderer, styleStore, classStore) {\n    if (isContextDirty(context)) {\n        /** @type {?} */\n        var native = /** @type {?} */ ((context[5 /* ElementPosition */]));\n        /** @type {?} */\n        var multiStartIndex = getMultiStartIndex(context);\n        /** @type {?} */\n        var styleSanitizer = getStyleSanitizer(context);\n        for (var i = 8 /* SingleStylesStartPosition */; i < context.length; i += 3 /* Size */) {\n            // there is no point in rendering styles that have not changed on screen\n            if (isDirty(context, i)) {\n                /** @type {?} */\n                var prop = getProp(context, i);\n                /** @type {?} */\n                var value = getValue(context, i);\n                /** @type {?} */\n                var flag = getPointers(context, i);\n                /** @type {?} */\n                var isClassBased_6 = flag & 2 /* Class */ ? true : false;\n                /** @type {?} */\n                var isInSingleRegion = i < multiStartIndex;\n                /** @type {?} */\n                var valueToApply = value;\n                // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                // this check implies that a single value was removed and we\n                // should now defer to a multi value and use that (if set).\n                if (isInSingleRegion && !valueExists(valueToApply, isClassBased_6)) {\n                    /** @type {?} */\n                    var multiIndex = getMultiOrSingleIndex(flag);\n                    valueToApply = getValue(context, multiIndex);\n                }\n                // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                // the initial value will always be a string or null,\n                // therefore we can safely adopt it incase there's nothing else\n                // note that this should always be a falsy check since `false` is used\n                // for both class and style comparisons (styles can't be false and false\n                // classes are turned off and should therefore defer to their initial values)\n                if (!valueExists(valueToApply, isClassBased_6)) {\n                    valueToApply = getInitialValue(context, flag);\n                }\n                if (isClassBased_6) {\n                    setClass(native, prop, valueToApply ? true : false, renderer, classStore);\n                }\n                else {\n                    /** @type {?} */\n                    var sanitizer = (flag & 4 /* Sanitize */) ? styleSanitizer : null;\n                    setStyle(native, prop, /** @type {?} */ (valueToApply), renderer, sanitizer, styleStore);\n                }\n                setDirty(context, i, false);\n            }\n        }\n        setContextDirty(context, false);\n    }\n}\n/**\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} prop the CSS style property that will be rendered\n * @param {?} value the CSS style value that will be rendered\n * @param {?} renderer\n * @param {?} sanitizer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @return {?}\n */\nfunction setStyle(native, prop, value, renderer, sanitizer, store) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store) {\n        store[prop] = value;\n    }\n    else if (value) {\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native['style'].setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native['style'].removeProperty(prop);\n    }\n}\n/**\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} className\n * @param {?} add\n * @param {?} renderer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @return {?}\n */\nfunction setClass(native, className, add, renderer, store) {\n    if (store) {\n        store[className] = add;\n    }\n    else if (add) {\n        ngDevMode && ngDevMode.rendererAddClass++;\n        isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n            native['classList'].add(className);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveClass++;\n        isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n            native['classList'].remove(className);\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setDirty(context, index, isDirtyYes) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        (/** @type {?} */ (context[adjustedIndex])) |= 1 /* Dirty */;\n    }\n    else {\n        (/** @type {?} */ (context[adjustedIndex])) &= ~1 /* Dirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isDirty(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 1 /* Dirty */) == 1 /* Dirty */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isClassBased(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 2 /* Class */) == 2 /* Class */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizable(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\n/**\n * @param {?} configFlag\n * @param {?} staticIndex\n * @param {?} dynamicIndex\n * @return {?}\n */\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 7 /* BitMask */) | (staticIndex << 3 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 3 /* BitCountSize */));\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialValue(context, flag) {\n    /** @type {?} */\n    var index = getInitialIndex(flag);\n    return /** @type {?} */ (context[2 /* InitialStylesPosition */][index]);\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialIndex(flag) {\n    return (flag >> 3 /* BitCountSize */) & 16383 /* BitMask */;\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getMultiOrSingleIndex(flag) {\n    /** @type {?} */\n    var index = (flag >> (14 /* BitCountSize */ + 3 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 8 /* SingleStylesStartPosition */ ? index : -1;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStartIndex(context) {\n    return /** @type {?} */ (getMultiOrSingleIndex(context[3 /* MasterFlagPosition */]));\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getStyleSanitizer(context) {\n    return context[1 /* StyleSanitizerPosition */];\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @return {?}\n */\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} flag\n * @return {?}\n */\nfunction setFlag(context, index, flag) {\n    /** @type {?} */\n    var adjustedIndex = index === 3 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPointers(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index === 3 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return /** @type {?} */ (context[adjustedIndex]);\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getValue(context, index) {\n    return /** @type {?} */ (context[index + 2 /* ValueOffset */]);\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getProp(context, index) {\n    return /** @type {?} */ (context[index + 1 /* PropertyOffset */]);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nexport function isContextDirty(context) {\n    return isDirty(context, 3 /* MasterFlagPosition */);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nexport function setContextDirty(context, isDirtyYes) {\n    setDirty(context, 3 /* MasterFlagPosition */, isDirtyYes);\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?=} startIndex\n * @return {?}\n */\nfunction findEntryPositionByProp(context, prop, startIndex) {\n    for (var i = (startIndex || 0) + 1 /* PropertyOffset */; i < context.length; i += 3 /* Size */) {\n        /** @type {?} */\n        var thisProp = context[i];\n        if (thisProp == prop) {\n            return i - 1 /* PropertyOffset */;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} context\n * @param {?} indexA\n * @param {?} indexB\n * @return {?}\n */\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    /** @type {?} */\n    var tmpValue = getValue(context, indexA);\n    /** @type {?} */\n    var tmpProp = getProp(context, indexA);\n    /** @type {?} */\n    var tmpFlag = getPointers(context, indexA);\n    /** @type {?} */\n    var flagA = tmpFlag;\n    /** @type {?} */\n    var flagB = getPointers(context, indexB);\n    /** @type {?} */\n    var singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        /** @type {?} */\n        var _flag = getPointers(context, singleIndexA);\n        /** @type {?} */\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    /** @type {?} */\n    var singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        /** @type {?} */\n        var _flag = getPointers(context, singleIndexB);\n        /** @type {?} */\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n}\n/**\n * @param {?} context\n * @param {?} indexStartPosition\n * @return {?}\n */\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (var i = indexStartPosition; i < context.length; i += 3 /* Size */) {\n        /** @type {?} */\n        var multiFlag = getPointers(context, i);\n        /** @type {?} */\n        var singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            /** @type {?} */\n            var singleFlag = getPointers(context, singleIndex);\n            /** @type {?} */\n            var initialIndexForSingle = getInitialIndex(singleFlag);\n            /** @type {?} */\n            var flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBased(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            /** @type {?} */\n            var updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} classBased\n * @param {?} name\n * @param {?} flag\n * @param {?} value\n * @return {?}\n */\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value) {\n    /** @type {?} */\n    var doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 3 /* Size */);\n    }\n}\n/**\n * @param {?} value\n * @param {?=} isClassBased\n * @return {?}\n */\nfunction valueExists(value, isClassBased) {\n    if (isClassBased) {\n        return value ? true : false;\n    }\n    return value !== null;\n}\n/**\n * @param {?} name\n * @param {?} isClassBased\n * @param {?=} sanitizer\n * @return {?}\n */\nfunction prepareInitialFlag(name, isClassBased, sanitizer) {\n    if (isClassBased) {\n        return 2 /* Class */;\n    }\n    else if (sanitizer && sanitizer(name)) {\n        return 4 /* Sanitize */;\n    }\n    return 0 /* None */;\n}\n/**\n * @param {?} flag\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(flag, a, b) {\n    /** @type {?} */\n    var isClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    var hasValues = a && b;\n    /** @type {?} */\n    var usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return (/** @type {?} */ (a)).toString() !== (/** @type {?} */ (b)).toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\n//# sourceMappingURL=class_and_style_bindings.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { assertDefined, assertEqual, assertLessThan, assertNotEqual } from './assert';\nimport { attachPatchData, getComponentViewByInstance } from './context_discovery';\nimport { throwCyclicDependencyError, throwErrorIfNoChangesMode, throwMultipleComponentError } from './errors';\nimport { executeHooks, executeInitHooks, queueInitHooks, queueLifecycleHooks } from './hooks';\nimport { ACTIVE_INDEX, VIEWS } from './interfaces/container';\nimport { INJECTOR_SIZE } from './interfaces/injector';\nimport { NG_PROJECT_AS_ATTR_NAME } from './interfaces/projection';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { BINDING_INDEX, CLEANUP, CONTAINER_INDEX, CONTENT_QUERIES, CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HOST_NODE, INJECTOR, NEXT, PARENT, QUERIES, RENDERER, SANITIZER, TAIL, TVIEW } from './interfaces/view';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { appendChild, appendProjectedNode, createTextNode, findComponentView, getLViewChild, getRenderParent, insertView, removeView } from './node_manipulation';\nimport { isNodeMatchingSelectorList, matchingSelectorIndex } from './node_selector_matcher';\nimport { createStylingContextTemplate, renderStyling as renderElementStyles, updateClassProp as updateElementClassProp, updateStyleProp as updateElementStyleProp, updateStylingMap } from './styling/class_and_style_bindings';\nimport { getStylingContext } from './styling/util';\nimport { assertDataInRangeInternal, getComponentViewByIndex, getNativeByIndex, getNativeByTNode, getRootView, getTNode, isComponent, isContentQueryHost, isDifferent, loadInternal, readPatchedLViewData, stringify } from './util';\n/** *\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n  @type {?} */\nvar _CLEAN_PROMISE = Promise.resolve(null);\n/** @typedef {?} */\nvar SanitizerFn;\nexport { SanitizerFn };\n/** *\n * Token set in currentMatches while dependencies are being resolved.\n *\n * If we visit a directive that has a value set to CIRCULAR, we know we've\n * already seen it, and thus have a circular dependency.\n  @type {?} */\nexport var CIRCULAR = '__CIRCULAR__';\n/** *\n * This property gets set before entering a template.\n *\n * This renderer can be one of two varieties of Renderer3:\n *\n * - ObjectedOrientedRenderer3\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload\n * size).\n *\n * - ProceduralRenderer3\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the facade\n * that enables element manipulation. This also facilitates backwards compatibility with\n * Renderer2.\n  @type {?} */\nvar renderer;\n/**\n * @return {?}\n */\nexport function getRenderer() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return renderer;\n}\n/** @type {?} */\nvar rendererFactory;\n/**\n * @return {?}\n */\nexport function getRendererFactory() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return rendererFactory;\n}\n/**\n * @return {?}\n */\nexport function getCurrentSanitizer() {\n    return viewData && viewData[SANITIZER];\n}\n/** *\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LViewData` to only those elements.\n  @type {?} */\nvar elementDepthCount;\n/** *\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n  @type {?} */\nvar bindingsEnabled;\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n * @return {?}\n */\nexport function getCurrentView() {\n    return /** @type {?} */ ((viewData));\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n * @return {?}\n */\nexport function restoreView(viewToRestore) {\n    contextViewData = /** @type {?} */ ((viewToRestore));\n}\n/** *\n * Used to set the parent property when nodes are created and track query results.\n  @type {?} */\nvar previousOrParentTNode;\n/**\n * @return {?}\n */\nexport function getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\n/**\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nexport function setEnvironment(tNode, view) {\n    previousOrParentTNode = tNode;\n    viewData = view;\n}\n/** *\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n  @type {?} */\nvar isParent;\n/** @type {?} */\nvar tView;\n/** @type {?} */\nvar currentQueries;\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n * @param {?} QueryType\n * @return {?}\n */\nexport function getOrCreateCurrentQueries(QueryType) {\n    // if this is the first content query on a node, any existing LQueries needs to be cloned\n    // in subsequent template passes, the cloning occurs before directive instantiation.\n    if (previousOrParentTNode && previousOrParentTNode !== viewData[HOST_NODE] &&\n        !isContentQueryHost(previousOrParentTNode)) {\n        currentQueries && (currentQueries = currentQueries.clone());\n        previousOrParentTNode.flags |= 16384 /* hasContentQuery */;\n    }\n    return currentQueries || (currentQueries = new QueryType(null, null, null));\n}\n/** *\n * This property gets set before entering a template.\n  @type {?} */\nvar creationMode;\n/**\n * @return {?}\n */\nexport function getCreationMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return creationMode;\n}\n/** *\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n  @type {?} */\nvar viewData;\n/**\n * Internal function that returns the current LViewData instance.\n *\n * The getCurrentView() instruction should be used for anything public.\n * @return {?}\n */\nexport function _getViewData() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return viewData;\n}\n/** *\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n  @type {?} */\nvar contextViewData = /** @type {?} */ ((null));\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n/** *\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n  @type {?} */\nvar checkNoChangesMode = false;\n/** *\n * Whether or not this is the first time the current view has been processed.\n  @type {?} */\nvar firstTemplatePass = true;\n/** *\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n  @type {?} */\nvar bindingRootIndex = -1;\n/**\n * @return {?}\n */\nexport function getBindingRoot() {\n    return bindingRootIndex;\n}\n/** @enum {number} */\nvar BindingDirection = {\n    Input: 0,\n    Output: 1,\n};\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} hostTNode\n * @return {?} the previous state;\n */\nexport function enterView(newView, hostTNode) {\n    /** @type {?} */\n    var oldView = viewData;\n    tView = newView && newView[TVIEW];\n    creationMode = newView && (newView[FLAGS] & 1 /* CreationMode */) === 1 /* CreationMode */;\n    firstTemplatePass = newView && tView.firstTemplatePass;\n    bindingRootIndex = newView && tView.bindingStartIndex;\n    renderer = newView && newView[RENDERER];\n    previousOrParentTNode = /** @type {?} */ ((hostTNode));\n    isParent = true;\n    viewData = contextViewData = newView;\n    oldView && (oldView[QUERIES] = currentQueries);\n    currentQueries = newView && newView[QUERIES];\n    return oldView;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @param {?=} creationOnly An optional boolean to indicate that the view was processed in creation mode\n * only, i.e. the first update will be done later. Only possible for dynamically created views.\n * @return {?}\n */\nexport function leaveView(newView, creationOnly) {\n    if (!creationOnly) {\n        if (!checkNoChangesMode) {\n            executeHooks(viewData, tView.viewHooks, tView.viewCheckHooks, creationMode);\n        }\n        // Views are clean and in update mode after being checked, so these bits are cleared\n        viewData[FLAGS] &= ~(1 /* CreationMode */ | 4 /* Dirty */);\n    }\n    viewData[FLAGS] |= 16 /* RunInit */;\n    viewData[BINDING_INDEX] = tView.bindingStartIndex;\n    enterView(newView, null);\n}\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @return {?}\n */\nfunction refreshDescendantViews() {\n    setHostBindings();\n    /** @type {?} */\n    var parentFirstTemplatePass = firstTemplatePass;\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = firstTemplatePass = false;\n    if (!checkNoChangesMode) {\n        executeInitHooks(viewData, tView, creationMode);\n    }\n    refreshDynamicEmbeddedViews(viewData);\n    // Content query results must be refreshed before content hooks are called.\n    refreshContentQueries(tView);\n    if (!checkNoChangesMode) {\n        executeHooks(viewData, tView.contentHooks, tView.contentCheckHooks, creationMode);\n    }\n    refreshChildComponents(tView.components, parentFirstTemplatePass);\n}\n/**\n * Sets the host bindings for the current view.\n * @return {?}\n */\nexport function setHostBindings() {\n    if (tView.expandoInstructions) {\n        bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n        /** @type {?} */\n        var currentDirectiveIndex = -1;\n        /** @type {?} */\n        var currentElementIndex = -1;\n        for (var i = 0; i < tView.expandoInstructions.length; i++) {\n            /** @type {?} */\n            var instruction = tView.expandoInstructions[i];\n            if (typeof instruction === 'number') {\n                if (instruction <= 0) {\n                    // Negative numbers mean that we are starting new EXPANDO block and need to update\n                    // the current element and directive index.\n                    currentElementIndex = -instruction;\n                    if (typeof viewData[bindingRootIndex] === 'number') {\n                        // We've hit an injector. It may or may not exist depending on whether\n                        // there is a public directive on this node.\n                        bindingRootIndex += INJECTOR_SIZE;\n                    }\n                    currentDirectiveIndex = bindingRootIndex;\n                }\n                else {\n                    // This is either the injector size (so the binding root can skip over directives\n                    // and get to the first set of host bindings on this node) or the host var count\n                    // (to get to the next set of host bindings on this node).\n                    bindingRootIndex += instruction;\n                }\n            }\n            else {\n                // If it's not a number, it's a host binding function that needs to be executed.\n                viewData[BINDING_INDEX] = bindingRootIndex;\n                // We must subtract the header offset because the load() instruction\n                // expects a raw, unadjusted index.\n                instruction(currentDirectiveIndex - HEADER_OFFSET, currentElementIndex);\n                currentDirectiveIndex++;\n            }\n        }\n    }\n}\n/**\n * Refreshes content queries for all directives in the given view.\n * @param {?} tView\n * @return {?}\n */\nfunction refreshContentQueries(tView) {\n    if (tView.contentQueries != null) {\n        for (var i = 0; i < tView.contentQueries.length; i += 2) {\n            /** @type {?} */\n            var directiveDefIdx = tView.contentQueries[i];\n            /** @type {?} */\n            var directiveDef = /** @type {?} */ (tView.data[directiveDefIdx]); /** @type {?} */\n            ((directiveDef.contentQueriesRefresh))(directiveDefIdx - HEADER_OFFSET, tView.contentQueries[i + 1]);\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @param {?} parentFirstTemplatePass\n * @return {?}\n */\nfunction refreshChildComponents(components, parentFirstTemplatePass) {\n    if (components != null) {\n        for (var i = 0; i < components.length; i++) {\n            componentRefresh(components[i], parentFirstTemplatePass);\n        }\n    }\n}\n/**\n * @return {?}\n */\nexport function executeInitAndContentHooks() {\n    if (!checkNoChangesMode) {\n        executeInitHooks(viewData, tView, creationMode);\n        executeHooks(viewData, tView.contentHooks, tView.contentCheckHooks, creationMode);\n    }\n}\n/**\n * @template T\n * @param {?} renderer\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?=} sanitizer\n * @return {?}\n */\nexport function createLViewData(renderer, tView, context, flags, sanitizer) {\n    /** @type {?} */\n    var instance = /** @type {?} */ (tView.blueprint.slice());\n    instance[FLAGS] = flags | 1 /* CreationMode */ | 8 /* Attached */ | 16 /* RunInit */;\n    instance[PARENT] = instance[DECLARATION_VIEW] = viewData;\n    instance[CONTEXT] = context;\n    instance[INJECTOR] = viewData ? viewData[INJECTOR] : null;\n    instance[RENDERER] = renderer;\n    instance[SANITIZER] = sanitizer || null;\n    return instance;\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @param {?} attrs\n * @return {?}\n */\nexport function createNodeAtIndex(index, type, native, name, attrs) {\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertLessThan(adjustedIndex, viewData.length, \"Slot should have been initialized with null\");\n    viewData[adjustedIndex] = native;\n    /** @type {?} */\n    var tNode = /** @type {?} */ (tView.data[adjustedIndex]);\n    if (tNode == null) {\n        tNode = tView.data[adjustedIndex] = createTNode(type, adjustedIndex, name, attrs, null);\n        // Now link ourselves into the tree.\n        if (previousOrParentTNode) {\n            if (isParent && previousOrParentTNode.child == null &&\n                (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n                // We are in the same view, which means we are adding content node to the parent view.\n                previousOrParentTNode.child = tNode;\n            }\n            else if (!isParent) {\n                previousOrParentTNode.next = tNode;\n            }\n        }\n    }\n    if (tView.firstChild == null && type === 3 /* Element */) {\n        tView.firstChild = tNode;\n    }\n    previousOrParentTNode = tNode;\n    isParent = true;\n    return /** @type {?} */ (tNode);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nexport function createViewNode(index, view) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    if (view[TVIEW].node == null) {\n        view[TVIEW].node = /** @type {?} */ (createTNode(2 /* View */, index, null, null, null));\n    }\n    isParent = true;\n    return previousOrParentTNode = view[HOST_NODE] = /** @type {?} */ (view[TVIEW].node);\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n * @param {?} view\n * @return {?}\n */\nexport function adjustBlueprintForNewNode(view) {\n    /** @type {?} */\n    var tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        tView.expandoStartIndex++;\n        tView.blueprint.push(null);\n        view.push(null);\n    }\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nexport function resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = /** @type {?} */ ((null));\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n}\n/**\n *\n * @template T\n * @param {?} hostNode Existing node to render into.\n * @param {?} templateFn Template function with the instructions.\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} context to pass into the template.\n * @param {?} providedRendererFactory renderer factory to use\n * @param {?} hostView\n * @param {?=} directives Directive defs that should be used for matching\n * @param {?=} pipes Pipe defs that should be used for matching\n * @param {?=} sanitizer\n * @return {?}\n */\nexport function renderTemplate(hostNode, templateFn, consts, vars, context, providedRendererFactory, hostView, directives, pipes, sanitizer) {\n    if (hostView == null) {\n        resetComponentState();\n        rendererFactory = providedRendererFactory;\n        renderer = providedRendererFactory.createRenderer(null, null);\n        // We need to create a root view so it's possible to look up the host element through its index\n        tView = createTView(-1, null, 1, 0, null, null, null);\n        viewData = createLViewData(renderer, tView, {}, 2 /* CheckAlways */ | 64 /* IsRoot */);\n        /** @type {?} */\n        var componentTView = getOrCreateTView(templateFn, consts, vars, directives || null, pipes || null, null);\n        hostView =\n            createLViewData(renderer, componentTView, context, 2 /* CheckAlways */, sanitizer);\n        hostView[HOST_NODE] = createNodeAtIndex(0, 3 /* Element */, hostNode, null, null);\n    }\n    renderComponentOrTemplate(hostView, context, templateFn);\n    return hostView;\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} renderer\n * @param {?} queries\n * @param {?} injectorIndex\n * @return {?}\n */\nexport function createEmbeddedViewAndNode(tView, context, declarationView, renderer, queries, injectorIndex) {\n    /** @type {?} */\n    var _isParent = isParent;\n    /** @type {?} */\n    var _previousOrParentTNode = previousOrParentTNode;\n    isParent = true;\n    previousOrParentTNode = /** @type {?} */ ((null));\n    /** @type {?} */\n    var lView = createLViewData(renderer, tView, context, 2 /* CheckAlways */, getCurrentSanitizer());\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    createViewNode(-1, lView);\n    if (tView.firstTemplatePass) {\n        /** @type {?} */ ((tView.node)).injectorIndex = injectorIndex;\n    }\n    isParent = _isParent;\n    previousOrParentTNode = _previousOrParentTNode;\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewToRender\n * @param {?} tView\n * @param {?} context\n * @param {?} rf\n * @return {?}\n */\nexport function renderEmbeddedTemplate(viewToRender, tView, context, rf) {\n    /** @type {?} */\n    var _isParent = isParent;\n    /** @type {?} */\n    var _previousOrParentTNode = previousOrParentTNode;\n    /** @type {?} */\n    var oldView;\n    if (viewToRender[FLAGS] & 64 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(/** @type {?} */ (viewToRender[CONTEXT]));\n    }\n    else {\n        try {\n            isParent = true;\n            previousOrParentTNode = /** @type {?} */ ((null));\n            oldView = enterView(viewToRender, viewToRender[HOST_NODE]);\n            namespaceHTML(); /** @type {?} */\n            ((tView.template))(rf, context);\n            if (rf & 2 /* Update */) {\n                refreshDescendantViews();\n            }\n            else {\n                // This must be set to false immediately after the first creation run because in an\n                // ngFor loop, all the views will be created together before update mode runs and turns\n                // off firstTemplatePass. If we don't set it here, instances will perform directive\n                // matching, etc again and again.\n                viewToRender[TVIEW].firstTemplatePass = firstTemplatePass = false;\n            }\n        }\n        finally {\n            /** @type {?} */\n            var isCreationOnly = (rf & 1 /* Create */) === 1 /* Create */;\n            leaveView(/** @type {?} */ ((oldView)), isCreationOnly);\n            isParent = _isParent;\n            previousOrParentTNode = _previousOrParentTNode;\n        }\n    }\n}\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n */\nexport function nextContext(level) {\n    if (level === void 0) { level = 1; }\n    contextViewData = walkUpViews(level, /** @type {?} */ ((contextViewData)));\n    return /** @type {?} */ (contextViewData[CONTEXT]);\n}\n/**\n * @template T\n * @param {?} hostView\n * @param {?} componentOrContext\n * @param {?=} templateFn\n * @return {?}\n */\nexport function renderComponentOrTemplate(hostView, componentOrContext, templateFn) {\n    /** @type {?} */\n    var oldView = enterView(hostView, hostView[HOST_NODE]);\n    try {\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (templateFn) {\n            namespaceHTML();\n            templateFn(getRenderFlags(hostView), /** @type {?} */ ((componentOrContext)));\n            refreshDescendantViews();\n        }\n        else {\n            executeInitAndContentHooks();\n            // Element was stored at 0 in data and directive was stored at 0 in directives\n            // in renderComponent()\n            setHostBindings();\n            componentRefresh(HEADER_OFFSET, false);\n        }\n    }\n    finally {\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. By default, the update block is run with the\n * creation block when the view is in creation mode. Otherwise, the update block is run\n * alone.\n *\n * Dynamically created views do NOT use this configuration (update block and create block are\n * always run separately).\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return view[FLAGS] & 1 /* CreationMode */ ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/** @type {?} */\nvar _currentNamespace = null;\n/**\n * @return {?}\n */\nexport function namespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg/';\n}\n/**\n * @return {?}\n */\nexport function namespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * @return {?}\n */\nexport function namespaceHTML() {\n    _currentNamespace = null;\n}\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nexport function element(index, name, attrs, localRefs) {\n    elementStart(index, name, attrs, localRefs);\n    elementEnd();\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param {?} index Index of the element in the LViewData array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n * @return {?}\n */\nexport function elementContainerStart(index, attrs, localRefs) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    var native = renderer.createComment(ngDevMode ? 'ng-container' : '');\n    ngDevMode && assertDataInRange(index - 1);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 4 /* ElementContainer */, native, null, attrs || null);\n    appendChild(native, tNode, viewData);\n    createDirectivesAndLocals(localRefs);\n}\n/**\n * Mark the end of the <ng-container>.\n * @return {?}\n */\nexport function elementContainerEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertHasParent();\n        previousOrParentTNode = /** @type {?} */ ((previousOrParentTNode.parent));\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n    currentQueries &&\n        (currentQueries = currentQueries.addNode(/** @type {?} */ (previousOrParentTNode)));\n    queueLifecycleHooks(previousOrParentTNode.flags, tView);\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the LViewData array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nexport function elementStart(index, name, attrs, localRefs) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    /** @type {?} */\n    var native = elementCreate(name);\n    ngDevMode && assertDataInRange(index - 1);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 3 /* Element */, /** @type {?} */ ((native)), name, attrs || null);\n    if (attrs) {\n        setUpAttributes(native, attrs);\n    }\n    appendChild(native, tNode, viewData);\n    createDirectivesAndLocals(localRefs);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (elementDepthCount === 0) {\n        attachPatchData(native, viewData);\n    }\n    elementDepthCount++;\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nexport function elementCreate(name, overriddenRenderer) {\n    /** @type {?} */\n    var native;\n    /** @type {?} */\n    var rendererToUse = overriddenRenderer || renderer;\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, _currentNamespace);\n    }\n    else {\n        if (_currentNamespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(_currentNamespace, name);\n        }\n    }\n    return native;\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} localRefs Local refs of the node in question\n * @param {?=} localRefExtractor mapping function that extracts local ref value from TNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(localRefs, localRefExtractor) {\n    if (localRefExtractor === void 0) { localRefExtractor = getNativeByTNode; }\n    if (!bindingsEnabled)\n        return;\n    if (firstTemplatePass) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        cacheMatchingDirectivesForNode(previousOrParentTNode, tView, localRefs || null);\n    }\n    else {\n        instantiateDirectivesDirectly();\n    }\n    saveResolvedLocalsInData(localRefExtractor);\n}\n/**\n * On first template pass, we match each node against available directive selectors and save\n * the resulting defs in the correct instantiation order for subsequent change detection runs\n * (so dependencies are always created before the directives that inject them).\n * @param {?} tNode\n * @param {?} tView\n * @param {?} localRefs\n * @return {?}\n */\nfunction cacheMatchingDirectivesForNode(tNode, tView, localRefs) {\n    /** @type {?} */\n    var exportsMap = localRefs ? { '': -1 } : null;\n    /** @type {?} */\n    var matches = tView.currentMatches = findDirectiveMatches(tNode);\n    generateExpandoBlock(tNode, matches);\n    /** @type {?} */\n    var totalHostVars = 0;\n    if (matches) {\n        for (var i = 0; i < matches.length; i += 2) {\n            /** @type {?} */\n            var def = /** @type {?} */ (matches[i]);\n            /** @type {?} */\n            var valueIndex = i + 1;\n            resolveDirective(def, valueIndex, matches);\n            totalHostVars += def.hostVars;\n            saveNameToExportMap(/** @type {?} */ (matches[valueIndex]), def, exportsMap);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n    prefillHostVars(totalHostVars);\n}\n/**\n * Generates a new block in TView.expandoInstructions for this node.\n *\n * Each expando block starts with the element index (turned negative so we can distinguish\n * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n * @param {?} tNode\n * @param {?} matches\n * @return {?}\n */\nfunction generateExpandoBlock(tNode, matches) {\n    /** @type {?} */\n    var directiveCount = matches ? matches.length / 2 : 0;\n    /** @type {?} */\n    var elementIndex = -(tNode.index - HEADER_OFFSET);\n    if (directiveCount > 0) {\n        (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, directiveCount);\n    }\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n * @param {?} totalHostVars\n * @return {?}\n */\nexport function prefillHostVars(totalHostVars) {\n    for (var i = 0; i < totalHostVars; i++) {\n        viewData.push(NO_CHANGE);\n        tView.blueprint.push(NO_CHANGE);\n        tView.data.push(null);\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tNode) {\n    /** @type {?} */\n    var registry = tView.directiveRegistry;\n    /** @type {?} */\n    var matches = null;\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            var def = registry[i];\n            if (isNodeMatchingSelectorList(tNode, /** @type {?} */ ((def.selectors)))) {\n                matches || (matches = []);\n                if (def.diPublic)\n                    def.diPublic(def);\n                if ((/** @type {?} */ (def)).template) {\n                    if (tNode.flags & 4096 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    addComponentLogic(/** @type {?} */ (def));\n                    // The component is always stored first with directives after.\n                    matches.unshift(def, null);\n                }\n                else {\n                    matches.push(def, null);\n                }\n            }\n        }\n    }\n    return /** @type {?} */ (matches);\n}\n/**\n * @param {?} def\n * @param {?} valueIndex\n * @param {?} matches\n * @return {?}\n */\nexport function resolveDirective(def, valueIndex, matches) {\n    if (matches[valueIndex] === null) {\n        matches[valueIndex] = CIRCULAR;\n        /** @type {?} */\n        var instance = def.factory();\n        return directiveCreate(matches[valueIndex] = viewData.length, instance, def);\n    }\n    else if (matches[valueIndex] === CIRCULAR) {\n        // If we revisit this directive before it's resolved, we know it's circular\n        throwCyclicDependencyError(def.type);\n    }\n    return null;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @return {?}\n */\nfunction queueComponentIndexForCheck() {\n    if (firstTemplatePass) {\n        (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n    }\n}\n/**\n * Stores index of directive and host element so it will be queued for binding refresh during CD.\n * @param {?} dirIndex\n * @param {?} def\n * @return {?}\n */\nexport function queueHostBindingForCheck(dirIndex, def) {\n    ngDevMode &&\n        assertEqual(firstTemplatePass, true, 'Should only be called in first template pass.'); /** @type {?} */\n    ((tView.expandoInstructions)).push(/** @type {?} */ ((def.hostBindings)), def.hostVars);\n}\n/**\n * This function instantiates the given directives.\n * @return {?}\n */\nfunction instantiateDirectivesDirectly() {\n    ngDevMode && assertEqual(firstTemplatePass, false, \"Directives should only be instantiated directly after first template pass\");\n    /** @type {?} */\n    var count = previousOrParentTNode.flags & 4095 /* DirectiveCountMask */;\n    if (isContentQueryHost(previousOrParentTNode) && currentQueries) {\n        currentQueries = currentQueries.clone();\n    }\n    if (count > 0) {\n        /** @type {?} */\n        var start = previousOrParentTNode.flags >> 15 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var end = start + count;\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (tView.data[i]);\n            // Component view must be set on node before the factory is created so\n            // ChangeDetectorRefs have a way to store component view on creation.\n            if ((/** @type {?} */ (def)).template) {\n                addComponentLogic(/** @type {?} */ (def));\n            }\n            directiveCreate(i, def.factory(), def);\n        }\n    }\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        /** @type {?} */\n        var localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (var i = 0; i < localRefs.length; i += 2) {\n            /** @type {?} */\n            var index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs)\n            exportsMap[def.exportAs] = index;\n        if ((/** @type {?} */ (def)).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LViewData in the same order as they are loaded in the template with load().\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(localRefExtractor) {\n    /** @type {?} */\n    var localNames = previousOrParentTNode.localNames;\n    /** @type {?} */\n    var tNode = /** @type {?} */ (previousOrParentTNode);\n    if (localNames) {\n        /** @type {?} */\n        var localIndex = previousOrParentTNode.index + 1;\n        for (var i = 0; i < localNames.length; i += 2) {\n            /** @type {?} */\n            var index = /** @type {?} */ (localNames[i + 1]);\n            /** @type {?} */\n            var value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} templateFn The template from which to get static data\n * @param {?} consts The number of nodes, local refs, and pipes in this view\n * @param {?} vars The number of bindings and pure function bindings in this view\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @param {?} viewQuery\n * @return {?} TView\n */\nexport function getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData = /** @type {?} */ (createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery)));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery\n * @return {?}\n */\nexport function createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery) {\n    ngDevMode && ngDevMode.tView++;\n    /** @type {?} */\n    var bindingStartIndex = HEADER_OFFSET + consts;\n    /** @type {?} */\n    var initialViewLength = bindingStartIndex + vars;\n    /** @type {?} */\n    var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[TVIEW] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: /** @type {?} */ ((null)),\n        data: blueprint.slice(),\n        // Fill in to match HEADER_OFFSET in LViewData\n        childIndex: -1,\n        // Children set in addToViewTree(), if any\n        bindingStartIndex: bindingStartIndex,\n        expandoStartIndex: initialViewLength,\n        expandoInstructions: null,\n        firstTemplatePass: true,\n        initHooks: null,\n        checkHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        pipeDestroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        currentMatches: null,\n        firstChild: null,\n    };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    /** @type {?} */\n    var blueprint = /** @type {?} */ (new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex));\n    blueprint[CONTAINER_INDEX] = -1;\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\n/**\n * @param {?} native\n * @param {?} attrs\n * @return {?}\n */\nfunction setUpAttributes(native, attrs) {\n    /** @type {?} */\n    var isProc = isProceduralRenderer(renderer);\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var attrName = attrs[i];\n        if (attrName === 1 /* SelectOnly */)\n            break;\n        if (attrName === NG_PROJECT_AS_ATTR_NAME) {\n            i += 2;\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            if (attrName === 0 /* NamespaceURI */) {\n                /** @type {?} */\n                var namespaceURI = /** @type {?} */ (attrs[i + 1]);\n                /** @type {?} */\n                var attrName_1 = /** @type {?} */ (attrs[i + 2]);\n                /** @type {?} */\n                var attrVal = /** @type {?} */ (attrs[i + 3]);\n                isProc ?\n                    (/** @type {?} */ (renderer))\n                        .setAttribute(native, attrName_1, attrVal, namespaceURI) :\n                    native.setAttributeNS(namespaceURI, attrName_1, attrVal);\n                i += 4;\n            }\n            else {\n                /** @type {?} */\n                var attrVal = attrs[i + 1];\n                isProc ?\n                    (/** @type {?} */ (renderer))\n                        .setAttribute(native, /** @type {?} */ (attrName), /** @type {?} */ (attrVal)) :\n                    native.setAttribute(/** @type {?} */ (attrName), /** @type {?} */ (attrVal));\n                i += 2;\n            }\n        }\n    }\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nexport function createError(text, token) {\n    return new Error(\"Renderer: \" + text + \" [\" + stringify(token) + \"]\");\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nexport function locateHostElement(factory, elementOrSelector) {\n    ngDevMode && assertDataInRange(-1);\n    rendererFactory = factory;\n    /** @type {?} */\n    var defaultRenderer = factory.createRenderer(null, null);\n    /** @type {?} */\n    var rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener.\n * @return {?}\n */\nexport function listener(eventName, listenerFn, useCapture) {\n    if (useCapture === void 0) { useCapture = false; }\n    /** @type {?} */\n    var tNode = previousOrParentTNode;\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    // add native event listener - applicable to elements only\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        var native = /** @type {?} */ (getNativeByTNode(previousOrParentTNode, viewData));\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            /** @type {?} */\n            var cleanupFn = renderer.listen(native, eventName, listenerFn);\n            storeCleanupFn(viewData, cleanupFn);\n        }\n        else {\n            /** @type {?} */\n            var wrappedListener = wrapListenerWithPreventDefault(listenerFn);\n            native.addEventListener(eventName, wrappedListener, useCapture);\n            /** @type {?} */\n            var cleanupInstances = getCleanup(viewData);\n            cleanupInstances.push(wrappedListener);\n            if (firstTemplatePass) {\n                getTViewCleanup(viewData).push(eventName, tNode.index, /** @type {?} */ ((cleanupInstances)).length - 1, useCapture);\n            }\n        }\n    }\n    // subscribe to directive outputs\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(tNode.flags, 1 /* Output */);\n    }\n    /** @type {?} */\n    var outputs = tNode.outputs;\n    /** @type {?} */\n    var outputData;\n    if (outputs && (outputData = outputs[eventName])) {\n        createOutput(outputData, listenerFn);\n    }\n}\n/**\n * Iterates through the outputs associated with a particular event name and subscribes to\n * each output.\n * @param {?} outputs\n * @param {?} listener\n * @return {?}\n */\nfunction createOutput(outputs, listener) {\n    for (var i = 0; i < outputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (outputs[i]), viewData);\n        /** @type {?} */\n        var subscription = viewData[/** @type {?} */ (outputs[i])][outputs[i + 1]].subscribe(listener);\n        storeCleanupWithContext(viewData, subscription, subscription.unsubscribe);\n    }\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} view\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupWithContext(view, context, cleanupFn) {\n    if (!view)\n        view = viewData;\n    getCleanup(view).push(context);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push(cleanupFn, /** @type {?} */ ((view[CLEANUP])).length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push(/** @type {?} */ ((view[CLEANUP])).length - 1, null);\n    }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nexport function elementEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertHasParent();\n        previousOrParentTNode = /** @type {?} */ ((previousOrParentTNode.parent));\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n    currentQueries &&\n        (currentQueries = currentQueries.addNode(/** @type {?} */ (previousOrParentTNode)));\n    queueLifecycleHooks(previousOrParentTNode.flags, tView);\n    elementDepthCount--;\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementAttribute(index, name, value, sanitizer) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        var element_1 = getNativeByIndex(index, viewData);\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element_1, name) :\n                element_1.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            /** @type {?} */\n            var strValue = sanitizer == null ? stringify(value) : sanitizer(value);\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element_1, name, strValue) :\n                element_1.setAttribute(name, strValue);\n        }\n    }\n}\n/**\n * Update a property on an Element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementProperty(index, propName, value, sanitizer) {\n    if (value === NO_CHANGE)\n        return;\n    /** @type {?} */\n    var element = /** @type {?} */ (getNativeByIndex(index, viewData));\n    /** @type {?} */\n    var tNode = getTNode(index, viewData);\n    // if tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked\n    if (tNode && tNode.inputs === undefined) {\n        // mark inputs as checked\n        tNode.inputs = generatePropertyAliases(tNode.flags, 0 /* Input */);\n    }\n    /** @type {?} */\n    var inputData = tNode && tNode.inputs;\n    /** @type {?} */\n    var dataValue;\n    if (inputData && (dataValue = inputData[propName])) {\n        setInputsForProperty(dataValue, value);\n        if (isComponent(tNode))\n            markDirtyIfOnPush(index + HEADER_OFFSET);\n    }\n    else if (tNode.type === 3 /* Element */) {\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? (/** @type {?} */ (sanitizer(value))) : value;\n        ngDevMode && ngDevMode.rendererSetProperty++;\n        isProceduralRenderer(renderer) ?\n            renderer.setProperty(/** @type {?} */ (element), propName, value) :\n            ((/** @type {?} */ (element)).setProperty ? (/** @type {?} */ (element)).setProperty(propName, value) :\n                (/** @type {?} */ (element))[propName] = value);\n    }\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nexport function enableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nexport function disableBindings() {\n    bindingsEnabled = false;\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @param {?} tViews Any TViews attached to this node\n * @return {?} the TNode object\n */\nexport function createTNode(type, adjustedIndex, tagName, attrs, tViews) {\n    ngDevMode && ngDevMode.tNode++;\n    /** @type {?} */\n    var parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n    /** @type {?} */\n    var parentInSameView = parent && viewData && parent !== viewData[HOST_NODE];\n    /** @type {?} */\n    var tParent = parentInSameView ? /** @type {?} */ (parent) : null;\n    return {\n        type: type,\n        index: adjustedIndex,\n        injectorIndex: tParent ? tParent.injectorIndex : -1,\n        flags: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: tViews,\n        next: null,\n        child: null,\n        parent: tParent,\n        detached: null,\n        stylingTemplate: null,\n        projection: null\n    };\n}\n/**\n * Given a list of directive indices and minified input names, sets the\n * input properties on the corresponding directives.\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setInputsForProperty(inputs, value) {\n    for (var i = 0; i < inputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (inputs[i]), viewData);\n        viewData[/** @type {?} */ (inputs[i])][inputs[i + 1]] = value;\n    }\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNodeFlags\n * @param {?} direction\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNodeFlags, direction) {\n    /** @type {?} */\n    var count = tNodeFlags & 4095 /* DirectiveCountMask */;\n    /** @type {?} */\n    var propStore = null;\n    if (count > 0) {\n        /** @type {?} */\n        var start = tNodeFlags >> 15 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var end = start + count;\n        /** @type {?} */\n        var isInput = direction === 0 /* Input */;\n        /** @type {?} */\n        var defs = tView.data;\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var directiveDef = /** @type {?} */ (defs[i]);\n            /** @type {?} */\n            var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (var publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    /** @type {?} */\n                    var internalName = propertyAliasMap[publicName];\n                    /** @type {?} */\n                    var hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, internalName) :\n                        (propStore[publicName] = [i, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Add or remove a class in a `classList` on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} stylingIndex\n * @param {?} value A value indicating if a given class should be added or removed.\n * @return {?}\n */\nexport function elementClassProp(index, stylingIndex, value) {\n    updateElementClassProp(getStylingContext(index, viewData), stylingIndex, value ? true : false);\n}\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to apply all styling\n * (e.g. `style=\"...\"`) values to the element. This is also where the provided index\n * value is allocated for the styling details for its corresponding element (the element\n * index is the previous index value from this one).\n *\n * (Note this function calls `elementStylingApply` immediately when called.)\n *\n *\n * @template T\n * @param {?=} classDeclarations A key/value array of CSS classes that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any classes placed on the element by multiple (`[class]`) or singular (`[class.named]`)\n *   bindings. If a class binding changes its value to a falsy value then the matching initial\n *   class value that are passed in here will be applied to the element (if matched).\n * @param {?=} styleDeclarations A key/value array of CSS styles that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any styles placed on the element by multiple (`[style]`) or singular (`[style.prop]`)\n *   bindings. If a style binding changes its value to null then the initial styling\n *   values that are passed in here will be applied to the element (if matched).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used (if provided)\n *   to sanitize the any CSS property values that are applied to the element (during rendering).\n * @return {?}\n */\nexport function elementStyling(classDeclarations, styleDeclarations, styleSanitizer) {\n    /** @type {?} */\n    var tNode = previousOrParentTNode;\n    if (!tNode.stylingTemplate) {\n        // initialize the styling template.\n        tNode.stylingTemplate =\n            createStylingContextTemplate(classDeclarations, styleDeclarations, styleSanitizer);\n    }\n    if (styleDeclarations && styleDeclarations.length ||\n        classDeclarations && classDeclarations.length) {\n        elementStylingApply(tNode.index - HEADER_OFFSET);\n    }\n}\n/**\n * Apply all styling values to the element which have been queued by any styling instructions.\n *\n * This instruction is meant to be run once one or more `elementStyle` and/or `elementStyleProp`\n * have been issued against the element. This function will also determine if any styles have\n * changed and will then skip the operation if there is nothing new to render.\n *\n * Once called then all queued styles will be flushed.\n *\n * @template T\n * @param {?} index Index of the element's styling storage that will be rendered.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @return {?}\n */\nexport function elementStylingApply(index) {\n    renderElementStyles(getStylingContext(index, viewData), renderer);\n}\n/**\n * Queue a given style to be rendered on an Element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @template T\n * @param {?} index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param {?} styleIndex Index of the style property on this element. (Monotonically increasing.)\n * @param {?} value New value to write (null to remove).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @return {?}\n */\nexport function elementStyleProp(index, styleIndex, value, suffix) {\n    /** @type {?} */\n    var valueToAdd = null;\n    if (value) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            valueToAdd = stringify(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            valueToAdd = /** @type {?} */ ((value));\n        }\n    }\n    updateElementStyleProp(getStylingContext(index, viewData), styleIndex, valueToAdd);\n}\n/**\n * Queue a key/value map of styles to be rendered on an Element.\n *\n * This instruction is meant to handle the `[style]=\"exp\"` usage. When styles are applied to\n * the Element they will then be placed with respect to any styles set with `elementStyleProp`.\n * If any styles are set to `null` then they will be removed from the element (unless the same\n * style properties have been assigned to the element during creation using `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @template T\n * @param {?} index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param {?} classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @return {?}\n */\nexport function elementStylingMap(index, classes, styles) {\n    updateStylingMap(getStylingContext(index, viewData), classes, styles);\n}\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n * @return {?}\n */\nexport function text(index, value) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    /** @type {?} */\n    var textNative = createTextNode(value, renderer);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n    // Text nodes are self closing.\n    isParent = false;\n    appendChild(textNative, tNode, viewData);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nexport function textBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        ngDevMode && assertDataInRange(index + HEADER_OFFSET);\n        /** @type {?} */\n        var element_2 = /** @type {?} */ ((getNativeByIndex(index, viewData)));\n        ngDevMode && assertDefined(element_2, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        isProceduralRenderer(renderer) ? renderer.setValue(element_2, stringify(value)) :\n            element_2.textContent = stringify(value);\n    }\n}\n/**\n * Create a directive and their associated content queries.\n *\n * NOTE: directives can be created in order other than the index order. They can also\n *       be retrieved before they are created in which case the value will be null.\n *\n * @template T\n * @param {?} directiveDefIdx\n * @param {?} directive The directive instance.\n * @param {?} directiveDef DirectiveDef object which contains information about the template.\n * @return {?}\n */\nexport function directiveCreate(directiveDefIdx, directive, directiveDef) {\n    /** @type {?} */\n    var native = getNativeByTNode(previousOrParentTNode, viewData);\n    /** @type {?} */\n    var instance = baseDirectiveCreate(directiveDefIdx, directive, directiveDef, native);\n    if ((/** @type {?} */ (directiveDef)).template) {\n        /** @type {?} */\n        var componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n    if (firstTemplatePass) {\n        // Init hooks are queued now so ngOnInit is called in host components before\n        // any projected components.\n        queueInitHooks(directiveDefIdx, directiveDef.onInit, directiveDef.doCheck, tView);\n    }\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, instance, directiveDef.inputs, previousOrParentTNode);\n    }\n    if (directiveDef.contentQueries) {\n        directiveDef.contentQueries();\n    }\n    return instance;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(def) {\n    /** @type {?} */\n    var native = getNativeByTNode(previousOrParentTNode, viewData);\n    /** @type {?} */\n    var tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery);\n    /** @type {?} */\n    var componentView = addToViewTree(viewData, /** @type {?} */ (previousOrParentTNode.index), createLViewData(rendererFactory.createRenderer(/** @type {?} */ (native), def), tView, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */, getCurrentSanitizer()));\n    componentView[HOST_NODE] = /** @type {?} */ (previousOrParentTNode);\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    componentView[HOST] = viewData[previousOrParentTNode.index];\n    viewData[previousOrParentTNode.index] = componentView;\n    if (firstTemplatePass) {\n        queueComponentIndexForCheck();\n        previousOrParentTNode.flags =\n            viewData.length << 15 /* DirectiveStartingIndexShift */ | 4096 /* isComponent */;\n    }\n}\n/**\n * A lighter version of directiveCreate() that is used for the root component\n *\n * This version does not contain features that we don't already support at root in\n * current Angular. Example: local refs and inputs on root component.\n * @template T\n * @param {?} index\n * @param {?} directive\n * @param {?} directiveDef\n * @param {?} native\n * @return {?}\n */\nexport function baseDirectiveCreate(index, directive, directiveDef, native) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent();\n    attachPatchData(directive, viewData);\n    if (native) {\n        attachPatchData(native, viewData);\n    }\n    viewData[index] = directive;\n    if (firstTemplatePass) {\n        /** @type {?} */\n        var flags = previousOrParentTNode.flags;\n        if (flags === 0) {\n            // When the first directive is created:\n            // - save the index,\n            // - set the number of directives to 1\n            previousOrParentTNode.flags =\n                index << 15 /* DirectiveStartingIndexShift */ | flags & 4096 /* isComponent */ | 1;\n        }\n        else {\n            // Only need to bump the size when subsequent directives are created\n            ngDevMode && assertNotEqual(flags & 4095 /* DirectiveCountMask */, 4095 /* DirectiveCountMask */, 'Reached the max number of directives');\n            previousOrParentTNode.flags++;\n        }\n        tView.data.push(directiveDef);\n        tView.blueprint.push(null);\n        if (directiveDef.hostBindings)\n            queueHostBindingForCheck(index, directiveDef);\n    }\n    else {\n        /** @type {?} */\n        var diPublic = /** @type {?} */ ((directiveDef)).diPublic;\n        if (diPublic)\n            diPublic(/** @type {?} */ ((directiveDef)));\n    }\n    if (/** @type {?} */ ((directiveDef)).attributes != null && previousOrParentTNode.type == 3 /* Element */) {\n        setUpAttributes(/** @type {?} */ (native), /** @type {?} */ (((directiveDef)).attributes));\n    }\n    return directive;\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\n    /** @type {?} */\n    var initialInputData = /** @type {?} */ (tNode.initialInputs);\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\n    }\n    /** @type {?} */\n    var initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        for (var i = 0; i < initialInputs.length; i += 2) {\n            (/** @type {?} */ (instance))[initialInputs[i]] = initialInputs[i + 1];\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    /** @type {?} */\n    var initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    /** @type {?} */\n    var attrs = /** @type {?} */ ((tNode.attrs));\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var attrName = attrs[i];\n        if (attrName === 1 /* SelectOnly */)\n            break;\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        /** @type {?} */\n        var minifiedInputName = inputs[attrName];\n        /** @type {?} */\n        var attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            /** @type {?} */\n            var inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(minifiedInputName, /** @type {?} */ (attrValue));\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} hostNative The host element for the LContainer\n * @param {?} hostTNode The host TNode for the LContainer\n * @param {?} currentView The parent view of the LContainer\n * @param {?} native The native comment element\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nexport function createLContainer(hostNative, hostTNode, currentView, native, isForViewContainerRef) {\n    return [\n        isForViewContainerRef ? -1 : 0,\n        // active index\n        [],\n        currentView,\n        null,\n        null,\n        hostNative,\n        native,\n        // native\n        getRenderParent(hostTNode, currentView) // renderParent\n    ];\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @return {?}\n */\nexport function template(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    /** @type {?} */\n    var tNode = containerInternal(index, tagName || null, attrs || null);\n    if (firstTemplatePass) {\n        tNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    createDirectivesAndLocals(localRefs, localRefExtractor);\n    currentQueries &&\n        (currentQueries = currentQueries.addNode(/** @type {?} */ (previousOrParentTNode)));\n    queueLifecycleHooks(tNode.flags, tView);\n    isParent = false;\n}\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function container(index) {\n    /** @type {?} */\n    var tNode = containerInternal(index, null, null);\n    firstTemplatePass && (tNode.tViews = []);\n    isParent = false;\n}\n/**\n * @param {?} index\n * @param {?} tagName\n * @param {?} attrs\n * @return {?}\n */\nfunction containerInternal(index, tagName, attrs) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'container nodes should be created before any bindings');\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    var comment = renderer.createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 0 /* Container */, comment, tagName, attrs);\n    /** @type {?} */\n    var lContainer = viewData[adjustedIndex] =\n        createLContainer(viewData[adjustedIndex], tNode, viewData, comment);\n    appendChild(comment, tNode, viewData);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(viewData, index + HEADER_OFFSET, lContainer);\n    if (currentQueries) {\n        // prepare place for matching nodes from views inserted into a given container\n        lContainer[QUERIES] = currentQueries.container();\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    return tNode;\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function containerRefreshStart(index) {\n    previousOrParentTNode = /** @type {?} */ (loadInternal(index, tView.data));\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    isParent = true;\n    viewData[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n    if (!checkNoChangesMode) {\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\n        // before they are called in embedded views (for backwards compatibility).\n        executeInitHooks(viewData, tView, creationMode);\n    }\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n * @return {?}\n */\nexport function containerRefreshEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n        ngDevMode && assertHasParent();\n        previousOrParentTNode = /** @type {?} */ ((previousOrParentTNode.parent));\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    /** @type {?} */\n    var lContainer = viewData[previousOrParentTNode.index];\n    /** @type {?} */\n    var nextIndex = lContainer[ACTIVE_INDEX];\n    // remove extra views at the end of the container\n    while (nextIndex < lContainer[VIEWS].length) {\n        removeView(lContainer, /** @type {?} */ (previousOrParentTNode), nextIndex);\n    }\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n * @param {?} lViewData\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lViewData) {\n    for (var current = getLViewChild(lViewData); current !== null; current = current[NEXT]) {\n        // Note: current can be an LViewData or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LViewData\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n            /** @type {?} */\n            var container_1 = /** @type {?} */ (current);\n            for (var i = 0; i < container_1[VIEWS].length; i++) {\n                /** @type {?} */\n                var dynamicViewData = container_1[VIEWS][i];\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], /** @type {?} */ ((dynamicViewData[CONTEXT])), 2 /* Update */);\n            }\n        }\n    }\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} lContainer to search for views\n * @param {?} tContainerNode to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(lContainer, tContainerNode, startIdx, viewBlockId) {\n    /** @type {?} */\n    var views = lContainer[VIEWS];\n    for (var i = startIdx; i < views.length; i++) {\n        /** @type {?} */\n        var viewAtPositionId = views[i][TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(lContainer, tContainerNode, i);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the search here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n */\nexport function embeddedViewStart(viewBlockId, consts, vars) {\n    /** @type {?} */\n    var containerTNode = previousOrParentTNode.type === 2 /* View */ ? /** @type {?} */\n        ((previousOrParentTNode.parent)) :\n        previousOrParentTNode;\n    /** @type {?} */\n    var lContainer = /** @type {?} */ (viewData[containerTNode.index]);\n    /** @type {?} */\n    var currentView = viewData;\n    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n    /** @type {?} */\n    var viewToRender = scanForView(lContainer, /** @type {?} */ (containerTNode), /** @type {?} */ ((lContainer[ACTIVE_INDEX])), viewBlockId);\n    if (viewToRender) {\n        isParent = true;\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        viewToRender = createLViewData(renderer, getOrCreateEmbeddedTView(viewBlockId, consts, vars, /** @type {?} */ (containerTNode)), null, 2 /* CheckAlways */, getCurrentSanitizer());\n        if (lContainer[QUERIES]) {\n            viewToRender[QUERIES] = /** @type {?} */ ((lContainer[QUERIES])).createView();\n        }\n        createViewNode(viewBlockId, viewToRender);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    if (lContainer) {\n        if (creationMode) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(viewToRender, lContainer, currentView, /** @type {?} */ ((lContainer[ACTIVE_INDEX])), -1);\n        } /** @type {?} */\n        ((lContainer[ACTIVE_INDEX]))++;\n    }\n    return getRenderFlags(viewToRender);\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    /** @type {?} */\n    var containerTViews = /** @type {?} */ (parent.tViews);\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nexport function embeddedViewEnd() {\n    /** @type {?} */\n    var viewHost = viewData[HOST_NODE];\n    refreshDescendantViews();\n    leaveView(/** @type {?} */ ((viewData[PARENT])));\n    previousOrParentTNode = /** @type {?} */ ((viewHost));\n    isParent = false;\n}\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @template T\n * @param {?} adjustedElementIndex  Element index in LViewData[] (adjusted for HEADER_OFFSET)\n * @param {?} parentFirstTemplatePass\n * @return {?}\n */\nexport function componentRefresh(adjustedElementIndex, parentFirstTemplatePass) {\n    ngDevMode && assertDataInRange(adjustedElementIndex);\n    /** @type {?} */\n    var hostView = getComponentViewByIndex(adjustedElementIndex, viewData);\n    ngDevMode && assertNodeType(/** @type {?} */ (tView.data[adjustedElementIndex]), 3 /* Element */);\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttached(hostView) && hostView[FLAGS] & (2 /* CheckAlways */ | 4 /* Dirty */)) {\n        parentFirstTemplatePass && syncViewWithBlueprint(hostView);\n        detectChangesInternal(hostView, hostView[CONTEXT]);\n    }\n}\n/**\n * Syncs an LViewData instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LViewData is created.\n * 3. Second <comp> is matched as a component and its LViewData is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LViewData was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param {?} componentView The view to sync\n * @return {?}\n */\nfunction syncViewWithBlueprint(componentView) {\n    /** @type {?} */\n    var componentTView = componentView[TVIEW];\n    for (var i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Returns a boolean for whether the view is attached\n * @param {?} view\n * @return {?}\n */\nexport function viewAttached(view) {\n    return (view[FLAGS] & 8 /* Attached */) === 8 /* Attached */;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nexport function projectionDef(selectors, textSelectors) {\n    /** @type {?} */\n    var componentNode = /** @type {?} */ (findComponentView(viewData)[HOST_NODE]);\n    if (!componentNode.projection) {\n        /** @type {?} */\n        var noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n        /** @type {?} */\n        var pData = componentNode.projection =\n            new Array(noOfNodeBuckets).fill(null);\n        /** @type {?} */\n        var tails = pData.slice();\n        /** @type {?} */\n        var componentChild = componentNode.child;\n        while (componentChild !== null) {\n            /** @type {?} */\n            var bucketIndex = selectors ? matchingSelectorIndex(componentChild, selectors, /** @type {?} */ ((textSelectors))) : 0;\n            /** @type {?} */\n            var nextNode = componentChild.next;\n            if (tails[bucketIndex]) {\n                /** @type {?} */ ((tails[bucketIndex])).next = componentChild;\n            }\n            else {\n                pData[bucketIndex] = componentChild;\n                componentChild.next = null;\n            }\n            tails[bucketIndex] = componentChild;\n            componentChild = nextNode;\n        }\n    }\n}\n/** *\n * Stack used to keep track of projection nodes in projection() instruction.\n *\n * This is deliberately created outside of projection() to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n  @type {?} */\nvar projectionNodeStack = [];\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nexport function projection(nodeIndex, selectorIndex, attrs) {\n    if (selectorIndex === void 0) { selectorIndex = 0; }\n    /** @type {?} */\n    var tProjectionNode = createNodeAtIndex(nodeIndex, 1 /* Projection */, null, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    isParent = false;\n    /** @type {?} */\n    var componentView = findComponentView(viewData);\n    /** @type {?} */\n    var componentNode = /** @type {?} */ (componentView[HOST_NODE]);\n    /** @type {?} */\n    var nodeToProject = (/** @type {?} */ (componentNode.projection))[selectorIndex];\n    /** @type {?} */\n    var projectedView = /** @type {?} */ ((componentView[PARENT]));\n    /** @type {?} */\n    var projectionNodeIndex = -1;\n    while (nodeToProject) {\n        if (nodeToProject.type === 1 /* Projection */) {\n            /** @type {?} */\n            var currentComponentView = findComponentView(projectedView);\n            /** @type {?} */\n            var currentComponentHost = /** @type {?} */ (currentComponentView[HOST_NODE]);\n            /** @type {?} */\n            var firstProjectedNode = (/** @type {?} */ (currentComponentHost.projection))[/** @type {?} */ (nodeToProject.projection)];\n            if (firstProjectedNode) {\n                projectionNodeStack[++projectionNodeIndex] = nodeToProject;\n                projectionNodeStack[++projectionNodeIndex] = projectedView;\n                nodeToProject = firstProjectedNode;\n                projectedView = /** @type {?} */ ((currentComponentView[PARENT]));\n                continue;\n            }\n        }\n        else {\n            // This flag must be set now or we won't know that this node is projected\n            // if the nodes are inserted into a container later.\n            nodeToProject.flags |= 8192 /* isProjected */;\n            appendProjectedNode(nodeToProject, tProjectionNode, viewData, projectedView);\n        }\n        // If we are finished with a list of re-projected nodes, we need to get\n        // back to the root projection node that was re-projected.\n        if (nodeToProject.next === null && projectedView !== /** @type {?} */ ((componentView[PARENT]))) {\n            projectedView = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n            nodeToProject = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n        }\n        nodeToProject = nodeToProject.next;\n    }\n}\n/**\n * Adds LViewData or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} currentView The view where LViewData or LContainer should be added\n * @param {?} adjustedHostIndex Index of the view's host node in LViewData[], adjusted for header\n * @param {?} state The LViewData or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nexport function addToViewTree(currentView, adjustedHostIndex, state) {\n    if (currentView[TAIL]) {\n        /** @type {?} */ ((currentView[TAIL]))[NEXT] = state;\n    }\n    else if (firstTemplatePass) {\n        tView.childIndex = adjustedHostIndex;\n    }\n    currentView[TAIL] = state;\n    return state;\n}\n/**\n * If node is an OnPush component, marks its LViewData dirty.\n * @param {?} viewIndex\n * @return {?}\n */\nexport function markDirtyIfOnPush(viewIndex) {\n    /** @type {?} */\n    var view = getComponentViewByIndex(viewIndex, viewData);\n    if (!(view[FLAGS] & 2 /* CheckAlways */)) {\n        view[FLAGS] |= 4 /* Dirty */;\n    }\n}\n/**\n * Wraps an event listener with preventDefault behavior.\n * @param {?} listenerFn\n * @return {?}\n */\nexport function wrapListenerWithPreventDefault(listenerFn) {\n    return function wrapListenerIn_preventDefault(e) {\n        if (listenerFn(e) === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n    };\n}\n/**\n * Marks current view and all ancestors dirty\n * @param {?} view\n * @return {?}\n */\nexport function markViewDirty(view) {\n    /** @type {?} */\n    var currentView = view;\n    while (currentView && !(currentView[FLAGS] & 64 /* IsRoot */)) {\n        currentView[FLAGS] |= 4 /* Dirty */;\n        currentView = /** @type {?} */ ((currentView[PARENT]));\n    }\n    currentView[FLAGS] |= 4 /* Dirty */;\n    ngDevMode && assertDefined(currentView[CONTEXT], 'rootContext should be defined');\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (currentView[CONTEXT]);\n    /** @type {?} */\n    var nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= 1 /* DetectChanges */;\n    if (nothingScheduled) {\n        scheduleTick(rootContext);\n    }\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @return {?}\n */\nexport function scheduleTick(rootContext) {\n    if (rootContext.clean == _CLEAN_PROMISE) {\n        /** @type {?} */\n        var res_1 = void 0;\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\n        rootContext.scheduler(function () {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                /** @type {?} */\n                var playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE; /** @type {?} */\n            ((res_1))(null);\n        });\n    }\n}\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function tick(component) {\n    /** @type {?} */\n    var rootView = getRootView(component);\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (rootView[CONTEXT]);\n    tickRootContext(rootContext);\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n    for (var i = 0; i < rootContext.components.length; i++) {\n        /** @type {?} */\n        var rootComponent = rootContext.components[i];\n        renderComponentOrTemplate(/** @type {?} */ ((readPatchedLViewData(rootComponent))), rootComponent);\n    }\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChanges(component) {\n    detectChangesInternal(/** @type {?} */ ((getComponentViewByInstance(component))), component);\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lViewData The view which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChangesInRootView(lViewData) {\n    tickRootContext(/** @type {?} */ (lViewData[CONTEXT]));\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function checkNoChanges(component) {\n    checkNoChangesMode = true;\n    try {\n        detectChanges(component);\n    }\n    finally {\n        checkNoChangesMode = false;\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lViewData The view which the change detection should be checked on.\n * @return {?}\n */\nexport function checkNoChangesInRootView(lViewData) {\n    checkNoChangesMode = true;\n    try {\n        detectChangesInRootView(lViewData);\n    }\n    finally {\n        checkNoChangesMode = false;\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} component\n * @return {?}\n */\nexport function detectChangesInternal(hostView, component) {\n    /** @type {?} */\n    var hostTView = hostView[TVIEW];\n    /** @type {?} */\n    var oldView = enterView(hostView, hostView[HOST_NODE]);\n    /** @type {?} */\n    var templateFn = /** @type {?} */ ((hostTView.template));\n    /** @type {?} */\n    var viewQuery = hostTView.viewQuery;\n    try {\n        namespaceHTML();\n        createViewQuery(viewQuery, hostView[FLAGS], component);\n        templateFn(getRenderFlags(hostView), component);\n        refreshDescendantViews();\n        updateViewQuery(viewQuery, component);\n    }\n    finally {\n        leaveView(oldView);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} flags\n * @param {?} component\n * @return {?}\n */\nfunction createViewQuery(viewQuery, flags, component) {\n    if (viewQuery && (flags & 1 /* CreationMode */)) {\n        viewQuery(1 /* Create */, component);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} component\n * @return {?}\n */\nfunction updateViewQuery(viewQuery, component) {\n    if (viewQuery) {\n        viewQuery(2 /* Update */, component);\n    }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * @template T\n * @param {?} component Component to mark as dirty.\n * @return {?}\n */\nexport function markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    markViewDirty(getComponentViewByInstance(component));\n}\n/** *\n * A special value which designates that a value has not changed.\n  @type {?} */\nexport var NO_CHANGE = /** @type {?} */ ({});\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nexport function bind(value) {\n    return bindingUpdated(viewData[BINDING_INDEX]++, value) ? value : NO_CHANGE;\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nexport function interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    /** @type {?} */\n    var different = false;\n    for (var i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(viewData[BINDING_INDEX]++, values[i]) && (different = true);\n    }\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var content = values[0];\n    for (var i = 1; i < values.length; i += 2) {\n        content += stringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nexport function interpolation1(prefix, v0, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated(viewData[BINDING_INDEX]++, v0);\n    return different ? prefix + stringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated2(viewData[BINDING_INDEX], v0, v1);\n    viewData[BINDING_INDEX] += 2;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated3(viewData[BINDING_INDEX], v0, v1, v2);\n    viewData[BINDING_INDEX] += 3;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    viewData[BINDING_INDEX] += 4;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) +\n            suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated(viewData[BINDING_INDEX] + 4, v4) || different;\n    viewData[BINDING_INDEX] += 5;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated2(viewData[BINDING_INDEX] + 4, v4, v5) || different;\n    viewData[BINDING_INDEX] += 6;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated3(viewData[BINDING_INDEX] + 4, v4, v5, v6) || different;\n    viewData[BINDING_INDEX] += 7;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated4(viewData[BINDING_INDEX] + 4, v4, v5, v6, v7) || different;\n    viewData[BINDING_INDEX] += 8;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + i6 + stringify(v7) + suffix :\n        NO_CHANGE;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nexport function store(index, value) {\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n    }\n    viewData[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n * @return {?}\n */\nexport function reference(index) {\n    return loadInternal(index, contextViewData);\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = /** @type {?} */ ((currentView[DECLARATION_VIEW]));\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * @template T\n * @param {?} queryListIdx\n * @return {?}\n */\nexport function loadQueryList(queryListIdx) {\n    ngDevMode && assertDefined(viewData[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n    ngDevMode && assertDataInRange(queryListIdx, /** @type {?} */ ((viewData[CONTENT_QUERIES])));\n    return /** @type {?} */ ((viewData[CONTENT_QUERIES]))[queryListIdx];\n}\n/**\n * Retrieves a value from current `viewData`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nexport function load(index) {\n    return loadInternal(index, viewData);\n}\n/**\n * Gets the current binding value.\n * @param {?} bindingIndex\n * @return {?}\n */\nexport function getBinding(bindingIndex) {\n    ngDevMode && assertDataInRange(viewData[bindingIndex]);\n    ngDevMode &&\n        assertNotEqual(viewData[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return viewData[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function bindingUpdated(bindingIndex, value) {\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode && assertLessThan(bindingIndex, viewData.length, \"Slot should have been initialized to NO_CHANGE\");\n    if (viewData[bindingIndex] === NO_CHANGE) {\n        viewData[bindingIndex] = value;\n    }\n    else if (isDifferent(viewData[bindingIndex], value, checkNoChangesMode)) {\n        throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, viewData[bindingIndex], value);\n        viewData[bindingIndex] = value;\n    }\n    else {\n        return false;\n    }\n    return true;\n}\n/**\n * Updates binding and returns the value.\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function updateBinding(bindingIndex, value) {\n    return viewData[bindingIndex] = value;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nexport function bindingUpdated2(bindingIndex, exp1, exp2) {\n    /** @type {?} */\n    var different = bindingUpdated(bindingIndex, exp1);\n    return bindingUpdated(bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nexport function bindingUpdated3(bindingIndex, exp1, exp2, exp3) {\n    /** @type {?} */\n    var different = bindingUpdated2(bindingIndex, exp1, exp2);\n    return bindingUpdated(bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nexport function bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4) {\n    /** @type {?} */\n    var different = bindingUpdated2(bindingIndex, exp1, exp2);\n    return bindingUpdated2(bindingIndex + 2, exp3, exp4) || different;\n}\n/**\n * @return {?}\n */\nexport function getTView() {\n    return tView;\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n * @template Q\n * @param {?} queryList\n * @return {?}\n */\nexport function registerContentQuery(queryList) {\n    /** @type {?} */\n    var savedContentQueriesLength = (viewData[CONTENT_QUERIES] || (viewData[CONTENT_QUERIES] = [])).push(queryList);\n    if (firstTemplatePass) {\n        /** @type {?} */\n        var currentDirectiveIndex = viewData.length - 1;\n        /** @type {?} */\n        var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        /** @type {?} */\n        var lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 2] : -1;\n        if (currentDirectiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(currentDirectiveIndex, savedContentQueriesLength - 1);\n        }\n    }\n}\n/**\n * @return {?}\n */\nexport function assertPreviousIsParent() {\n    assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n/**\n * @return {?}\n */\nfunction assertHasParent() {\n    assertDefined(previousOrParentTNode.parent, 'previousOrParentTNode should have a parent');\n}\n/**\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nfunction assertDataInRange(index, arr) {\n    if (arr == null)\n        arr = viewData;\n    assertDataInRangeInternal(index, arr || viewData);\n}\n/**\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nfunction assertDataNext(index, arr) {\n    if (arr == null)\n        arr = viewData;\n    assertEqual(arr.length, index, \"index \" + index + \" expected to be at the end of arr (length \" + arr.length + \")\");\n}\n/** @type {?} */\nexport var CLEAN_PROMISE = _CLEAN_PROMISE;\n//# sourceMappingURL=instructions.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Called when directives inject each other (creating a circular dependency)\n * @param {?} token\n * @return {?}\n */\nexport function throwCyclicDependencyError(token) {\n    throw new Error(\"Cannot instantiate cyclic dependency! \" + token);\n}\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nexport function throwMultipleComponentError(tNode) {\n    throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} checkNoChangesMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nexport function throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, oldValue, currValue) {\n    if (checkNoChangesMode) {\n        /** @type {?} */\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (creationMode) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        // TODO: include debug context\n        throw new Error(msg);\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertComponentType, assertDefined } from './assert';\nimport { getComponentViewByInstance } from './context_discovery';\nimport { getComponentDef } from './definition';\nimport { queueInitHooks, queueLifecycleHooks } from './hooks';\nimport { CLEAN_PROMISE, baseDirectiveCreate, createLViewData, createNodeAtIndex, createTView, detectChangesInternal, enterView, executeInitAndContentHooks, getOrCreateTView, leaveView, locateHostElement, prefillHostVars, resetComponentState, setHostBindings } from './instructions';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { CONTEXT, HEADER_OFFSET, HOST, HOST_NODE, INJECTOR, TVIEW } from './interfaces/view';\nimport { getRootView, readElementValue, readPatchedLViewData, stringify } from './util';\n/** @type {?} */\nvar ROOT_EXPANDO_INSTRUCTIONS = [0, 1];\n/**\n * Options that control how the component should be bootstrapped.\n * @record\n */\nexport function CreateComponentOptions() { }\n/**\n * Which renderer factory to use.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.rendererFactory;\n/**\n * A custom sanitizer instance\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.sanitizer;\n/**\n * A custom animation player handler\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.playerHandler;\n/**\n * Host element on which the component will be bootstrapped. If not specified,\n * the component definition's `tag` is used to query the existing DOM for the\n * element to bootstrap.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.host;\n/**\n * Module injector for the component. If unspecified, the injector will be NULL_INJECTOR.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.injector;\n/**\n * List of features to be applied to the created component. Features are simply\n * functions that decorate a component with a certain behavior.\n *\n * Typically, the features in this list are features that cannot be added to the\n * other features list in the component definition because they rely on other factors.\n *\n * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n * to root components in a tree-shakable way. It cannot be added to the component\n * features list because there's no way of knowing when the component will be used as\n * a root component.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.hostFeatures;\n/**\n * A function which is used to schedule change detection work in the future.\n *\n * When marking components as dirty, it is necessary to schedule the work of\n * change detection in the future. This is done to coalesce multiple\n * {\\@link markDirty} calls into a single changed detection processing.\n *\n * The default value of the scheduler is the `requestAnimationFrame` function.\n *\n * It is also useful to override this function for testing purposes.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.scheduler;\n/** @typedef {?} */\nvar HostFeature;\n/** @type {?} */\nexport var NULL_INJECTOR = {\n    get: function (token, notFoundValue) {\n        throw new Error('NullInjector: Not found: ' + stringify(token));\n    }\n};\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nexport function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\n    if (opts === void 0) { opts = {}; }\n    ngDevMode && assertComponentType(componentType);\n    /** @type {?} */\n    var rendererFactory = opts.rendererFactory || domRendererFactory3;\n    /** @type {?} */\n    var sanitizer = opts.sanitizer || null;\n    /** @type {?} */\n    var componentDef = /** @type {?} */ ((getComponentDef(componentType)));\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    /** @type {?} */\n    var componentTag = /** @type {?} */ (((/** @type {?} */ ((componentDef.selectors))[0]))[0]);\n    /** @type {?} */\n    var hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    /** @type {?} */\n    var rootFlags = componentDef.onPush ? 4 /* Dirty */ | 64 /* IsRoot */ :\n        2 /* CheckAlways */ | 64 /* IsRoot */;\n    /** @type {?} */\n    var rootContext = createRootContext(opts.scheduler || requestAnimationFrame.bind(window), opts.playerHandler || null);\n    /** @type {?} */\n    var renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    /** @type {?} */\n    var rootView = createLViewData(renderer, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags);\n    rootView[INJECTOR] = opts.injector || null;\n    /** @type {?} */\n    var oldView = enterView(rootView, null);\n    /** @type {?} */\n    var component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        /** @type {?} */\n        var componentView = createRootComponentView(hostRNode, componentDef, rootView, renderer, sanitizer);\n        component = createRootComponent(hostRNode, componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        executeInitAndContentHooks();\n        detectChangesInternal(componentView, component);\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n * @param {?} rootView The parent view where the host node is stored\n * @param {?} renderer The current renderer\n * @param {?=} sanitizer The sanitizer, if provided\n *\n * @return {?} Component view created\n */\nexport function createRootComponentView(rNode, def, rootView, renderer, sanitizer) {\n    resetComponentState();\n    /** @type {?} */\n    var tView = rootView[TVIEW];\n    /** @type {?} */\n    var componentView = createLViewData(renderer, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery), null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */, sanitizer);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n    if (tView.firstTemplatePass) {\n        tView.expandoInstructions = ROOT_EXPANDO_INSTRUCTIONS.slice();\n        if (def.diPublic)\n            def.diPublic(def);\n        tNode.flags =\n            rootView.length << 15 /* DirectiveStartingIndexShift */ | 4096 /* isComponent */;\n    }\n    // Store component view at node index, with node as the HOST\n    componentView[HOST] = rootView[HEADER_OFFSET];\n    componentView[HOST_NODE] = /** @type {?} */ (tNode);\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n * @template T\n * @param {?} hostRNode\n * @param {?} componentView\n * @param {?} componentDef\n * @param {?} rootView\n * @param {?} rootContext\n * @param {?} hostFeatures\n * @return {?}\n */\nexport function createRootComponent(hostRNode, componentView, componentDef, rootView, rootContext, hostFeatures) {\n    /** @type {?} */\n    var component = baseDirectiveCreate(rootView.length, /** @type {?} */ (componentDef.factory()), componentDef, hostRNode);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n    if (rootView[TVIEW].firstTemplatePass)\n        prefillHostVars(componentDef.hostVars);\n    setHostBindings();\n    return component;\n}\n/**\n * @param {?} scheduler\n * @param {?=} playerHandler\n * @return {?}\n */\nexport function createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nexport function LifecycleHooksFeature(component, def) {\n    /** @type {?} */\n    var rootTView = /** @type {?} */ ((readPatchedLViewData(component)))[TVIEW];\n    /** @type {?} */\n    var dirIndex = rootTView.data.length - 1;\n    queueInitHooks(dirIndex, def.onInit, def.doCheck, rootTView);\n    queueLifecycleHooks(dirIndex << 15 /* DirectiveStartingIndexShift */ | 1, rootTView);\n}\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nfunction getRootContext(component) {\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (getRootView(component)[CONTEXT]);\n    ngDevMode && assertDefined(rootContext, 'rootContext');\n    return rootContext;\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @template T\n * @param {?} component Component for which the host element should be retrieved.\n * @return {?}\n */\nexport function getHostElement(component) {\n    return /** @type {?} */ (readElementValue(getComponentViewByInstance(component)));\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param {?} component The component to return the content text for.\n * @return {?}\n */\nexport function getRenderedText(component) {\n    /** @type {?} */\n    var hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component) {\n    return getRootContext(component).clean;\n}\n//# sourceMappingURL=component.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { fillProperties } from '../../util/property';\nimport { EMPTY, EMPTY_ARRAY } from '../definition';\n/**\n * Determines if a definition is a {\\@link ComponentDef} or a {\\@link DirectiveDef}\n * @template T\n * @param {?} definition The definition to examine\n * @return {?}\n */\nfunction isComponentDef(definition) {\n    /** @type {?} */\n    var def = /** @type {?} */ (definition);\n    return typeof def.template === 'function';\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param {?} definition The definition that is a SubClass of another directive of component\n * @return {?}\n */\nexport function InheritDefinitionFeature(definition) {\n    /** @type {?} */\n    var superType = getSuperType(definition.type);\n    var _loop_1 = function () {\n        /** @type {?} */\n        var superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngDirectiveDef;\n        }\n        /** @nocollapse @type {?} */\n        var baseDef = (/** @type {?} */ (superType)).ngBaseDef;\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        if (baseDef || superDef) {\n            /** @type {?} */\n            var writeableDef = /** @type {?} */ (definition);\n            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        }\n        if (baseDef) {\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            /** @type {?} */\n            var prevHostBindings_1 = definition.hostBindings;\n            /** @type {?} */\n            var superHostBindings_1 = superDef.hostBindings;\n            if (superHostBindings_1) {\n                if (prevHostBindings_1) {\n                    definition.hostBindings = function (directiveIndex, elementIndex) {\n                        superHostBindings_1(directiveIndex, elementIndex);\n                        prevHostBindings_1(directiveIndex, elementIndex);\n                    };\n                }\n                else {\n                    definition.hostBindings = superHostBindings_1;\n                }\n            }\n            // Merge View Queries\n            if (isComponentDef(definition) && isComponentDef(superDef)) {\n                /** @type {?} */\n                var prevViewQuery_1 = definition.viewQuery;\n                /** @type {?} */\n                var superViewQuery_1 = superDef.viewQuery;\n                if (superViewQuery_1) {\n                    if (prevViewQuery_1) {\n                        definition.viewQuery = function (rf, ctx) {\n                            superViewQuery_1(rf, ctx);\n                            prevViewQuery_1(rf, ctx);\n                        };\n                    }\n                    else {\n                        definition.viewQuery = superViewQuery_1;\n                    }\n                }\n            }\n            /** @type {?} */\n            var prevContentQueries_1 = definition.contentQueries;\n            /** @type {?} */\n            var superContentQueries_1 = superDef.contentQueries;\n            if (superContentQueries_1) {\n                if (prevContentQueries_1) {\n                    definition.contentQueries = function () {\n                        superContentQueries_1();\n                        prevContentQueries_1();\n                    };\n                }\n                else {\n                    definition.contentQueries = superContentQueries_1;\n                }\n            }\n            /** @type {?} */\n            var prevContentQueriesRefresh_1 = definition.contentQueriesRefresh;\n            /** @type {?} */\n            var superContentQueriesRefresh_1 = superDef.contentQueriesRefresh;\n            if (superContentQueriesRefresh_1) {\n                if (prevContentQueriesRefresh_1) {\n                    definition.contentQueriesRefresh = function (directiveIndex, queryIndex) {\n                        superContentQueriesRefresh_1(directiveIndex, queryIndex);\n                        prevContentQueriesRefresh_1(directiveIndex, queryIndex);\n                    };\n                }\n                else {\n                    definition.contentQueriesRefresh = superContentQueriesRefresh_1;\n                }\n            }\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            /** @type {?} */\n            var features = superDef.features;\n            if (features) {\n                for (var _i = 0, features_1 = features; _i < features_1.length; _i++) {\n                    var feature = features_1[_i];\n                    if (feature && feature !== InheritDefinitionFeature) {\n                        (/** @type {?} */ (feature))(definition);\n                    }\n                }\n            }\n            return \"break\";\n        }\n        else {\n            /** @type {?} */\n            var superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.afterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.afterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.afterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.afterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.doCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.onDestroy;\n                definition.onInit = definition.onInit || superPrototype.onInit;\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    };\n    while (superType) {\n        var state_1 = _loop_1();\n        if (state_1 === \"break\")\n            break;\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\n//# sourceMappingURL=inherit_definition_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SimpleChange } from '../../change_detection/change_detection_util';\n/** @type {?} */\nvar PRIVATE_PREFIX = '__ngOnChanges_';\n/** @typedef {?} */\nvar OnChangesExpando;\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n * @template T\n * @param {?} definition\n * @return {?}\n */\nexport function NgOnChangesFeature(definition) {\n    /** @type {?} */\n    var declaredToMinifiedInputs = definition.declaredInputs;\n    /** @type {?} */\n    var proto = definition.type.prototype;\n    var _loop_1 = function (declaredName) {\n        if (declaredToMinifiedInputs.hasOwnProperty(declaredName)) {\n            /** @type {?} */\n            var minifiedKey = declaredToMinifiedInputs[declaredName];\n            /** @type {?} */\n            var privateMinKey_1 = PRIVATE_PREFIX + minifiedKey;\n            /** @type {?} */\n            var originalProperty = undefined;\n            /** @type {?} */\n            var checkProto = proto;\n            while (!originalProperty && checkProto &&\n                Object.getPrototypeOf(checkProto) !== Object.getPrototypeOf(Object.prototype)) {\n                originalProperty = Object.getOwnPropertyDescriptor(checkProto, minifiedKey);\n                checkProto = Object.getPrototypeOf(checkProto);\n            }\n            /** @type {?} */\n            var getter = originalProperty && originalProperty.get;\n            /** @type {?} */\n            var setter_1 = originalProperty && originalProperty.set;\n            // create a getter and setter for property\n            Object.defineProperty(proto, minifiedKey, {\n                get: getter ||\n                    (setter_1 ? undefined : function () { return this[privateMinKey_1]; }),\n                set: /**\n                 * @template T\n                 * @this {?}\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) {\n                    /** @type {?} */\n                    var simpleChanges = this[PRIVATE_PREFIX];\n                    if (!simpleChanges) {\n                        simpleChanges = {};\n                        // Place where we will store SimpleChanges if there is a change\n                        Object.defineProperty(this, PRIVATE_PREFIX, { value: simpleChanges, writable: true });\n                    }\n                    /** @type {?} */\n                    var isFirstChange = !this.hasOwnProperty(privateMinKey_1);\n                    /** @type {?} */\n                    var currentChange = simpleChanges[declaredName];\n                    if (currentChange) {\n                        currentChange.currentValue = value;\n                    }\n                    else {\n                        simpleChanges[declaredName] =\n                            new SimpleChange(this[privateMinKey_1], value, isFirstChange);\n                    }\n                    if (isFirstChange) {\n                        // Create a place where the actual value will be stored and make it non-enumerable\n                        Object.defineProperty(this, privateMinKey_1, { value: value, writable: true });\n                    }\n                    else {\n                        this[privateMinKey_1] = value;\n                    }\n                    if (setter_1)\n                        setter_1.call(this, value);\n                },\n                // Make the property configurable in dev mode to allow overriding in tests\n                configurable: !!ngDevMode\n            });\n        }\n    };\n    for (var declaredName in declaredToMinifiedInputs) {\n        _loop_1(declaredName);\n    }\n    // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n    // so the call order is changes-init-check in creation mode. In subsequent\n    // change detection runs, only the check wrapper will be called.\n    if (definition.onInit != null) {\n        definition.onInit = onChangesWrapper(definition.onInit);\n    }\n    definition.doCheck = onChangesWrapper(definition.doCheck);\n}\n/**\n * @param {?} delegateHook\n * @return {?}\n */\nfunction onChangesWrapper(delegateHook) {\n    return function () {\n        /** @type {?} */\n        var simpleChanges = this[PRIVATE_PREFIX];\n        if (simpleChanges != null) {\n            this.ngOnChanges(simpleChanges);\n            this[PRIVATE_PREFIX] = null;\n        }\n        if (delegateHook)\n            delegateHook.apply(this);\n    };\n}\n//# sourceMappingURL=ng_onchanges_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getInjectableDef, getInjectorDef } from '../di/defs';\nimport { inject, setCurrentInjector } from '../di/injector';\nimport { assertDefined } from './assert';\nimport { getComponentDef, getDirectiveDef, getPipeDef } from './definition';\nimport { NG_ELEMENT_ID } from './fields';\nimport { _getViewData, getPreviousOrParentTNode, resolveDirective, setEnvironment } from './instructions';\nimport { PARENT_INJECTOR, TNODE, } from './interfaces/injector';\nimport { DECLARATION_VIEW, HOST_NODE, INJECTOR, TVIEW } from './interfaces/view';\nimport { assertNodeOfPossibleTypes } from './node_assert';\n/** *\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n  @type {?} */\nvar BLOOM_SIZE = 256;\n/** @type {?} */\nvar BLOOM_MASK = BLOOM_SIZE - 1;\n/** *\n * Counter used to generate unique IDs for directives.\n  @type {?} */\nvar nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injectorIndex The index of the node injector where this token should be registered\n * @param {?} tView The TView for the injector's bloom filters\n * @param {?} type The directive token to register\n * @return {?}\n */\nexport function bloomAdd(injectorIndex, tView, type) {\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        var id = (/** @type {?} */ (type))[NG_ELEMENT_ID];\n        // Set a unique ID on the directive type, so if something tries to inject the directive,\n        // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n        if (id == null) {\n            id = (/** @type {?} */ (type))[NG_ELEMENT_ID] = nextNgElementId++;\n        }\n        /** @type {?} */\n        var bloomBit = id & BLOOM_MASK;\n        /** @type {?} */\n        var mask = 1 << bloomBit;\n        /** @type {?} */\n        var b7 = bloomBit & 0x80;\n        /** @type {?} */\n        var b6 = bloomBit & 0x40;\n        /** @type {?} */\n        var b5 = bloomBit & 0x20;\n        /** @type {?} */\n        var tData = /** @type {?} */ (tView.data);\n        if (b7) {\n            b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n                (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n        }\n        else {\n            b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n                (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n        }\n    }\n}\n/**\n * @return {?}\n */\nexport function getOrCreateNodeInjector() {\n    return getOrCreateNodeInjectorForNode(/** @type {?} */ (getPreviousOrParentTNode()), _getViewData());\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} tNode for which an injector should be retrieved / created.\n * @param {?} hostView View where the node is stored\n * @return {?} Node injector\n */\nexport function getOrCreateNodeInjectorForNode(tNode, hostView) {\n    /** @type {?} */\n    var existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    /** @type {?} */\n    var tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        setUpBloom(tView.data, tNode); // foundation for node bloom\n        setUpBloom(hostView, null); // foundation for cumulative bloom\n        setUpBloom(tView.blueprint, null);\n    }\n    /** @type {?} */\n    var parentLoc = getParentInjectorLocation(tNode, hostView);\n    /** @type {?} */\n    var parentIndex = parentLoc & 32767 /* InjectorIndexMask */;\n    /** @type {?} */\n    var parentView = getParentInjectorView(parentLoc, hostView);\n    /** @type {?} */\n    var parentData = /** @type {?} */ (parentView[TVIEW].data);\n    /** @type {?} */\n    var injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (parentLoc !== -1) {\n        for (var i = 0; i < PARENT_INJECTOR; i++) {\n            /** @type {?} */\n            var bloomIndex = parentIndex + i;\n            // Creates a cumulative bloom filter that merges the parent's bloom filter\n            // and its own cumulative bloom (which contains tokens for all ancestors)\n            hostView[injectorIndex + i] = parentView[bloomIndex] | parentData[bloomIndex];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\n/**\n * @param {?} arr\n * @param {?} footer\n * @return {?}\n */\nfunction setUpBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nexport function getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nexport function getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return tNode.parent.injectorIndex; // view offset is 0\n    }\n    /** @type {?} */\n    var hostTNode = view[HOST_NODE];\n    /** @type {?} */\n    var viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = /** @type {?} */ ((view[DECLARATION_VIEW]));\n        hostTNode = /** @type {?} */ ((view[HOST_NODE]));\n        viewOffset++;\n    }\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 15 /* ViewOffsetShift */) :\n        -1;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LViewData instance from which to start walking up the view tree\n * @return {?} The LViewData instance that contains the parent injector\n */\nexport function getParentInjectorView(location, startView) {\n    /** @type {?} */\n    var viewOffset = location >> 15 /* ViewOffsetShift */;\n    /** @type {?} */\n    var parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = /** @type {?} */ ((parentView[DECLARATION_VIEW]));\n        viewOffset--;\n    }\n    return parentView;\n}\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param {?} injectorIndex\n * @param {?} view\n * @param {?} def The definition of the directive to be made public\n * @return {?}\n */\nexport function diPublicInInjector(injectorIndex, view, def) {\n    bloomAdd(injectorIndex, view[TVIEW], def.type);\n}\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param {?} def The definition of the directive to be made public\n * @return {?}\n */\nexport function diPublic(def) {\n    diPublicInInjector(getOrCreateNodeInjector(), _getViewData(), def);\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function directiveInject(token, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    /** @type {?} */\n    var hostTNode = /** @type {?} */ (getPreviousOrParentTNode());\n    return getOrCreateInjectable(hostTNode, _getViewData(), token, flags);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@experimental\n * @param {?} attrNameToInject\n * @return {?}\n */\nexport function injectAttribute(attrNameToInject) {\n    /** @type {?} */\n    var tNode = getPreviousOrParentTNode();\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    /** @type {?} */\n    var attrs = tNode.attrs;\n    if (attrs) {\n        for (var i = 0; i < attrs.length; i = i + 2) {\n            /** @type {?} */\n            var attrName = attrs[i];\n            if (attrName === 1 /* SelectOnly */)\n                break;\n            if (attrName == attrNameToInject) {\n                return /** @type {?} */ (attrs[i + 1]);\n            }\n        }\n    }\n    return undefined;\n}\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * @template T\n * @param {?} hostTNode\n * @param {?} hostView\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @return {?} the value from the injector or `null` when not found\n */\nexport function getOrCreateInjectable(hostTNode, hostView, token, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    /** @type {?} */\n    var bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function')\n        return bloomHash();\n    // If the token has a bloom hash, then it is a directive that is public to the injection system\n    // (diPublic) otherwise fall back to the module injector.\n    if (bloomHash != null) {\n        /** @type {?} */\n        var startInjectorIndex = getInjectorIndex(hostTNode, hostView);\n        /** @type {?} */\n        var injectorIndex = startInjectorIndex;\n        /** @type {?} */\n        var injectorView = hostView;\n        /** @type {?} */\n        var parentLocation = -1;\n        // If we should skip this injector or if an injector doesn't exist on this node (e.g. all\n        // directives on this node are private), start by searching the parent injector.\n        if (flags & 4 /* SkipSelf */ || injectorIndex === -1) {\n            parentLocation = injectorIndex === -1 ? getParentInjectorLocation(hostTNode, hostView) :\n                injectorView[injectorIndex + PARENT_INJECTOR];\n            if (shouldNotSearchParent(flags, parentLocation)) {\n                injectorIndex = -1;\n            }\n            else {\n                injectorIndex = parentLocation & 32767 /* InjectorIndexMask */;\n                injectorView = getParentInjectorView(parentLocation, injectorView);\n            }\n        }\n        while (injectorIndex !== -1) {\n            // Traverse up the injector tree until we find a potential match or until we know there\n            // *isn't* a match. Outer loop is necessary in case we get a false positive injector.\n            while (injectorIndex !== -1) {\n                // Check the current injector. If it matches, stop searching for an injector.\n                if (injectorHasToken(bloomHash, injectorIndex, injectorView[TVIEW].data)) {\n                    break;\n                }\n                parentLocation = injectorView[injectorIndex + PARENT_INJECTOR];\n                if (shouldNotSearchParent(flags, parentLocation)) {\n                    injectorIndex = -1;\n                    break;\n                }\n                // If the ancestor bloom filter value has the bit corresponding to the directive, traverse\n                // up to find the specific injector. If the ancestor bloom filter does not have the bit, we\n                // can abort.\n                if (injectorHasToken(bloomHash, injectorIndex, injectorView)) {\n                    injectorIndex = parentLocation & 32767 /* InjectorIndexMask */;\n                    injectorView = getParentInjectorView(parentLocation, injectorView);\n                }\n                else {\n                    injectorIndex = -1;\n                    break;\n                }\n            }\n            // If no injector is found, we *know* that there is no ancestor injector that contains the\n            // token, so we abort.\n            if (injectorIndex === -1) {\n                break;\n            }\n            /** @type {?} */\n            var instance = void 0;\n            if (instance = searchDirectivesOnInjector(injectorIndex, injectorView, token)) {\n                return instance;\n            }\n            // If we *didn't* find the directive for the token and we are searching the current node's\n            // injector, it's possible the directive is on this node and hasn't been created yet.\n            if (injectorIndex === startInjectorIndex && hostView === injectorView &&\n                (instance = searchMatchesQueuedForCreation(token, injectorView[TVIEW]))) {\n                return instance;\n            }\n            // The def wasn't found anywhere on this node, so it was a false positive.\n            // Traverse up the tree and continue searching.\n            injectorIndex = parentLocation & 32767 /* InjectorIndexMask */;\n            injectorView = getParentInjectorView(parentLocation, injectorView);\n        }\n    }\n    /** @type {?} */\n    var moduleInjector = hostView[INJECTOR];\n    /** @type {?} */\n    var formerInjector = setCurrentInjector(moduleInjector);\n    try {\n        return inject(token, flags);\n    }\n    finally {\n        setCurrentInjector(formerInjector);\n    }\n}\n/**\n * @template T\n * @param {?} token\n * @param {?} hostTView\n * @return {?}\n */\nfunction searchMatchesQueuedForCreation(token, hostTView) {\n    /** @type {?} */\n    var matches = hostTView.currentMatches;\n    if (matches) {\n        for (var i = 0; i < matches.length; i += 2) {\n            /** @type {?} */\n            var def = /** @type {?} */ (matches[i]);\n            if (def.type === token) {\n                return resolveDirective(def, i + 1, matches);\n            }\n        }\n    }\n    return null;\n}\n/**\n * @template T\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @param {?} token\n * @return {?}\n */\nfunction searchDirectivesOnInjector(injectorIndex, injectorView, token) {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (injectorView[TVIEW].data[injectorIndex + TNODE]);\n    /** @type {?} */\n    var nodeFlags = tNode.flags;\n    /** @type {?} */\n    var count = nodeFlags & 4095 /* DirectiveCountMask */;\n    if (count !== 0) {\n        /** @type {?} */\n        var start = nodeFlags >> 15 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var end = start + count;\n        /** @type {?} */\n        var defs = injectorView[TVIEW].data;\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var directiveDef = /** @type {?} */ (defs[i]);\n            if (directiveDef.type === token && directiveDef.diPublic) {\n                return injectorView[i];\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n */\nexport function bloomHashBitOrFactory(token) {\n    /** @type {?} */\n    var tokenId = (/** @type {?} */ (token))[NG_ELEMENT_ID];\n    return typeof tokenId === 'number' ? tokenId & BLOOM_MASK : tokenId;\n}\n/**\n * @param {?} bloomHash\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @return {?}\n */\nexport function injectorHasToken(bloomHash, injectorIndex, injectorView) {\n    /** @type {?} */\n    var mask = 1 << bloomHash;\n    /** @type {?} */\n    var b7 = bloomHash & 0x80;\n    /** @type {?} */\n    var b6 = bloomHash & 0x40;\n    /** @type {?} */\n    var b5 = bloomHash & 0x20;\n    /** @type {?} */\n    var value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/**\n * Returns true if flags prevent parent injector from being searched for tokens\n * @param {?} flags\n * @param {?} parentLocation\n * @return {?}\n */\nfunction shouldNotSearchParent(flags, parentLocation) {\n    return flags & 2 /* Self */ ||\n        (flags & 1 /* Host */ && (parentLocation >> 15 /* ViewOffsetShift */) > 0);\n}\nvar NodeInjector = /** @class */ (function () {\n    function NodeInjector(_tNode, _hostView) {\n        this._tNode = _tNode;\n        this._hostView = _hostView;\n        this._injectorIndex = getOrCreateNodeInjectorForNode(_tNode, _hostView);\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    NodeInjector.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        setEnvironment(this._tNode, this._hostView);\n        return getOrCreateInjectable(this._tNode, this._hostView, token);\n    };\n    return NodeInjector;\n}());\nexport { NodeInjector };\nif (false) {\n    /** @type {?} */\n    NodeInjector.prototype._injectorIndex;\n    /** @type {?} */\n    NodeInjector.prototype._tNode;\n    /** @type {?} */\n    NodeInjector.prototype._hostView;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getFactoryOf(type) {\n    /** @type {?} */\n    var typeAny = /** @type {?} */ (type);\n    /** @type {?} */\n    var def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getInheritedFactory(type) {\n    /** @type {?} */\n    var proto = /** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor);\n    /** @type {?} */\n    var factory = getFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return function (t) { return new t(); };\n    }\n}\n//# sourceMappingURL=di.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { stringify } from '../util';\nimport { ComponentFactory } from './component_factory';\n/**\n * @param {?} component\n * @return {?}\n */\nexport function noComponentFactoryError(component) {\n    /** @type {?} */\n    var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n    (/** @type {?} */ (error))[ERROR_COMPONENT] = component;\n    return error;\n}\n/** @type {?} */\nvar ERROR_COMPONENT = 'ngComponent';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getComponent(error) {\n    return (/** @type {?} */ (error))[ERROR_COMPONENT];\n}\nvar _NullComponentFactoryResolver = /** @class */ (function () {\n    function _NullComponentFactoryResolver() {\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        throw noComponentFactoryError(component);\n    };\n    return _NullComponentFactoryResolver;\n}());\n/**\n * @abstract\n */\nvar ComponentFactoryResolver = /** @class */ (function () {\n    function ComponentFactoryResolver() {\n    }\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n    return ComponentFactoryResolver;\n}());\nexport { ComponentFactoryResolver };\nif (false) {\n    /** @type {?} */\n    ComponentFactoryResolver.NULL;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n}\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (var i = 0; i < factories.length; i++) {\n            /** @type {?} */\n            var factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        /** @type {?} */\n        var factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    };\n    return CodegenComponentFactoryResolver;\n}());\nexport { CodegenComponentFactoryResolver };\nif (false) {\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._factories;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._parent;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._ngModule;\n}\n/**\n * @template C\n */\nvar /**\n * @template C\n */\nComponentFactoryBoundToModule = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryBoundToModule, _super);\n    function ComponentFactoryBoundToModule(factory, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.factory = factory;\n        _this.ngModule = ngModule;\n        _this.selector = factory.selector;\n        _this.componentType = factory.componentType;\n        _this.ngContentSelectors = factory.ngContentSelectors;\n        _this.inputs = factory.inputs;\n        _this.outputs = factory.outputs;\n        return _this;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactoryBoundToModule.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    };\n    return ComponentFactoryBoundToModule;\n}(ComponentFactory));\n/**\n * @template C\n */\nexport { ComponentFactoryBoundToModule };\nif (false) {\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.selector;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.componentType;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.inputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.outputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.factory;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngModule;\n}\n//# sourceMappingURL=component_factory_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { checkNoChanges, checkNoChangesInRootView, detectChanges, detectChangesInRootView, getRendererFactory, markViewDirty, storeCleanupFn, viewAttached } from './instructions';\nimport { FLAGS, PARENT } from './interfaces/view';\nimport { destroyLView } from './node_manipulation';\n/**\n * @record\n */\nexport function viewEngine_ChangeDetectorRef_interface() { }\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nViewRef = /** @class */ (function () {\n    function ViewRef(_view, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * \\@internal\n         */\n        this._tViewNode = null;\n        this._view = _view;\n    }\n    Object.defineProperty(ViewRef.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._context ? this._context : this._lookUpContext(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return (this._view[FLAGS] & 32 /* Destroyed */) === 32 /* Destroyed */;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._viewContainerRef && viewAttached(this._view)) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._view);\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { storeCleanupFn(this._view, callback); };\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.markForCheck = /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { markViewDirty(this._view); };\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.detach = /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view[FLAGS] &= ~8 /* Attached */; };\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.reattach = /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view[FLAGS] |= 8 /* Attached */; };\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    ViewRef.prototype.detectChanges = /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var rendererFactory = getRendererFactory();\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        detectChanges(this.context);\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n    };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    ViewRef.prototype.checkNoChanges = /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    function () { checkNoChanges(this.context); };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) { this._viewContainerRef = vcRef; };\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () { this._appRef = null; };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) { this._appRef = appRef; };\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype._lookUpContext = /**\n     * @return {?}\n     */\n    function () {\n        return this._context = /** @type {?} */ (((this._view[PARENT]))[this._componentIndex]);\n    };\n    return ViewRef;\n}());\n/**\n * @template T\n */\nexport { ViewRef };\nif (false) {\n    /** @type {?} */\n    ViewRef.prototype._appRef;\n    /** @type {?} */\n    ViewRef.prototype._viewContainerRef;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._view;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._tViewNode;\n    /** @type {?} */\n    ViewRef.prototype.rootNodes;\n    /** @type {?} */\n    ViewRef.prototype._context;\n    /** @type {?} */\n    ViewRef.prototype._componentIndex;\n}\n/**\n * \\@internal\n * @template T\n */\nvar /**\n * \\@internal\n * @template T\n */\nRootViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(RootViewRef, _super);\n    function RootViewRef(_view) {\n        var _this = _super.call(this, _view, null, -1) || this;\n        _this._view = _view;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RootViewRef.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () { detectChangesInRootView(this._view); };\n    /**\n     * @return {?}\n     */\n    RootViewRef.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { checkNoChangesInRootView(this._view); };\n    return RootViewRef;\n}(ViewRef));\n/**\n * \\@internal\n * @template T\n */\nexport { RootViewRef };\nif (false) {\n    /** @type {?} */\n    RootViewRef.prototype._view;\n}\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NullInjector } from '../di/injector';\nimport { NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { assertDefined, assertGreaterThan, assertLessThan } from './assert';\nimport { NodeInjector, getParentInjectorLocation, getParentInjectorView } from './di';\nimport { _getViewData, addToViewTree, createEmbeddedViewAndNode, createLContainer, getPreviousOrParentTNode, getRenderer, renderEmbeddedTemplate } from './instructions';\nimport { ACTIVE_INDEX, NATIVE, VIEWS } from './interfaces/container';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { CONTEXT, HOST_NODE, QUERIES, RENDERER, TVIEW } from './interfaces/view';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { addRemoveViewFromContainer, appendChild, detachView, findComponentView, getBeforeNodeForView, insertView, removeView } from './node_manipulation';\nimport { getComponentViewByIndex, getNativeByTNode, isComponent, isLContainer } from './util';\nimport { ViewRef } from './view_ref';\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @param {?} ElementRefToken\n * @return {?} The ElementRef instance to use\n */\nexport function injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), _getViewData());\n}\n/** @type {?} */\nvar R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} tNode The node for which you'd like an ElementRef\n * @param {?} view The view to which the node belongs\n * @return {?} The ElementRef instance to use\n */\nexport function createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = /** @class */ (function (_super) {\n            tslib_1.__extends(ElementRef_, _super);\n            function ElementRef_() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            return ElementRef_;\n        }(ElementRefToken));\n    }\n    return new R3ElementRef(getNativeByTNode(tNode, view));\n}\n/** @type {?} */\nvar R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @template T\n * @param {?} TemplateRefToken\n * @param {?} ElementRefToken\n * @return {?} The TemplateRef instance to use\n */\nexport function injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), _getViewData());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @template T\n * @param {?} TemplateRefToken The TemplateRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a TemplateRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The TemplateRef instance to use\n */\nexport function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = /** @class */ (function (_super) {\n            tslib_1.__extends(TemplateRef_, _super);\n            function TemplateRef_(_declarationParentView, elementRef, _tView, _renderer, _queries, _injectorIndex) {\n                var _this = _super.call(this) || this;\n                _this._declarationParentView = _declarationParentView;\n                _this.elementRef = elementRef;\n                _this._tView = _tView;\n                _this._renderer = _renderer;\n                _this._queries = _queries;\n                _this._injectorIndex = _injectorIndex;\n                return _this;\n            }\n            /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} hostTNode\n             * @param {?=} hostView\n             * @param {?=} index\n             * @return {?}\n             */\n            TemplateRef_.prototype.createEmbeddedView = /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} hostTNode\n             * @param {?=} hostView\n             * @param {?=} index\n             * @return {?}\n             */\n            function (context, container, hostTNode, hostView, index) {\n                /** @type {?} */\n                var lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._renderer, this._queries, this._injectorIndex);\n                if (container) {\n                    insertView(lView, container, /** @type {?} */ ((hostView)), /** @type {?} */ ((index)), /** @type {?} */ ((hostTNode)).index);\n                }\n                renderEmbeddedTemplate(lView, this._tView, context, 1 /* Create */);\n                /** @type {?} */\n                var viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = /** @type {?} */ (lView[HOST_NODE]);\n                return viewRef;\n            };\n            return TemplateRef_;\n        }(TemplateRefToken));\n    }\n    /** @type {?} */\n    var hostContainer = hostView[hostTNode.index];\n    ngDevMode && assertNodeType(hostTNode, 0 /* Container */);\n    ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n    return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), /** @type {?} */ (hostTNode.tViews), getRenderer(), hostContainer[QUERIES], hostTNode.injectorIndex);\n}\n/** @type {?} */\nvar R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} ViewContainerRefToken\n * @param {?} ElementRefToken\n * @return {?} The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    /** @type {?} */\n    var previousTNode = /** @type {?} */ (getPreviousOrParentTNode());\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, _getViewData());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param {?} ViewContainerRefToken The ViewContainerRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a ViewContainerRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The ViewContainerRef instance to use\n */\nexport function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = /** @class */ (function (_super) {\n            tslib_1.__extends(ViewContainerRef_, _super);\n            function ViewContainerRef_(_lContainer, _hostTNode, _hostView) {\n                var _this = _super.call(this) || this;\n                _this._lContainer = _lContainer;\n                _this._hostTNode = _hostTNode;\n                _this._hostView = _hostView;\n                _this._viewRefs = [];\n                return _this;\n            }\n            Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n                get: /**\n                 * @return {?}\n                 */\n                function () {\n                    return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n                get: /**\n                 * @return {?}\n                 */\n                function () { return new NodeInjector(this._hostTNode, this._hostView); },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n                /** @deprecated No replacement */\n                get: /**\n                 * @deprecated No replacement\n                 * @return {?}\n                 */\n                function () {\n                    /** @type {?} */\n                    var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                    /** @type {?} */\n                    var parentView = getParentInjectorView(parentLocation, this._hostView);\n                    /** @type {?} */\n                    var parentIndex = parentLocation & 32767 /* InjectorIndexMask */;\n                    /** @type {?} */\n                    var parentTNode = /** @type {?} */ (parentView[TVIEW].data[parentIndex]);\n                    return parentLocation === -1 ? new NullInjector() :\n                        new NodeInjector(parentTNode, parentView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.clear = /**\n             * @return {?}\n             */\n            function () {\n                while (this._lContainer[VIEWS].length) {\n                    this.remove(0);\n                }\n            };\n            /**\n             * @param {?} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.get = /**\n             * @param {?} index\n             * @return {?}\n             */\n            function (index) { return this._viewRefs[index] || null; };\n            Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n                get: /**\n                 * @return {?}\n                 */\n                function () { return this._lContainer[VIEWS].length; },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.createEmbeddedView = /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            function (templateRef, context, index) {\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index);\n                /** @type {?} */\n                var viewRef = (/** @type {?} */ (templateRef))\n                    .createEmbeddedView(context || /** @type {?} */ ({}), this._lContainer, this._hostTNode, this._hostView, adjustedIdx);\n                (/** @type {?} */ (viewRef)).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.createComponent = /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                /** @type {?} */\n                var contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && contextInjector) {\n                    ngModuleRef = contextInjector.get(viewEngine_NgModuleRef, null);\n                }\n                /** @type {?} */\n                var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            };\n            /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.insert = /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            function (viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                var lView = /** @type {?} */ (((/** @type {?} */ (viewRef))._view));\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index);\n                insertView(lView, this._lContainer, this._hostView, adjustedIdx, this._hostTNode.index);\n                /** @type {?} */\n                var beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                (/** @type {?} */ (viewRef)).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.move = /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            function (viewRef, newIndex) {\n                /** @type {?} */\n                var index = this.indexOf(viewRef);\n                this.detach(index);\n                this.insert(viewRef, this._adjustIndex(newIndex));\n                return viewRef;\n            };\n            /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.indexOf = /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            function (viewRef) { return this._viewRefs.indexOf(viewRef); };\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.remove = /**\n             * @param {?=} index\n             * @return {?}\n             */\n            function (index) {\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, this._hostTNode, adjustedIdx);\n                this._viewRefs.splice(adjustedIdx, 1);\n            };\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.detach = /**\n             * @param {?=} index\n             * @return {?}\n             */\n            function (index) {\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index, -1);\n                detachView(this._lContainer, adjustedIdx, !!this._hostTNode.detached);\n                return this._viewRefs.splice(adjustedIdx, 1)[0] || null;\n            };\n            /**\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            ViewContainerRef_.prototype._adjustIndex = /**\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            function (index, shift) {\n                if (shift === void 0) { shift = 0; }\n                if (index == null) {\n                    return this._lContainer[VIEWS].length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n                }\n                return index;\n            };\n            return ViewContainerRef_;\n        }(ViewContainerRefToken));\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    /** @type {?} */\n    var lContainer;\n    /** @type {?} */\n    var slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        /** @type {?} */\n        var comment = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostTNode, hostView, comment, true);\n        appendChild(comment, hostTNode, hostView);\n        addToViewTree(hostView, /** @type {?} */ (hostTNode.index), lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nexport function injectChangeDetectorRef() {\n    return createViewRef(getPreviousOrParentTNode(), _getViewData(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param {?} hostTNode The node that is requesting a ChangeDetectorRef\n * @param {?} hostView The view to which the node belongs\n * @param {?} context The context for this change detector ref\n * @return {?} The ChangeDetectorRef to use\n */\nexport function createViewRef(hostTNode, hostView, context) {\n    if (isComponent(hostTNode)) {\n        /** @type {?} */\n        var componentIndex = hostTNode.flags >> 15 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, context, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */) {\n        /** @type {?} */\n        var hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return /** @type {?} */ ((null));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getOrCreateRenderer2(view) {\n    /** @type {?} */\n    var renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return /** @type {?} */ (renderer);\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/**\n * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)\n * @return {?}\n */\nexport function injectRenderer2() {\n    return getOrCreateRenderer2(_getViewData());\n}\n//# sourceMappingURL=view_engine_compatibility.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ivyOn from './ivy_switch_on';\n/**\n * @param {...?} tokens\n * @return {?}\n */\nfunction noopFactory() {\n    var tokens = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        tokens[_i] = arguments[_i];\n    }\n}\n/** @typedef {?} */\nvar FactoryFunction;\n/** @type {?} */\nexport var R3_ELEMENT_REF_FACTORY__POST_NGCC__ = ivyOn.R3_ELEMENT_REF_FACTORY;\n/** @type {?} */\nexport var R3_TEMPLATE_REF_FACTORY__POST_NGCC__ = ivyOn.R3_TEMPLATE_REF_FACTORY;\n/** @type {?} */\nexport var R3_CHANGE_DETECTOR_REF_FACTORY__POST_NGCC__ = ivyOn.R3_CHANGE_DETECTOR_REF_FACTORY;\n/** @type {?} */\nexport var R3_VIEW_CONTAINER_REF_FACTORY__POST_NGCC__ = ivyOn.R3_VIEW_CONTAINER_REF_FACTORY;\n/** @type {?} */\nexport var R3_RENDERER2_FACTORY__POST_NGCC__ = ivyOn.R3_RENDERER2_FACTORY;\n/** @type {?} */\nexport var R3_ELEMENT_REF_FACTORY__PRE_NGCC__ = noopFactory;\n/** @type {?} */\nexport var R3_TEMPLATE_REF_FACTORY__PRE_NGCC__ = noopFactory;\n/** @type {?} */\nexport var R3_CHANGE_DETECTOR_REF_FACTORY__PRE_NGCC__ = noopFactory;\n/** @type {?} */\nexport var R3_VIEW_CONTAINER_REF_FACTORY__PRE_NGCC__ = noopFactory;\n/** @type {?} */\nexport var R3_RENDERER2_FACTORY__PRE_NGCC__ = noopFactory;\n/** @type {?} */\nexport var R3_ELEMENT_REF_FACTORY = R3_ELEMENT_REF_FACTORY__PRE_NGCC__;\n/** @type {?} */\nexport var R3_TEMPLATE_REF_FACTORY = R3_TEMPLATE_REF_FACTORY__PRE_NGCC__;\n/** @type {?} */\nexport var R3_CHANGE_DETECTOR_REF_FACTORY = R3_CHANGE_DETECTOR_REF_FACTORY__PRE_NGCC__;\n/** @type {?} */\nexport var R3_VIEW_CONTAINER_REF_FACTORY = R3_VIEW_CONTAINER_REF_FACTORY__PRE_NGCC__;\n/** @type {?} */\nexport var R3_RENDERER2_FACTORY = R3_RENDERER2_FACTORY__PRE_NGCC__;\n//# sourceMappingURL=legacy.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { R3_ELEMENT_REF_FACTORY } from '../ivy_switch/runtime/index';\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n *\n * @template T\n */\nvar ElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    /**\n     * \\@internal\n     */\n    ElementRef.__NG_ELEMENT_ID__ = function () { return R3_ELEMENT_REF_FACTORY(ElementRef); };\n    return ElementRef;\n}());\nexport { ElementRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ElementRef.__NG_ELEMENT_ID__;\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {\\@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     *\n     * @type {?}\n     */\n    ElementRef.prototype.nativeElement;\n}\n//# sourceMappingURL=element_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { R3_RENDERER2_FACTORY } from '../ivy_switch/runtime/index';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nvar /**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nRenderComponentType = /** @class */ (function () {\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n    return RenderComponentType;\n}());\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nexport { RenderComponentType };\nif (false) {\n    /** @type {?} */\n    RenderComponentType.prototype.id;\n    /** @type {?} */\n    RenderComponentType.prototype.templateUrl;\n    /** @type {?} */\n    RenderComponentType.prototype.slotCount;\n    /** @type {?} */\n    RenderComponentType.prototype.encapsulation;\n    /** @type {?} */\n    RenderComponentType.prototype.styles;\n    /** @type {?} */\n    RenderComponentType.prototype.animations;\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nvar /**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nRenderDebugInfo = /** @class */ (function () {\n    function RenderDebugInfo() {\n    }\n    return RenderDebugInfo;\n}());\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nexport { RenderDebugInfo };\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.source = function () { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @record\n */\nexport function DirectRenderer() { }\n/** @type {?} */\nDirectRenderer.prototype.remove;\n/** @type {?} */\nDirectRenderer.prototype.appendChild;\n/** @type {?} */\nDirectRenderer.prototype.insertBefore;\n/** @type {?} */\nDirectRenderer.prototype.nextSibling;\n/** @type {?} */\nDirectRenderer.prototype.parentElement;\n/**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nvar /**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nRenderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    return Renderer;\n}());\n/**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nexport { Renderer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @return {?}\n     */\n    Renderer.prototype.createViewRoot = function (hostElement) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} value\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.detachView = function (viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listen = function (renderElement, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listenGlobal = function (target, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} attributeName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?=} args\n     * @return {?}\n     */\n    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    Renderer.prototype.setText = function (renderNode, text) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n}\n/** @type {?} */\nexport var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nvar /**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nRootRenderer = /** @class */ (function () {\n    function RootRenderer() {\n    }\n    return RootRenderer;\n}());\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nexport { RootRenderer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} componentType\n     * @return {?}\n     */\n    RootRenderer.prototype.renderComponent = function (componentType) { };\n}\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n * \\@experimental\n * @record\n */\nexport function RendererType2() { }\n/**\n * A unique identifying string for the new renderer, used when creating\n * unique styles for encapsulation.\n * @type {?}\n */\nRendererType2.prototype.id;\n/**\n * The view encapsulation type, which determines how styles are applied to\n * DOM elements. One of\n * - `Emulated` (default): Emulate native scoping of styles.\n * - `Native`: Use the native encapsulation mechanism of the renderer.\n * - `ShadowDom`: Use modern [Shadow\n * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n * create a ShadowRoot for component's host element.\n * - `None`: Do not provide any template or style encapsulation.\n * @type {?}\n */\nRendererType2.prototype.encapsulation;\n/**\n * Defines CSS styles to be stored on a renderer instance.\n * @type {?}\n */\nRendererType2.prototype.styles;\n/**\n * Defines arbitrary developer-defined data to be stored on a renderer instance.\n * This is useful for renderers that delegate to other renderers.\n * @type {?}\n */\nRendererType2.prototype.data;\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@experimental\n * @abstract\n */\nRendererFactory2 = /** @class */ (function () {\n    function RendererFactory2() {\n    }\n    return RendererFactory2;\n}());\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@experimental\n * @abstract\n */\nexport { RendererFactory2 };\nif (false) {\n    /**\n     * Creates and initializes a custom renderer for a host DOM element.\n     * @abstract\n     * @param {?} hostElement The element to render.\n     * @param {?} type The base class to implement.\n     * @return {?} The new custom renderer instance.\n     */\n    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };\n    /**\n     * A callback invoked when rendering has begun.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.begin = function () { };\n    /**\n     * A callback invoked when rendering has completed.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.end = function () { };\n    /**\n     * Use with animations test-only mode. Notifies the test when rendering has completed.\n     * @abstract\n     * @return {?} The asynchronous result of the developer-defined function.\n     */\n    RendererFactory2.prototype.whenRenderingDone = function () { };\n}\n/** @enum {number} */\nvar RendererStyleFlags2 = {\n    /**\n       * Marks a style as important.\n       */\n    Important: 1,\n    /**\n       * Marks a style as using dash case naming (this-is-dash-case).\n       */\n    DashCase: 2,\n};\nexport { RendererStyleFlags2 };\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@experimental\n * @abstract\n */\nvar Renderer2 = /** @class */ (function () {\n    function Renderer2() {\n    }\n    /**\n     * \\@internal\n     */\n    Renderer2.__NG_ELEMENT_ID__ = function () { return R3_RENDERER2_FACTORY(); };\n    return Renderer2;\n}());\nexport { Renderer2 };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Renderer2.__NG_ELEMENT_ID__;\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?}\n     */\n    Renderer2.prototype.destroyNode;\n    /**\n     * Use to store arbitrary developer-defined data on a renderer instance,\n     * as an object containing key-value pairs.\n     * This is useful for renderers that delegate to other renderers.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.data = function () { };\n    /**\n     * Implement this callback to destroy the renderer or the host element.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.destroy = function () { };\n    /**\n     * Implement this callback to create an instance of the host element.\n     * @abstract\n     * @param {?} name An identifying name for the new element, unique within the namespace.\n     * @param {?=} namespace The namespace for the new element.\n     * @return {?} The new element.\n     */\n    Renderer2.prototype.createElement = function (name, namespace) { };\n    /**\n     * Implement this callback to add a comment to the DOM of the host element.\n     * @abstract\n     * @param {?} value The comment text.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createComment = function (value) { };\n    /**\n     * Implement this callback to add text to the DOM of the host element.\n     * @abstract\n     * @param {?} value The text string.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createText = function (value) { };\n    /**\n     * Appends a child to a given parent node in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child node.\n     * @return {?}\n     */\n    Renderer2.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * Implement this callback to insert a child node at a given position in a parent node\n     * in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child nodes.\n     * @param {?} refChild The existing child node that should precede the new node.\n     * @return {?}\n     */\n    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * Implement this callback to remove a child node from the host element's DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} oldChild The child node to remove.\n     * @return {?}\n     */\n    Renderer2.prototype.removeChild = function (parent, oldChild) { };\n    /**\n     * Implement this callback to prepare an element to be bootstrapped\n     * as a root element, and return the element instance.\n     * @abstract\n     * @param {?} selectorOrNode The DOM element.\n     * @param {?=} preserveContent Whether the contents of the root element\n     * should be preserved, or cleared upon bootstrap (default behavior).\n     * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n     * content projection via `<slot>` elements.\n     * @return {?} The root element.\n     */\n    Renderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) { };\n    /**\n     * Implement this callback to get the parent of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node The child node to query.\n     * @return {?} The parent node, or null if there is no parent.\n     * For WebWorkers, always returns true.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.parentNode = function (node) { };\n    /**\n     * Implement this callback to get the next sibling node of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node\n     * @return {?} The sibling node, or null if there is no sibling.\n     * For WebWorkers, always returns a value.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.nextSibling = function (node) { };\n    /**\n     * Implement this callback to set an attribute value for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?} value The new value.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * Implement this callback to remove an attribute from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * Implement this callback to add a class to an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.addClass = function (el, name) { };\n    /**\n     * Implement this callback to remove a class from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.removeClass = function (el, name) { };\n    /**\n     * Implement this callback to set a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?} value The new value.\n     * @param {?=} flags Flags for style variations. No flags are set by default.\n     * @return {?}\n     */\n    Renderer2.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * Implement this callback to remove the value from a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?=} flags Flags for style variations to remove, if set. ???\n     * @return {?}\n     */\n    Renderer2.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * Implement this callback to set the value of a property of an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The property name.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setProperty = function (el, name, value) { };\n    /**\n     * Implement this callback to set the value of a node in the host element.\n     * @abstract\n     * @param {?} node The node.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setValue = function (node, value) { };\n    /**\n     * Implement this callback to start an event listener.\n     * @abstract\n     * @param {?} target The context in which to listen for events. Can be\n     * the entire window or document, the body of the document, or a specific\n     * DOM element.\n     * @param {?} eventName The event to listen for.\n     * @param {?} callback A handler function to invoke when the event occurs.\n     * @return {?} An \"unlisten\" function for disposing of this handler.\n     */\n    Renderer2.prototype.listen = function (target, eventName, callback) { };\n}\n//# sourceMappingURL=api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { InjectionToken } from '../di/injection_token';\nimport { inject } from '../di/injector';\nimport { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { RendererFactory2 } from '../render/api';\nimport { assertComponentType, assertDefined } from './assert';\nimport { LifecycleHooksFeature, createRootComponent, createRootComponentView, createRootContext } from './component';\nimport { getComponentDef } from './definition';\nimport { adjustBlueprintForNewNode, createLViewData, createNodeAtIndex, createTView, createViewNode, elementCreate, enterView, locateHostElement, renderEmbeddedTemplate } from './instructions';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { FLAGS, INJECTOR, TVIEW } from './interfaces/view';\nimport { getTNode } from './util';\nimport { createElementRef } from './view_engine_compatibility';\nimport { RootViewRef } from './view_ref';\nvar ComponentFactoryResolver = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryResolver, _super);\n    function ComponentFactoryResolver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        ngDevMode && assertComponentType(component);\n        /** @type {?} */\n        var componentDef = /** @type {?} */ ((getComponentDef(component)));\n        return new ComponentFactory(componentDef);\n    };\n    return ComponentFactoryResolver;\n}(viewEngine_ComponentFactoryResolver));\nexport { ComponentFactoryResolver };\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n    /** @type {?} */\n    var array = [];\n    for (var nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            /** @type {?} */\n            var minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/** *\n * Default {\\@link RootContext} for all components rendered with {\\@link renderComponent}.\n  @type {?} */\nexport var ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: function () { return createRootContext(inject(SCHEDULER)); } });\n/** *\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n  @type {?} */\nexport var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: function () {\n        /** @type {?} */\n        var useRaf = typeof requestAnimationFrame !== 'undefined' && typeof window !== 'undefined';\n        return useRaf ? requestAnimationFrame.bind(window) : setTimeout;\n    },\n});\n/** *\n * A function used to wrap the `RendererFactory2`.\n * Used in tests to change the `RendererFactory2` into a `DebugRendererFactory2`.\n  @type {?} */\nexport var WRAP_RENDERER_FACTORY2 = new InjectionToken('WRAP_RENDERER_FACTORY2');\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nvar /**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nComponentFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory, _super);\n    function ComponentFactory(componentDef) {\n        var _this = _super.call(this) || this;\n        _this.componentDef = componentDef;\n        _this.componentType = componentDef.type;\n        _this.selector = /** @type {?} */ (componentDef.selectors[0][0]);\n        _this.ngContentSelectors = [];\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return toRefArray(this.componentDef.inputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return toRefArray(this.componentDef.outputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        /** @type {?} */\n        var isInternalRootView = rootSelectorOrNode === undefined;\n        /** @type {?} */\n        var rendererFactory;\n        if (ngModule) {\n            /** @type {?} */\n            var wrapper = ngModule.injector.get(WRAP_RENDERER_FACTORY2, function (v) { return v; });\n            rendererFactory = /** @type {?} */ (wrapper(ngModule.injector.get(RendererFactory2)));\n        }\n        else {\n            rendererFactory = domRendererFactory3;\n        }\n        /** @type {?} */\n        var hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        /** @type {?} */\n        var componentTag = /** @type {?} */ (((/** @type {?} */ ((this.componentDef.selectors))[0]))[0]);\n        /** @type {?} */\n        var rootFlags = this.componentDef.onPush ? 4 /* Dirty */ | 64 /* IsRoot */ :\n            2 /* CheckAlways */ | 64 /* IsRoot */;\n        /** @type {?} */\n        var rootContext = ngModule && !isInternalRootView ?\n            ngModule.injector.get(ROOT_CONTEXT) :\n            createRootContext(requestAnimationFrame.bind(window));\n        /** @type {?} */\n        var renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        /** @type {?} */\n        var rootView = createLViewData(renderer, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags);\n        rootView[INJECTOR] = ngModule && ngModule.injector || null;\n        /** @type {?} */\n        var oldView = enterView(rootView, null);\n        /** @type {?} */\n        var component;\n        /** @type {?} */\n        var tElementNode;\n        try {\n            if (rendererFactory.begin)\n                rendererFactory.begin();\n            /** @type {?} */\n            var componentView = createRootComponentView(hostRNode, this.componentDef, rootView, renderer);\n            tElementNode = /** @type {?} */ (getTNode(0, rootView));\n            // Transform the arrays of native nodes into a structure that can be consumed by the\n            // projection instruction. This is needed to support the reprojection of these nodes.\n            if (projectableNodes) {\n                /** @type {?} */\n                var index = 0;\n                /** @type {?} */\n                var projection = tElementNode.projection = [];\n                for (var i = 0; i < projectableNodes.length; i++) {\n                    /** @type {?} */\n                    var nodeList = projectableNodes[i];\n                    /** @type {?} */\n                    var firstTNode = null;\n                    /** @type {?} */\n                    var previousTNode = null;\n                    for (var j = 0; j < nodeList.length; j++) {\n                        adjustBlueprintForNewNode(rootView);\n                        /** @type {?} */\n                        var tNode = createNodeAtIndex(++index, 3 /* Element */, /** @type {?} */ (nodeList[j]), null, null);\n                        previousTNode ? (previousTNode.next = tNode) : (firstTNode = tNode);\n                        previousTNode = tNode;\n                    }\n                    projection.push(/** @type {?} */ ((firstTNode)));\n                }\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(hostRNode, componentView, this.componentDef, rootView, rootContext, [LifecycleHooksFeature]);\n            // Execute the template in creation mode only, and then turn off the CreationMode flag\n            renderEmbeddedTemplate(componentView, componentView[TVIEW], component, 1 /* Create */);\n            componentView[FLAGS] &= ~1 /* CreationMode */;\n        }\n        finally {\n            enterView(oldView, null);\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n        /** @type {?} */\n        var componentRef = new ComponentRef(this.componentType, component, rootView, injector, createElementRef(viewEngine_ElementRef, tElementNode, rootView));\n        if (isInternalRootView) {\n            /** @type {?} */ ((\n            // The host element of the internal root view is attached to the component's host view node\n            componentRef.hostView._tViewNode)).child = tElementNode;\n        }\n        return componentRef;\n    };\n    return ComponentFactory;\n}(viewEngine_ComponentFactory));\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nexport { ComponentFactory };\nif (false) {\n    /** @type {?} */\n    ComponentFactory.prototype.selector;\n    /** @type {?} */\n    ComponentFactory.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactory.prototype.componentDef;\n}\n/** @type {?} */\nvar componentFactoryResolver = new ComponentFactoryResolver();\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @return {?} The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver() {\n    return componentFactoryResolver;\n}\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nvar /**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nComponentRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef, _super);\n    function ComponentRef(componentType, instance, rootView, injector, location) {\n        var _this = _super.call(this) || this;\n        _this.location = location;\n        _this.destroyCbs = [];\n        _this.instance = instance;\n        _this.hostView = _this.changeDetectorRef = new RootViewRef(rootView);\n        _this.hostView._tViewNode = createViewNode(-1, rootView);\n        _this.injector = injector;\n        _this.componentType = componentType;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ComponentRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).push(callback);\n    };\n    return ComponentRef;\n}(viewEngine_ComponentRef));\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nexport { ComponentRef };\nif (false) {\n    /** @type {?} */\n    ComponentRef.prototype.destroyCbs;\n    /** @type {?} */\n    ComponentRef.prototype.injector;\n    /** @type {?} */\n    ComponentRef.prototype.instance;\n    /** @type {?} */\n    ComponentRef.prototype.hostView;\n    /** @type {?} */\n    ComponentRef.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef.prototype.componentType;\n    /** @type {?} */\n    ComponentRef.prototype.location;\n}\n//# sourceMappingURL=component_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual, assertLessThan } from './assert';\nimport { NO_CHANGE, _getViewData, adjustBlueprintForNewNode, bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4, createNodeAtIndex, getRenderer, load, resetComponentState } from './instructions';\nimport { NATIVE, RENDER_PARENT } from './interfaces/container';\nimport { BINDING_INDEX, HEADER_OFFSET, HOST_NODE, TVIEW } from './interfaces/view';\nimport { appendChild, createTextNode, removeChild } from './node_manipulation';\nimport { getNativeByIndex, getNativeByTNode, getTNode, isLContainer, stringify } from './util';\n/** @enum {number} */\nvar I18nInstructions = {\n    Text: 536870912,\n    Element: 1073741824,\n    Expression: 1610612736,\n    TemplateRoot: -2147483648,\n    Any: -1610612736,\n    CloseNode: -1073741824,\n    RemoveNode: -536870912,\n    /** Used to decode the number encoded with the instruction. */\n    IndexMask: 536870911,\n    /** Used to test the type of instruction. */\n    InstructionMask: -536870912,\n};\nexport { I18nInstructions };\n/** @typedef {?} */\nvar I18nInstruction;\nexport { I18nInstruction };\n/** @typedef {?} */\nvar I18nExpInstruction;\nexport { I18nExpInstruction };\n/** @typedef {?} */\nvar PlaceholderMap;\nexport { PlaceholderMap };\n/** @type {?} */\nvar i18nTagRegex = /{\\$([^}]+)}/g;\n/**\n * Takes a translation string, the initial list of placeholders (elements and expressions) and the\n * indexes of their corresponding expression nodes to return a list of instructions for each\n * template function.\n *\n * Because embedded templates have different indexes for each placeholder, each parameter (except\n * the translation) is an array, where each value corresponds to a different template, by order of\n * appearance.\n *\n * @param {?} translation A translation string where placeholders are represented by `{$name}`\n * @param {?} elements An array containing, for each template, the maps of element placeholders and\n * their indexes.\n * @param {?=} expressions An array containing, for each template, the maps of expression placeholders\n * and their indexes.\n * @param {?=} templateRoots An array of template roots whose content should be ignored when\n * generating the instructions for their parent template.\n * @param {?=} lastChildIndex The index of the last child of the i18n node. Used when the i18n block is\n * an ng-container.\n *\n * @return {?} A list of instructions used to translate each template.\n */\nexport function i18nMapping(translation, elements, expressions, templateRoots, lastChildIndex) {\n    /** @type {?} */\n    var translationParts = translation.split(i18nTagRegex);\n    /** @type {?} */\n    var nbTemplates = templateRoots ? templateRoots.length + 1 : 1;\n    /** @type {?} */\n    var instructions = (new Array(nbTemplates)).fill(undefined);\n    generateMappingInstructions(0, 0, translationParts, instructions, elements, expressions, templateRoots, lastChildIndex);\n    return instructions;\n}\n/**\n * Internal function that reads the translation parts and generates a set of instructions for each\n * template.\n *\n * See `i18nMapping()` for more details.\n *\n * @param {?} tmplIndex The order of appearance of the template.\n * 0 for the root template, following indexes match the order in `templateRoots`.\n * @param {?} partIndex The current index in `translationParts`.\n * @param {?} translationParts The translation string split into an array of placeholders and text\n * elements.\n * @param {?} instructions The current list of instructions to update.\n * @param {?} elements An array containing, for each template, the maps of element placeholders and\n * their indexes.\n * @param {?=} expressions An array containing, for each template, the maps of expression placeholders\n * and their indexes.\n * @param {?=} templateRoots An array of template roots whose content should be ignored when\n * generating the instructions for their parent template.\n * @param {?=} lastChildIndex The index of the last child of the i18n node. Used when the i18n block is\n * an ng-container.\n *\n * @return {?} the current index in `translationParts`\n */\nfunction generateMappingInstructions(tmplIndex, partIndex, translationParts, instructions, elements, expressions, templateRoots, lastChildIndex) {\n    /** @type {?} */\n    var tmplInstructions = [];\n    /** @type {?} */\n    var phVisited = [];\n    /** @type {?} */\n    var openedTagCount = 0;\n    /** @type {?} */\n    var maxIndex = 0;\n    /** @type {?} */\n    var currentElements = elements && elements[tmplIndex] ? elements[tmplIndex] : null;\n    /** @type {?} */\n    var currentExpressions = expressions && expressions[tmplIndex] ? expressions[tmplIndex] : null;\n    instructions[tmplIndex] = tmplInstructions;\n    for (; partIndex < translationParts.length; partIndex++) {\n        /** @type {?} */\n        var value = translationParts[partIndex];\n        // Odd indexes are placeholders\n        if (partIndex & 1) {\n            /** @type {?} */\n            var phIndex = void 0;\n            if (currentElements && currentElements[value] !== undefined) {\n                phIndex = currentElements[value];\n                /** @type {?} */\n                var templateRootIndex = templateRoots ? templateRoots.indexOf(value) : -1;\n                if (templateRootIndex !== -1 && (templateRootIndex + 1) !== tmplIndex) {\n                    // This is a template root, it has no closing tag, not treating it as an element\n                    tmplInstructions.push(phIndex | -2147483648 /* TemplateRoot */);\n                }\n                else {\n                    tmplInstructions.push(phIndex | 1073741824 /* Element */);\n                    openedTagCount++;\n                }\n                phVisited.push(value);\n            }\n            else if (currentExpressions && currentExpressions[value] !== undefined) {\n                phIndex = currentExpressions[value];\n                // The placeholder represents an expression, add an instruction to move it\n                tmplInstructions.push(phIndex | 1610612736 /* Expression */);\n                phVisited.push(value);\n            }\n            else {\n                // It is a closing tag\n                tmplInstructions.push(-1073741824 /* CloseNode */);\n                if (tmplIndex > 0) {\n                    openedTagCount--;\n                    // If we have reached the closing tag for this template, exit the loop\n                    if (openedTagCount === 0) {\n                        break;\n                    }\n                }\n            }\n            if (phIndex !== undefined && phIndex > maxIndex) {\n                maxIndex = phIndex;\n            }\n            if (templateRoots) {\n                /** @type {?} */\n                var newTmplIndex = templateRoots.indexOf(value) + 1;\n                if (newTmplIndex !== 0 && newTmplIndex !== tmplIndex) {\n                    partIndex = generateMappingInstructions(newTmplIndex, partIndex, translationParts, instructions, elements, expressions, templateRoots, lastChildIndex);\n                }\n            }\n        }\n        else if (value) {\n            // It's a non-empty string, create a text node\n            tmplInstructions.push(536870912 /* Text */, value);\n        }\n    }\n    // Add instructions to remove elements that are not used in the translation\n    if (elements) {\n        /** @type {?} */\n        var tmplElements = elements[tmplIndex];\n        if (tmplElements) {\n            /** @type {?} */\n            var phKeys = Object.keys(tmplElements);\n            for (var i = 0; i < phKeys.length; i++) {\n                /** @type {?} */\n                var ph = phKeys[i];\n                if (phVisited.indexOf(ph) === -1) {\n                    /** @type {?} */\n                    var index = tmplElements[ph];\n                    // Add an instruction to remove the element\n                    tmplInstructions.push(index | -536870912 /* RemoveNode */);\n                    if (index > maxIndex) {\n                        maxIndex = index;\n                    }\n                }\n            }\n        }\n    }\n    // Add instructions to remove expressions that are not used in the translation\n    if (expressions) {\n        /** @type {?} */\n        var tmplExpressions = expressions[tmplIndex];\n        if (tmplExpressions) {\n            /** @type {?} */\n            var phKeys = Object.keys(tmplExpressions);\n            for (var i = 0; i < phKeys.length; i++) {\n                /** @type {?} */\n                var ph = phKeys[i];\n                if (phVisited.indexOf(ph) === -1) {\n                    /** @type {?} */\n                    var index = tmplExpressions[ph];\n                    if (ngDevMode) {\n                        assertLessThan(index.toString(2).length, 28, \"Index \" + index + \" is too big and will overflow\");\n                    }\n                    // Add an instruction to remove the expression\n                    tmplInstructions.push(index | -536870912 /* RemoveNode */);\n                    if (index > maxIndex) {\n                        maxIndex = index;\n                    }\n                }\n            }\n        }\n    }\n    if (tmplIndex === 0 && typeof lastChildIndex === 'number') {\n        // The current parent is an ng-container and it has more children after the translation that we\n        // need to append to keep the order of the DOM nodes correct\n        for (var i = maxIndex + 1; i <= lastChildIndex; i++) {\n            if (ngDevMode) {\n                assertLessThan(i.toString(2).length, 28, \"Index \" + i + \" is too big and will overflow\");\n            }\n            tmplInstructions.push(i | -1610612736 /* Any */);\n        }\n    }\n    return partIndex;\n}\n/**\n * @param {?} tNode\n * @param {?} parentTNode\n * @param {?} previousTNode\n * @return {?}\n */\nfunction appendI18nNode(tNode, parentTNode, previousTNode) {\n    if (ngDevMode) {\n        ngDevMode.rendererMoveNode++;\n    }\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var firstTemplatePass = viewData[TVIEW].firstTemplatePass;\n    if (firstTemplatePass) {\n        if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n            tNode.next = parentTNode.child;\n            parentTNode.child = tNode;\n        }\n        else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n            tNode.next = previousTNode.next;\n            previousTNode.next = tNode;\n        }\n        else {\n            tNode.next = null;\n        }\n        if (parentTNode !== viewData[HOST_NODE]) {\n            tNode.parent = /** @type {?} */ (parentTNode);\n        }\n    }\n    appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n    /** @type {?} */\n    var slotValue = viewData[tNode.index];\n    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n        // Nodes that inject ViewContainerRef also have a comment node that should be moved\n        appendChild(slotValue[NATIVE], tNode, viewData);\n    }\n    return tNode;\n}\n/**\n * @param {?} index\n * @param {?} attrs\n * @return {?}\n */\nexport function i18nAttribute(index, attrs) {\n    // placeholder for i18nAttribute function\n}\n/**\n * @param {?} expression\n * @return {?}\n */\nexport function i18nExp(expression) {\n    // placeholder for i18nExp function\n}\n/**\n * @param {?} index\n * @param {?} message\n * @param {?=} subTemplateIndex\n * @return {?}\n */\nexport function i18nStart(index, message, subTemplateIndex) {\n    if (subTemplateIndex === void 0) { subTemplateIndex = 0; }\n    // placeholder for i18nExp function\n}\n/**\n * @return {?}\n */\nexport function i18nEnd() {\n    // placeholder for i18nEnd function\n}\n/**\n * Takes a list of instructions generated by `i18nMapping()` to transform the template accordingly.\n *\n * @param {?} startIndex Index of the first element to translate (for instance the first child of the\n * element with the i18n attribute).\n * @param {?} instructions The list of instructions to apply on the current view.\n * @return {?}\n */\nexport function i18nApply(startIndex, instructions) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    if (ngDevMode) {\n        assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nApply should be called before any binding');\n    }\n    if (!instructions) {\n        return;\n    }\n    /** @type {?} */\n    var renderer = getRenderer();\n    /** @type {?} */\n    var startTNode = getTNode(startIndex, viewData);\n    /** @type {?} */\n    var localParentTNode = startTNode.parent || /** @type {?} */ ((viewData[HOST_NODE]));\n    /** @type {?} */\n    var localPreviousTNode = localParentTNode;\n    resetComponentState(); // We don't want to add to the tree with the wrong previous node\n    for (var i = 0; i < instructions.length; i++) {\n        /** @type {?} */\n        var instruction = /** @type {?} */ (instructions[i]);\n        switch (instruction & -536870912 /* InstructionMask */) {\n            case 1073741824 /* Element */:\n                /** @type {?} */\n                var elementTNode = getTNode(instruction & 536870911 /* IndexMask */, viewData);\n                localPreviousTNode = appendI18nNode(elementTNode, localParentTNode, localPreviousTNode);\n                localParentTNode = elementTNode;\n                break;\n            case 1610612736 /* Expression */:\n            case -2147483648 /* TemplateRoot */:\n            case -1610612736 /* Any */:\n                /** @type {?} */\n                var nodeIndex = instruction & 536870911 /* IndexMask */;\n                localPreviousTNode =\n                    appendI18nNode(getTNode(nodeIndex, viewData), localParentTNode, localPreviousTNode);\n                break;\n            case 536870912 /* Text */:\n                if (ngDevMode) {\n                    ngDevMode.rendererCreateTextNode++;\n                }\n                /** @type {?} */\n                var value = instructions[++i];\n                /** @type {?} */\n                var textRNode = createTextNode(value, renderer);\n                // If we were to only create a `RNode` then projections won't move the text.\n                // Create text node at the current end of viewData. Must subtract header offset because\n                // createNodeAtIndex takes a raw index (not adjusted by header offset).\n                adjustBlueprintForNewNode(viewData);\n                /** @type {?} */\n                var textTNode = createNodeAtIndex(viewData.length - 1 - HEADER_OFFSET, 3 /* Element */, textRNode, null, null);\n                localPreviousTNode = appendI18nNode(textTNode, localParentTNode, localPreviousTNode);\n                resetComponentState();\n                break;\n            case -1073741824 /* CloseNode */:\n                localPreviousTNode = localParentTNode;\n                localParentTNode = localParentTNode.parent || /** @type {?} */ ((viewData[HOST_NODE]));\n                break;\n            case -536870912 /* RemoveNode */:\n                if (ngDevMode) {\n                    ngDevMode.rendererRemoveNode++;\n                }\n                /** @type {?} */\n                var removeIndex = instruction & 536870911 /* IndexMask */;\n                /** @type {?} */\n                var removedElement = getNativeByIndex(removeIndex, viewData);\n                /** @type {?} */\n                var removedTNode = getTNode(removeIndex, viewData);\n                removeChild(removedTNode, removedElement || null, viewData);\n                /** @type {?} */\n                var slotValue = /** @type {?} */ (load(removeIndex));\n                if (isLContainer(slotValue)) {\n                    /** @type {?} */\n                    var lContainer = /** @type {?} */ (slotValue);\n                    if (removedTNode.type !== 0 /* Container */) {\n                        removeChild(removedTNode, lContainer[NATIVE] || null, viewData);\n                    }\n                    removedTNode.detached = true;\n                    lContainer[RENDER_PARENT] = null;\n                }\n                break;\n        }\n    }\n}\n/**\n * Takes a translation string and the initial list of expressions and returns a list of instructions\n * that will be used to translate an attribute.\n * Even indexes contain static strings, while odd indexes contain the index of the expression whose\n * value will be concatenated into the final translation.\n * @param {?} translation\n * @param {?} placeholders\n * @return {?}\n */\nexport function i18nExpMapping(translation, placeholders) {\n    /** @type {?} */\n    var staticText = translation.split(i18nTagRegex);\n    // odd indexes are placeholders\n    for (var i = 1; i < staticText.length; i += 2) {\n        staticText[i] = placeholders[staticText[i]];\n    }\n    return staticText;\n}\n/**\n * Checks if the value of an expression has changed and replaces it by its value in a translation,\n * or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation1(instructions, v0) {\n    /** @type {?} */\n    var different = bindingUpdated(_getViewData()[BINDING_INDEX]++, v0);\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            res += stringify(v0);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 2 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation2(instructions, v0, v1) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated2(viewData[BINDING_INDEX], v0, v1);\n    viewData[BINDING_INDEX] += 2;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b1 ? v1 : v0;\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 3 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation3(instructions, v0, v1, v2) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated3(viewData[BINDING_INDEX], v0, v1, v2);\n    viewData[BINDING_INDEX] += 3;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b2 ? v2 : (b1 ? v1 : v0);\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 4 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation4(instructions, v0, v1, v2, v3) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    viewData[BINDING_INDEX] += 4;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0);\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 5 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation5(instructions, v0, v1, v2, v3, v4) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated(viewData[BINDING_INDEX] + 4, v4) || different;\n    viewData[BINDING_INDEX] += 5;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? v4 : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 6 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n * @param {?} v5 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation6(instructions, v0, v1, v2, v3, v4, v5) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated2(viewData[BINDING_INDEX] + 4, v4, v5) || different;\n    viewData[BINDING_INDEX] += 6;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? (b1 ? v5 : v4) : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 7 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n * @param {?} v5 value checked for change.\n * @param {?} v6 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation7(instructions, v0, v1, v2, v3, v4, v5, v6) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated3(viewData[BINDING_INDEX] + 4, v4, v5, v6) || different;\n    viewData[BINDING_INDEX] += 7;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? (b2 ? v6 : (b1 ? v5 : v4)) : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 8 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n * @param {?} v5 value checked for change.\n * @param {?} v6 value checked for change.\n * @param {?} v7 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation8(instructions, v0, v1, v2, v3, v4, v5, v6, v7) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated4(viewData[BINDING_INDEX] + 4, v4, v5, v6, v7) || different;\n    viewData[BINDING_INDEX] += 8;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? (b2 ? (b1 ? v7 : v6) : (b1 ? v5 : v4)) : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Create a translated interpolation binding with a variable number of expressions.\n *\n * If there are 1 to 8 expressions then `i18nInterpolation()` should be used instead. It is faster\n * because there is no need to create an array of expressions and iterate over it.\n *\n * @param {?} instructions\n * @param {?} values\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolationV(instructions, values) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = false;\n    for (var i = 0; i < values.length; i++) {\n        // Check if bindings have changed\n        bindingUpdated(viewData[BINDING_INDEX]++, values[i]) && (different = true);\n    }\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are placeholders\n        if (i & 1) {\n            res += stringify(values[/** @type {?} */ (instructions[i])]);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n//# sourceMappingURL=i18n.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { getInjectableDef, getInjectorDef } from './defs';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { INJECTOR, NullInjector, THROW_IF_NOT_FOUND, USE_VALUE, inject, injectArgs, setCurrentInjector } from './injector';\nimport { APP_ROOT } from './scope';\n/** @typedef {?} */\nvar SingleProvider;\n/** *\n * Marker which indicates that a value has not yet been created from the factory function.\n  @type {?} */\nvar NOT_YET = {};\n/** *\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n  @type {?} */\nvar CIRCULAR = {};\n/** @type {?} */\nvar EMPTY_ARRAY = /** @type {?} */ ([]);\n/** *\n * A lazily initialized NullInjector.\n  @type {?} */\nvar NULL_INJECTOR = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n    if (NULL_INJECTOR === undefined) {\n        NULL_INJECTOR = new NullInjector();\n    }\n    return NULL_INJECTOR;\n}\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n * @record\n * @template T\n */\nfunction Record() { }\n/** @type {?} */\nRecord.prototype.factory;\n/** @type {?} */\nRecord.prototype.value;\n/** @type {?} */\nRecord.prototype.multi;\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@experimental\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @return {?}\n */\nexport function createInjector(defType, parent, additionalProviders) {\n    if (parent === void 0) { parent = null; }\n    if (additionalProviders === void 0) { additionalProviders = null; }\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent);\n}\nvar R3Injector = /** @class */ (function () {\n    function R3Injector(def, additionalProviders, parent) {\n        var _this = this;\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        /**\n         * Flag indicating that this injector was previously destroyed.\n         */\n        this.destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, new Set()); });\n        additionalProviders &&\n            deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider); });\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\n    }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    R3Injector.prototype.destroy = /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    function () {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this.destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    };\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    R3Injector.prototype.get = /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = 0 /* Default */; }\n        this.assertNotDestroyed();\n        /** @type {?} */\n        var previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & 4 /* SkipSelf */)) {\n                /** @type {?} */\n                var record = this.records.get(token);\n                if (record === undefined) {\n                    /** @type {?} */\n                    var def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = injectableDefRecord(token);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            /** @type {?} */\n            var next = !(flags & 2 /* Self */) ? this.parent : getNullInjector();\n            return this.parent.get(token, notFoundValue);\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    R3Injector.prototype.assertNotDestroyed = /**\n     * @return {?}\n     */\n    function () {\n        if (this.destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    };\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @return {?}\n     */\n    R3Injector.prototype.processInjectorType = /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @return {?}\n     */\n    function (defOrWrappedDef, parents) {\n        var _this = this;\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        /** @type {?} */\n        var def = getInjectorDef(defOrWrappedDef);\n        /** @type {?} */\n        var ngModule = (def == null) && (/** @type {?} */ (defOrWrappedDef)).ngModule || undefined;\n        /** @type {?} */\n        var defType = (ngModule === undefined) ? (/** @type {?} */ (defOrWrappedDef)) : ngModule;\n        /** @type {?} */\n        var providers = (ngModule !== undefined) && (/** @type {?} */ (defOrWrappedDef)).providers ||\n            EMPTY_ARRAY;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Check for circular dependencies.\n        if (parents.has(defType)) {\n            throw new Error(\"Circular dependency: type \" + stringify(defType) + \" ends up importing itself.\");\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            parents.add(defType);\n            try {\n                deepForEach(def.imports, function (imported) { return _this.processInjectorType(imported, parents); });\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                parents.delete(defType);\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        if (def.providers != null) {\n            deepForEach(def.providers, function (provider) { return _this.processProvider(provider); });\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        deepForEach(providers, function (provider) { return _this.processProvider(provider); });\n    };\n    /**\n     * Process a `SingleProvider` and add it.\n     * @param {?} provider\n     * @return {?}\n     */\n    R3Injector.prototype.processProvider = /**\n     * Process a `SingleProvider` and add it.\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        /** @type {?} */\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        var record = providerToRecord(provider);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            /** @type {?} */\n            var multiRecord_1 = this.records.get(token);\n            if (multiRecord_1) {\n                // It has. Throw a nice error if\n                if (multiRecord_1.multi === undefined) {\n                    throw new Error(\"Mixed multi-provider for \" + token + \".\");\n                }\n            }\n            else {\n                multiRecord_1 = makeRecord(undefined, NOT_YET, true);\n                multiRecord_1.factory = function () { return injectArgs(/** @type {?} */ ((/** @type {?} */ ((multiRecord_1)).multi))); };\n                this.records.set(token, multiRecord_1);\n            }\n            token = provider; /** @type {?} */\n            ((multiRecord_1.multi)).push(provider);\n        }\n        else {\n            /** @type {?} */\n            var existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(\"Mixed multi-provider for \" + stringify(token));\n            }\n        }\n        this.records.set(token, record);\n    };\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    R3Injector.prototype.hydrate = /**\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    function (token, record) {\n        if (record.value === CIRCULAR) {\n            throw new Error(\"Circular dep for \" + stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            record.value = /** @type {?} */ ((record.factory))();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return /** @type {?} */ (record.value);\n    };\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    R3Injector.prototype.injectableDefInScope = /**\n     * @param {?} def\n     * @return {?}\n     */\n    function (def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    };\n    return R3Injector;\n}());\nexport { R3Injector };\nif (false) {\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * @type {?}\n     */\n    R3Injector.prototype.records;\n    /**\n     * The transitive set of `InjectorType`s which define this injector.\n     * @type {?}\n     */\n    R3Injector.prototype.injectorDefTypes;\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     * @type {?}\n     */\n    R3Injector.prototype.onDestroy;\n    /**\n     * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n     * root scope.\n     * @type {?}\n     */\n    R3Injector.prototype.isRootInjector;\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     * @type {?}\n     */\n    R3Injector.prototype.destroyed;\n    /** @type {?} */\n    R3Injector.prototype.parent;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefRecord(token) {\n    /** @type {?} */\n    var injectableDef = getInjectableDef(/** @type {?} */ (token));\n    if (injectableDef === null) {\n        if (token instanceof InjectionToken) {\n            throw new Error(\"Token \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\n        }\n        // TODO(alxhub): there should probably be a strict mode which throws here instead of assuming a\n        // no-args constructor.\n        return makeRecord(function () { return new (/** @type {?} */ (token))(); });\n    }\n    return makeRecord(injectableDef.factory);\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction providerToRecord(provider) {\n    /** @type {?} */\n    var token = resolveForwardRef(provider);\n    /** @type {?} */\n    var value = NOT_YET;\n    /** @type {?} */\n    var factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefRecord(provider);\n    }\n    else {\n        token = resolveForwardRef(provider.provide);\n        if (isValueProvider(provider)) {\n            value = provider.useValue;\n        }\n        else if (isExistingProvider(provider)) {\n            factory = function () { return inject(provider.useExisting); };\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = function () { return provider.useFactory.apply(provider, injectArgs(provider.deps || [])); };\n        }\n        else {\n            /** @type {?} */\n            var classRef_1 = (/** @type {?} */ (provider)).useClass || token;\n            if (hasDeps(provider)) {\n                factory = function () { return new ((classRef_1).bind.apply((classRef_1), [void 0].concat(injectArgs(provider.deps))))(); };\n            }\n            else {\n                return injectableDefRecord(classRef_1);\n            }\n        }\n    }\n    return makeRecord(factory, value);\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?=} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi) {\n    if (value === void 0) { value = NOT_YET; }\n    if (multi === void 0) { multi = false; }\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\n/**\n * @template T\n * @param {?} input\n * @param {?} fn\n * @return {?}\n */\nfunction deepForEach(input, fn) {\n    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n    return USE_VALUE in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n    return !!(/** @type {?} */ (value)).useExisting;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n    return !!(/** @type {?} */ (value)).useFactory;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n    return !!(/** @type {?} */ (value)).deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n    return typeof value === 'object' && value != null && (/** @type {?} */ (value)).ngOnDestroy &&\n        typeof (/** @type {?} */ (value)).ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n//# sourceMappingURL=r3_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { createInjector } from '../di/r3_injector';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { assertDefined } from './assert';\nimport { ComponentFactoryResolver } from './component_ref';\nimport { getNgModuleDef } from './definition';\n/**\n * @record\n */\nexport function NgModuleType() { }\n/** @type {?} */\nNgModuleType.prototype.ngModuleDef;\n/** @type {?} */\nexport var COMPONENT_FACTORY_RESOLVER = {\n    provide: viewEngine_ComponentFactoryResolver,\n    useFactory: function () { return new ComponentFactoryResolver(); },\n    deps: [],\n};\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nNgModuleRef = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleRef, _super);\n    function NgModuleRef(ngModuleType, parentInjector) {\n        var _this = _super.call(this) || this;\n        // tslint:disable-next-line:require-internal-with-underscore\n        _this._bootstrapComponents = [];\n        _this.destroyCbs = [];\n        /** @type {?} */\n        /** @nocollapse */ var ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode && assertDefined(ngModuleDef, \"NgModule '\" + stringify(ngModuleType) + \"' is not a subtype of 'NgModuleType'.\");\n        _this._bootstrapComponents = /** @type {?} */ ((ngModuleDef)).bootstrap;\n        /** @type {?} */\n        var additionalProviders = [\n            COMPONENT_FACTORY_RESOLVER, {\n                provide: viewEngine_NgModuleRef,\n                useValue: _this,\n            }\n        ];\n        _this.injector = createInjector(ngModuleType, parentInjector, additionalProviders);\n        _this.instance = _this.injector.get(ngModuleType);\n        _this.componentFactoryResolver = new ComponentFactoryResolver();\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NgModuleRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).push(callback);\n    };\n    return NgModuleRef;\n}(viewEngine_NgModuleRef));\n/**\n * @template T\n */\nexport { NgModuleRef };\nif (false) {\n    /** @type {?} */\n    NgModuleRef.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef.prototype.injector;\n    /** @type {?} */\n    NgModuleRef.prototype.componentFactoryResolver;\n    /** @type {?} */\n    NgModuleRef.prototype.instance;\n    /** @type {?} */\n    NgModuleRef.prototype.destroyCbs;\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nNgModuleFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory, _super);\n    function NgModuleFactory(moduleType) {\n        var _this = _super.call(this) || this;\n        _this.moduleType = moduleType;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        return new NgModuleRef(this.moduleType, parentInjector);\n    };\n    return NgModuleFactory;\n}(viewEngine_NgModuleFactory));\n/**\n * @template T\n */\nexport { NgModuleFactory };\nif (false) {\n    /** @type {?} */\n    NgModuleFactory.prototype.moduleType;\n}\n//# sourceMappingURL=ng_module_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { bindingUpdated, bindingUpdated2, bindingUpdated4, updateBinding, getBinding, getCreationMode, bindingUpdated3, getBindingRoot, } from './instructions';\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n */\nexport function pureFunction0(slotOffset, pureFn, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return getCreationMode() ?\n        updateBinding(bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction1(slotOffset, pureFn, exp, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(bindingIndex, exp) ?\n        updateBinding(bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated2(bindingIndex, exp1, exp2) ?\n        updateBinding(bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated3(bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(bindingIndex + 4, exp5) || different ?\n        updateBinding(bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = false;\n    for (var i = 0; i < exps.length; i++) {\n        bindingUpdated(bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(bindingIndex);\n}\n//# sourceMappingURL=pure_function.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getTView, load, store } from './instructions';\nimport { HEADER_OFFSET } from './interfaces/view';\nimport { pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunctionV } from './pure_function';\n/**\n * Create a pipe.\n *\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n */\nexport function pipe(index, pipeName) {\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var pipeDef;\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = /** @type {?} */ (tView.data[adjustedIndex]);\n    }\n    /** @type {?} */\n    var pipeInstance = pipeDef.factory();\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            var pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(\"Pipe with name '\" + name + \"' not found!\");\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind1(index, slotOffset, v1) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind2(index, slotOffset, v1, v2) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind3(index, slotOffset, v1, v2, v3) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ?\n        pureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ?\n        pureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n * @return {?}\n */\nexport function pipeBindV(index, slotOffset, values) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values);\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return (/** @type {?} */ (getTView().data[index + HEADER_OFFSET])).pure;\n}\n//# sourceMappingURL=pipe.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Subject, Subscription } from 'rxjs';\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @template T\n */\nvar /**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @template T\n */\nEventEmitter = /** @class */ (function (_super) {\n    tslib_1.__extends(EventEmitter, _super);\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param isAsync When true, deliver events asynchronously.\n     *\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this) || this;\n        _this.__isAsync = isAsync;\n        return _this;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param value The value to emit.\n     */\n    /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    EventEmitter.prototype.emit = /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param generatorOrNext When supplied, a custom handler for emitted events.\n     * @param error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     */\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    EventEmitter.prototype.subscribe = /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    function (generatorOrNext, error, complete) {\n        /** @type {?} */\n        var schedulerFn;\n        /** @type {?} */\n        var errorFn = function (err) { return null; };\n        /** @type {?} */\n        var completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? function (value) {\n                setTimeout(function () { return generatorOrNext.next(value); });\n            } : function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        /** @type {?} */\n        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    };\n    return EventEmitter;\n}(Subject));\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @template T\n */\nexport { EventEmitter };\nif (false) {\n    /**\n     * Internal\n     * @type {?}\n     */\n    EventEmitter.prototype.__isAsync;\n}\n//# sourceMappingURL=event_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { R3_TEMPLATE_REF_FACTORY } from '../ivy_switch/runtime/index';\nimport { ElementRef } from './element_ref';\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @abstract\n * @template C\n */\nvar TemplateRef = /** @class */ (function () {\n    function TemplateRef() {\n    }\n    /**\n     * \\@internal\n     */\n    TemplateRef.__NG_ELEMENT_ID__ = function () { return R3_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef); };\n    return TemplateRef;\n}());\nexport { TemplateRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef.__NG_ELEMENT_ID__;\n    /**\n     * The anchor element in the parent view for this embedded view.\n     *\n     * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n     * inherit from the contexts of this location.\n     *\n     * Typically new embedded views are attached to the view container of this location, but in\n     * advanced use-cases, the view can be attached to a different container while keeping the\n     * data-binding and injection context from the original location.\n     *\n     * @abstract\n     * @return {?}\n     */\n    TemplateRef.prototype.elementRef = function () { };\n    /**\n     * Creates a view object and attaches it to the view container of the parent view.\n     * @abstract\n     * @param {?} context The context for the new view, inherited from the anchor element.\n     * @return {?} The new view object.\n     */\n    TemplateRef.prototype.createEmbeddedView = function (context) { };\n}\n//# sourceMappingURL=template_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { ElementRef as ViewEngine_ElementRef } from '../linker/element_ref';\nimport { TemplateRef as ViewEngine_TemplateRef } from '../linker/template_ref';\nimport { getSymbolIterator } from '../util';\nimport { assertDefined, assertEqual } from './assert';\nimport { NG_ELEMENT_ID } from './fields';\nimport { _getViewData, assertPreviousIsParent, getOrCreateCurrentQueries, store, storeCleanupWithContext } from './instructions';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/definition';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/injector';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused4 } from './interfaces/query';\nimport { TVIEW } from './interfaces/view';\nimport { flatten, isContentQueryHost } from './util';\nimport { createElementRef, createTemplateRef } from './view_engine_compatibility';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @record\n * @template T\n */\nexport function QueryPredicate() { }\n/**\n * If looking for directives then it contains the directive type.\n * @type {?}\n */\nQueryPredicate.prototype.type;\n/**\n * If selector then contains local names to query for.\n * @type {?}\n */\nQueryPredicate.prototype.selector;\n/**\n * Indicates which token should be read from DI for this query.\n * @type {?}\n */\nQueryPredicate.prototype.read;\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n * @record\n * @template T\n */\nexport function LQuery() { }\n/**\n * Next query. Used when queries are stored as a linked list in `LQueries`.\n * @type {?}\n */\nLQuery.prototype.next;\n/**\n * Destination to which the value should be added.\n * @type {?}\n */\nLQuery.prototype.list;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @type {?}\n */\nLQuery.prototype.predicate;\n/**\n * Values which have been located.\n *\n * This is what builds up the `QueryList._valuesTree`.\n * @type {?}\n */\nLQuery.prototype.values;\n/**\n * A pointer to an array that stores collected values from views. This is necessary so we know a\n * container into which to insert nodes collected from views.\n * @type {?}\n */\nLQuery.prototype.containerValues;\nvar LQueries_ = /** @class */ (function () {\n    function LQueries_(parent, shallow, deep) {\n        this.parent = parent;\n        this.shallow = shallow;\n        this.deep = deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    LQueries_.prototype.track = /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    function (queryList, predicate, descend, read) {\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.clone = /**\n     * @return {?}\n     */\n    function () { return new LQueries_(this, null, this.deep); };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.container = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var shallowResults = copyQueriesToContainer(this.shallow);\n        /** @type {?} */\n        var deepResults = copyQueriesToContainer(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.createView = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var shallowResults = copyQueriesToView(this.shallow);\n        /** @type {?} */\n        var deepResults = copyQueriesToView(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    LQueries_.prototype.insertView = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        insertView(index, this.shallow);\n        insertView(index, this.deep);\n    };\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    LQueries_.prototype.addNode = /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    function (tNode) {\n        add(this.deep, tNode);\n        if (isContentQueryHost(tNode)) {\n            add(this.shallow, tNode);\n            if (tNode.parent && isContentQueryHost(tNode.parent)) {\n                // if node has a content query and parent also has a content query\n                // both queries need to check this node for shallow matches\n                add(/** @type {?} */ ((this.parent)).shallow, tNode);\n            }\n            return this.parent;\n        }\n        isRootNodeOfQuery(tNode) && add(this.shallow, tNode);\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.removeView = /**\n     * @return {?}\n     */\n    function () {\n        removeView(this.shallow);\n        removeView(this.deep);\n    };\n    return LQueries_;\n}());\nexport { LQueries_ };\nif (false) {\n    /** @type {?} */\n    LQueries_.prototype.parent;\n    /** @type {?} */\n    LQueries_.prototype.shallow;\n    /** @type {?} */\n    LQueries_.prototype.deep;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isRootNodeOfQuery(tNode) {\n    return tNode.parent === null || isContentQueryHost(tNode.parent);\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToContainer(query) {\n    /** @type {?} */\n    var result = null;\n    while (query) {\n        /** @type {?} */\n        var containerValues = []; // prepare room for views\n        query.values.push(containerValues);\n        /** @type {?} */\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: containerValues,\n            containerValues: null\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToView(query) {\n    /** @type {?} */\n    var result = null;\n    while (query) {\n        /** @type {?} */\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: [],\n            containerValues: query.values\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} index\n * @param {?} query\n * @return {?}\n */\nfunction insertView(index, query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.'); /** @type {?} */\n        ((query.containerValues)).splice(index, 0, query.values);\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction removeView(query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n        /** @type {?} */\n        var containerValues = /** @type {?} */ ((query.containerValues));\n        /** @type {?} */\n        var viewValuesIdx = containerValues.indexOf(query.values);\n        /** @type {?} */\n        var removed = containerValues.splice(viewValuesIdx, 1);\n        // mark a query as dirty only when removed view had matching modes\n        ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n        if (removed[0].length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    /** @type {?} */\n    var localNames = tNode.localNames;\n    if (localNames) {\n        for (var i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return /** @type {?} */ (localNames[i + 1]);\n            }\n        }\n    }\n    return null;\n}\n/**\n * Iterates over all the directives for a node and returns index of a directive for a given type.\n *\n * @param {?} tNode TNode on which directives are present.\n * @param {?} currentView The view we are currently processing\n * @param {?} type Type of a directive to look for.\n * @return {?} Index of a found directive or null when none found.\n */\nfunction getIdxOfMatchingDirective(tNode, currentView, type) {\n    /** @type {?} */\n    var defs = currentView[TVIEW].data;\n    if (defs) {\n        /** @type {?} */\n        var flags = tNode.flags;\n        /** @type {?} */\n        var count = flags & 4095 /* DirectiveCountMask */;\n        /** @type {?} */\n        var start = flags >> 15 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var end = start + count;\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (defs[i]);\n            if (def.type === type && def.diPublic) {\n                return i;\n            }\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @return {?}\n */\nfunction queryRead(tNode, currentView, read) {\n    /** @type {?} */\n    var factoryFn = (/** @type {?} */ (read))[NG_ELEMENT_ID];\n    if (typeof factoryFn === 'function') {\n        return factoryFn();\n    }\n    else {\n        /** @type {?} */\n        var matchingIdx = getIdxOfMatchingDirective(tNode, currentView, /** @type {?} */ (read));\n        if (matchingIdx !== null) {\n            return currentView[matchingIdx];\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryReadByTNodeType(tNode, currentView) {\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        return createElementRef(ViewEngine_ElementRef, tNode, currentView);\n    }\n    if (tNode.type === 0 /* Container */) {\n        return createTemplateRef(ViewEngine_TemplateRef, ViewEngine_ElementRef, tNode, currentView);\n    }\n    return null;\n}\n/**\n * @param {?} query\n * @param {?} tNode\n * @return {?}\n */\nfunction add(query, tNode) {\n    /** @type {?} */\n    var currentView = _getViewData();\n    while (query) {\n        /** @type {?} */\n        var predicate = query.predicate;\n        /** @type {?} */\n        var type = predicate.type;\n        if (type) {\n            /** @type {?} */\n            var result = queryRead(tNode, currentView, predicate.read || type);\n            if (result !== null) {\n                addMatch(query, result);\n            }\n        }\n        else {\n            /** @type {?} */\n            var selector = /** @type {?} */ ((predicate.selector));\n            for (var i = 0; i < selector.length; i++) {\n                /** @type {?} */\n                var directiveIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                if (directiveIdx !== null) {\n                    /** @type {?} */\n                    var result = null;\n                    if (predicate.read) {\n                        result = queryRead(tNode, currentView, predicate.read);\n                    }\n                    else {\n                        if (directiveIdx > -1) {\n                            result = currentView[directiveIdx];\n                        }\n                        else {\n                            // if read token and / or strategy is not specified,\n                            // detect it using appropriate tNode type\n                            result = queryReadByTNodeType(tNode, currentView);\n                        }\n                    }\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    /** @type {?} */\n    var isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : /** @type {?} */ (predicate),\n        selector: isArray ? /** @type {?} */ (predicate) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: (/** @type {?} */ ((queryList)))._valuesTree,\n        containerValues: null\n    };\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nQueryList_ = /** @class */ (function () {\n    function QueryList_() {\n        this.dirty = true;\n        this.changes = new EventEmitter();\n        this._values = [];\n        /**\n         * \\@internal\n         */\n        this._valuesTree = [];\n    }\n    Object.defineProperty(QueryList_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._values.length; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"first\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var values = this._values;\n            return values.length ? values[0] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"last\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var values = this._values;\n            return values.length ? values[values.length - 1] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._values.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList_.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._values.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._values.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._values.slice(0); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._values))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._values.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList_.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._values = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.setDirty = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList_;\n}());\nif (false) {\n    /** @type {?} */\n    QueryList_.prototype.dirty;\n    /** @type {?} */\n    QueryList_.prototype.changes;\n    /** @type {?} */\n    QueryList_.prototype._values;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    QueryList_.prototype._valuesTree;\n}\n/** @type {?} */\nexport var QueryList = /** @type {?} */ (QueryList_);\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param {?} predicate The type for which the query will search\n * @param {?=} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function query(memoryIndex, predicate, descend, \n// TODO: \"read\" should be an AbstractType (FW-486)\nread) {\n    ngDevMode && assertPreviousIsParent();\n    /** @type {?} */\n    var queryList = new QueryList();\n    /** @type {?} */\n    var queries = getOrCreateCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(null, queryList, queryList.destroy);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nexport function queryRefresh(queryList) {\n    /** @type {?} */\n    var queryListImpl = (/** @type {?} */ ((queryList)));\n    if (queryList.dirty) {\n        queryList.reset(queryListImpl._valuesTree);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/** @enum {string} */\nvar BypassType = {\n    Url: 'Url',\n    Html: 'Html',\n    ResourceUrl: 'ResourceUrl',\n    Script: 'Script',\n    Style: 'Style',\n};\nexport { BypassType };\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {\\@link TrustedHtmlString}, {\\@link TrustedResourceUrlString}, {\\@link TrustedScriptString},\n * {\\@link TrustedStyleString}, {\\@link TrustedUrlString}\n * @record\n */\nexport function TrustedString() { }\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {\\@link bypassSanitizationTrustHtml} and {\\@link htmlSanitizer}.\n * @record\n */\nexport function TrustedHtmlString() { }\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {\\@link bypassSanitizationTrustStyle} and {\\@link styleSanitizer}.\n * @record\n */\nexport function TrustedStyleString() { }\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustScript} and {\\@link scriptSanitizer}.\n * @record\n */\nexport function TrustedScriptString() { }\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustUrl} and {\\@link urlSanitizer}.\n * @record\n */\nexport function TrustedUrlString() { }\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {\\@link bypassSanitizationTrustResourceUrl} and {\\@link resourceUrlSanitizer}.\n * @record\n */\nexport function TrustedResourceUrlString() { }\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nexport function allowSanitizationBypass(value, type) {\n    return (value instanceof String && (/** @type {?} */ (value))[BRAND] === type) ? true : false;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    /** @type {?} */\n    var trusted = /** @type {?} */ (new String(trustedString));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n//# sourceMappingURL=bypass.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nvar /**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nInertBodyHelper = /** @class */ (function () {\n    function InertBodyHelper(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            /** @type {?} */\n            var inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_XHR = /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (e) {\n            return null;\n        }\n        /** @type {?} */\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        /** @type {?} */\n        var body = xhr.response.body;\n        body.removeChild(/** @type {?} */ ((body.firstChild)));\n        return body;\n    };\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            /** @type {?} */\n            var body = /** @type {?} */ (new (/** @type {?} */ (window))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body);\n            body.removeChild(/** @type {?} */ ((body.firstChild)));\n            return body;\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        /** @type {?} */\n        var templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if ((/** @type {?} */ (this.defaultDoc)).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    };\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    InertBodyHelper.prototype.stripCustomNsAttrs = /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        /** @type {?} */\n        var elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (var i = elAttrs.length - 1; 0 < i; i--) {\n            /** @type {?} */\n            var attrib = elAttrs.item(i);\n            /** @type {?} */\n            var attrName = /** @type {?} */ ((attrib)).name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        /** @type {?} */\n        var childNode = /** @type {?} */ (el.firstChild);\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(/** @type {?} */ (childNode));\n            childNode = childNode.nextSibling;\n        }\n    };\n    return InertBodyHelper;\n}());\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nexport { InertBodyHelper };\nif (false) {\n    /** @type {?} */\n    InertBodyHelper.prototype.inertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.inertDocument;\n    /**\n     * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n     * The implementation of this is determined in the constructor, when the class is instantiated.\n     * @type {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.defaultDoc;\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!(/** @type {?} */ (window)).DOMParser;\n    }\n    catch (e) {\n        return false;\n    }\n}\n//# sourceMappingURL=inert_body.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\n/** *\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n  @type {?} */\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** @type {?} */\nvar SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** *\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n  @type {?} */\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nexport function _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nexport function sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n}\n//# sourceMappingURL=url_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\nimport { InertBodyHelper } from './inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from './url_sanitizer';\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    /** @type {?} */\n    var res = {};\n    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {\n        var t = _a[_i];\n        res[t] = true;\n    }\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    /** @type {?} */\n    var res = {};\n    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {\n        var s = sets_1[_a];\n        for (var v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n/** @type {?} */\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n/** @type {?} */\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nvar OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n/** @type {?} */\nvar BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n/** @type {?} */\nvar INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nvar VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n/** @type {?} */\nvar URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n/** @type {?} */\nvar SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n/** @type {?} */\nvar VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar /**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nSanitizingHtmlSerializer = /** @class */ (function () {\n    function SanitizingHtmlSerializer() {\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        /** @type {?} */\n        var current = /** @type {?} */ ((el.firstChild));\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                this.startElement(/** @type {?} */ (current));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(/** @type {?} */ ((current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (current.firstChild) {\n                current = /** @type {?} */ ((current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(/** @type {?} */ (current));\n                }\n                /** @type {?} */\n                var next = this.checkClobberedElement(current, /** @type {?} */ ((current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, /** @type {?} */ ((current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.startElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return;\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        /** @type {?} */\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            var elAttr = elAttrs.item(i);\n            /** @type {?} */\n            var attrName = /** @type {?} */ ((elAttr)).name;\n            /** @type {?} */\n            var lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            /** @type {?} */\n            var value = /** @type {?} */ ((elAttr)).value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n    };\n    /**\n     * @param {?} current\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.endElement = /**\n     * @param {?} current\n     * @return {?}\n     */\n    function (current) {\n        /** @type {?} */\n        var tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.chars = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) { this.buf.push(encodeEntities(chars)); };\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    function (node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + ((/** @type {?} */ (node))).outerHTML);\n        }\n        return nextNode;\n    };\n    return SanitizingHtmlSerializer;\n}());\nif (false) {\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.sanitizedSomething;\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.buf;\n}\n/** @type {?} */\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n/** @type {?} */\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        /** @type {?} */\n        var hi = match.charCodeAt(0);\n        /** @type {?} */\n        var low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/** @type {?} */\nvar inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    /** @type {?} */\n    var inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        /** @type {?} */\n        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        /** @type {?} */\n        var mXSSAttempts = 5;\n        /** @type {?} */\n        var parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = /** @type {?} */ ((inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        /** @type {?} */\n        var sanitizer = new SanitizingHtmlSerializer();\n        /** @type {?} */\n        var safeHtml = sanitizer.sanitizeChildren(/** @type {?} */ (getTemplateContent(/** @type {?} */ ((inertBodyElement)))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            /** @type {?} */\n            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n    return 'content' in (/** @type {?} */ (el /** Microsoft/TypeScript#21517 */) /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n//# sourceMappingURL=html_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nexport { SecurityContext };\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n * @abstract\n */\nvar /**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n * @abstract\n */\nSanitizer = /** @class */ (function () {\n    function Sanitizer() {\n    }\n    return Sanitizer;\n}());\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n * @abstract\n */\nexport { Sanitizer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    Sanitizer.prototype.sanitize = function (context, value) { };\n}\n//# sourceMappingURL=security.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\nimport { _sanitizeUrl } from './url_sanitizer';\n/** *\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n  @type {?} */\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n/** @type {?} */\nvar COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nvar CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n    (FN_ARGS + \")$\"), 'g');\n/** *\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n  @type {?} */\nvar URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    /** @type {?} */\n    var outsideSingle = true;\n    /** @type {?} */\n    var outsideDouble = true;\n    for (var i = 0; i < value.length; i++) {\n        /** @type {?} */\n        var c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    /** @type {?} */\n    var urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n    }\n    return 'unsafe';\n}\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n * @record\n */\nexport function StyleSanitizeFn() { }\n//# sourceMappingURL=style_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getCurrentSanitizer } from '../render3/instructions';\nimport { stringify } from '../render3/util';\nimport { allowSanitizationBypass } from './bypass';\nimport { _sanitizeHtml as _sanitizeHtml } from './html_sanitizer';\nimport { SecurityContext } from './security';\nimport { _sanitizeStyle as _sanitizeStyle } from './style_sanitizer';\nimport { _sanitizeUrl as _sanitizeUrl } from './url_sanitizer';\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport function sanitizeHtml(unsafeHtml) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, stringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport function sanitizeStyle(unsafeStyle) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(stringify(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport function sanitizeUrl(unsafeUrl) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(stringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport function sanitizeResourceUrl(unsafeResourceUrl) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link bypassSanitizationTrustScript}.\n *\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts`s have been allowed to pass.\n */\nexport function sanitizeScript(unsafeScript) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/** *\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n  @type {?} */\nexport var defaultStyleSanitizer = (/** @type {?} */ (function (prop, value) {\n    if (value === undefined) {\n        return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n            prop === 'filter' || prop === 'filter' || prop === 'list-style' ||\n            prop === 'list-style-image';\n    }\n    return sanitizeStyle(value);\n}));\n//# sourceMappingURL=sanitization.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable, defineInjector, } from '../../di/defs';\nimport { inject } from '../../di/injector';\nimport * as r3 from '../index';\nimport * as sanitization from '../../sanitization/sanitization';\n/** *\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n  @type {?} */\nexport var angularCoreEnv = {\n    'ɵdefineBase': r3.defineBase,\n    'ɵdefineComponent': r3.defineComponent,\n    'ɵdefineDirective': r3.defineDirective,\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    'ɵdefineNgModule': r3.defineNgModule,\n    'ɵdefinePipe': r3.definePipe,\n    'ɵdirectiveInject': r3.directiveInject,\n    'ɵgetFactoryOf': r3.getFactoryOf,\n    'ɵgetInheritedFactory': r3.getInheritedFactory,\n    'inject': inject,\n    'ɵinjectAttribute': r3.injectAttribute,\n    'ɵtemplateRefExtractor': r3.templateRefExtractor,\n    'ɵNgOnChangesFeature': r3.NgOnChangesFeature,\n    'ɵPublicFeature': r3.PublicFeature,\n    'ɵInheritDefinitionFeature': r3.InheritDefinitionFeature,\n    'ɵelementAttribute': r3.elementAttribute,\n    'ɵbind': r3.bind,\n    'ɵcontainer': r3.container,\n    'ɵnextContext': r3.nextContext,\n    'ɵcontainerRefreshStart': r3.containerRefreshStart,\n    'ɵcontainerRefreshEnd': r3.containerRefreshEnd,\n    'ɵloadQueryList': r3.loadQueryList,\n    'ɵnamespaceHTML': r3.namespaceHTML,\n    'ɵnamespaceMathML': r3.namespaceMathML,\n    'ɵnamespaceSVG': r3.namespaceSVG,\n    'ɵenableBindings': r3.enableBindings,\n    'ɵdisableBindings': r3.disableBindings,\n    'ɵelementStart': r3.elementStart,\n    'ɵelementEnd': r3.elementEnd,\n    'ɵelement': r3.element,\n    'ɵEC': r3.elementContainerStart,\n    'ɵeC': r3.elementContainerEnd,\n    'ɵpureFunction0': r3.pureFunction0,\n    'ɵpureFunction1': r3.pureFunction1,\n    'ɵpureFunction2': r3.pureFunction2,\n    'ɵpureFunction3': r3.pureFunction3,\n    'ɵpureFunction4': r3.pureFunction4,\n    'ɵpureFunction5': r3.pureFunction5,\n    'ɵpureFunction6': r3.pureFunction6,\n    'ɵpureFunction7': r3.pureFunction7,\n    'ɵpureFunction8': r3.pureFunction8,\n    'ɵpureFunctionV': r3.pureFunctionV,\n    'ɵgetCurrentView': r3.getCurrentView,\n    'ɵrestoreView': r3.restoreView,\n    'ɵinterpolation1': r3.interpolation1,\n    'ɵinterpolation2': r3.interpolation2,\n    'ɵinterpolation3': r3.interpolation3,\n    'ɵinterpolation4': r3.interpolation4,\n    'ɵinterpolation5': r3.interpolation5,\n    'ɵinterpolation6': r3.interpolation6,\n    'ɵinterpolation7': r3.interpolation7,\n    'ɵinterpolation8': r3.interpolation8,\n    'ɵinterpolationV': r3.interpolationV,\n    'ɵelementClassProp': r3.elementClassProp,\n    'ɵlistener': r3.listener,\n    'ɵload': r3.load,\n    'ɵprojection': r3.projection,\n    'ɵelementProperty': r3.elementProperty,\n    'ɵpipeBind1': r3.pipeBind1,\n    'ɵpipeBind2': r3.pipeBind2,\n    'ɵpipeBind3': r3.pipeBind3,\n    'ɵpipeBind4': r3.pipeBind4,\n    'ɵpipeBindV': r3.pipeBindV,\n    'ɵprojectionDef': r3.projectionDef,\n    'ɵpipe': r3.pipe,\n    'ɵquery': r3.query,\n    'ɵqueryRefresh': r3.queryRefresh,\n    'ɵregisterContentQuery': r3.registerContentQuery,\n    'ɵreference': r3.reference,\n    'ɵelementStyling': r3.elementStyling,\n    'ɵelementStylingMap': r3.elementStylingMap,\n    'ɵelementStyleProp': r3.elementStyleProp,\n    'ɵelementStylingApply': r3.elementStylingApply,\n    'ɵtemplate': r3.template,\n    'ɵtext': r3.text,\n    'ɵtextBinding': r3.textBinding,\n    'ɵembeddedViewStart': r3.embeddedViewStart,\n    'ɵembeddedViewEnd': r3.embeddedViewEnd,\n    'ɵi18nAttribute': r3.i18nAttribute,\n    'ɵi18nExp': r3.i18nExp,\n    'ɵi18nStart': r3.i18nStart,\n    'ɵi18nEnd': r3.i18nEnd,\n    'ɵi18nApply': r3.i18nApply,\n    'ɵsanitizeHtml': sanitization.sanitizeHtml,\n    'ɵsanitizeStyle': sanitization.sanitizeStyle,\n    'ɵdefaultStyleSanitizer': sanitization.defaultStyleSanitizer,\n    'ɵsanitizeResourceUrl': sanitization.sanitizeResourceUrl,\n    'ɵsanitizeScript': sanitization.sanitizeScript,\n    'ɵsanitizeUrl': sanitization.sanitizeUrl\n};\n//# sourceMappingURL=environment.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LiteralExpr, R3ResolvedDependencyType, WrappedNodeExpr } from '@angular/compiler';\nimport { Injector } from '../../di/injector';\nimport { Host, Inject, Optional, Self, SkipSelf } from '../../di/metadata';\nimport { Attribute } from '../../metadata/di';\nimport { ReflectionCapabilities } from '../../reflection/reflection_capabilities';\n/** @type {?} */\nvar _reflect = null;\n/**\n * @return {?}\n */\nexport function getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nexport function convertDependencies(deps) {\n    return deps.map(function (dep) { return reflectDependency(dep); });\n}\n/**\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(dep) {\n    /** @type {?} */\n    var meta = {\n        token: new LiteralExpr(null),\n        host: false,\n        optional: false,\n        resolved: R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function setTokenAndResolvedType(token) {\n        if (token === Injector) {\n            meta.resolved = R3ResolvedDependencyType.Injector;\n        }\n        else {\n            meta.resolved = R3ResolvedDependencyType.Token;\n        }\n        meta.token = new WrappedNodeExpr(token);\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (var j = 0; j < dep.length; j++) {\n            /** @type {?} */\n            var param = dep[j];\n            if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = new WrappedNodeExpr(param.token);\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(\"Attribute name must be defined.\");\n                }\n                meta.token = new LiteralExpr(param.attributeName);\n                meta.resolved = R3ResolvedDependencyType.Attribute;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedNodeExpr, compileInjector, compileNgModule as compileR3NgModule, jitExpression } from '@angular/compiler';\nimport { getComponentDef, getDirectiveDef, getNgModuleDef, getPipeDef } from '../definition';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_INJECTOR_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from '../fields';\nimport { angularCoreEnv } from './environment';\nimport { reflectDependencies } from './util';\n/** @type {?} */\nvar EMPTY_ARRAY = [];\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nexport function compileNgModule(moduleType, ngModule) {\n    compileNgModuleDefs(moduleType, ngModule);\n    setScopeOnDeclaredComponents(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nexport function compileNgModuleDefs(moduleType, ngModule) {\n    /** @type {?} */\n    var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    /** @nocollapse */ var ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        get: function () {\n            if (ngModuleDef === null) {\n                /** @type {?} */\n                var meta = {\n                    type: wrap(moduleType),\n                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrapReference),\n                    declarations: declarations.map(wrapReference),\n                    imports: flatten(ngModule.imports || EMPTY_ARRAY)\n                        .map(expandModuleWithProviders)\n                        .map(wrapReference),\n                    exports: flatten(ngModule.exports || EMPTY_ARRAY)\n                        .map(expandModuleWithProviders)\n                        .map(wrapReference),\n                    emitInline: true,\n                };\n                /** @type {?} */\n                var res = compileR3NgModule(meta);\n                ngModuleDef = jitExpression(res.expression, angularCoreEnv, \"ng://\" + moduleType.name + \"/ngModuleDef.js\", []);\n            }\n            return ngModuleDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    /** @type {?} */\n    /** @nocollapse */ var ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: function () {\n            if (ngInjectorDef === null) {\n                /** @type {?} */\n                var meta = {\n                    name: moduleType.name,\n                    type: wrap(moduleType),\n                    deps: reflectDependencies(moduleType),\n                    providers: new WrappedNodeExpr(ngModule.providers || EMPTY_ARRAY),\n                    imports: new WrappedNodeExpr([\n                        ngModule.imports || EMPTY_ARRAY,\n                        ngModule.exports || EMPTY_ARRAY,\n                    ]),\n                };\n                /** @type {?} */\n                var res = compileInjector(meta);\n                ngInjectorDef = jitExpression(res.expression, angularCoreEnv, \"ng://\" + moduleType.name + \"/ngInjectorDef.js\", res.statements);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    /** @type {?} */\n    var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    var transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(function (declaration) {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            /** @type {?} */\n            var component = /** @type {?} */ (declaration);\n            /** @type {?} */\n            var componentDef = /** @type {?} */ ((getComponentDef(component)));\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            (/** @type {?} */ (declaration)).ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} componentDef\n * @param {?} transitiveScopes\n * @return {?}\n */\nexport function patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = function () { return Array.from(transitiveScopes.compilation.directives)\n        .map(function (dir) { return getDirectiveDef(dir) || /** @type {?} */ ((getComponentDef(dir))); })\n        .filter(function (def) { return !!def; }); };\n    componentDef.pipeDefs = function () {\n        return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) { return ((getPipeDef(pipe))); });\n    };\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nexport function transitiveScopesFor(moduleType) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(moduleType.name + \" does not have an ngModuleDef\");\n    }\n    /** @type {?} */\n    var def = /** @type {?} */ ((getNgModuleDef(moduleType)));\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    /** @type {?} */\n    var scopes = {\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    def.declarations.forEach(function (declared) {\n        /** @type {?} */\n        var declaredWithDefs = /** @type {?} */ (declared);\n        if (getPipeDef(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    def.imports.forEach(function (imported) {\n        /** @type {?} */\n        var importedTyped = /** @type {?} */ (imported);\n        if (!isNgModule(importedTyped)) {\n            throw new Error(\"Importing \" + importedTyped.name + \" which does not have an ngModuleDef\");\n        }\n        /** @type {?} */\n        var importedScope = transitiveScopesFor(importedTyped);\n        importedScope.exported.directives.forEach(function (entry) { return scopes.compilation.directives.add(entry); });\n        importedScope.exported.pipes.forEach(function (entry) { return scopes.compilation.pipes.add(entry); });\n    });\n    def.exports.forEach(function (exported) {\n        /** @type {?} */\n        var exportedTyped = /** @type {?} */ (exported);\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedTyped)) {\n            /** @type {?} */\n            var exportedScope = transitiveScopesFor(exportedTyped);\n            exportedScope.exported.directives.forEach(function (entry) {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(function (entry) {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getNgModuleDef(exportedTyped)) {\n            scopes.exported.pipes.add(exportedTyped);\n        }\n        else {\n            scopes.exported.directives.add(exportedTyped);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\n/**\n * @template T\n * @param {?} values\n * @return {?}\n */\nfunction flatten(values) {\n    /** @type {?} */\n    var out = [];\n    values.forEach(function (value) {\n        if (Array.isArray(value)) {\n            out.push.apply(out, flatten(value));\n        }\n        else {\n            out.push(value);\n        }\n    });\n    return out;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction wrap(value) {\n    return new WrappedNodeExpr(value);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction wrapReference(value) {\n    /** @type {?} */\n    var wrapped = wrap(value);\n    return { value: wrapped, type: wrapped };\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n    return (/** @type {?} */ (value)).ngModule !== undefined;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\n//# sourceMappingURL=module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ConstantPool, WrappedNodeExpr, compileComponentFromMetadata as compileR3Component, compileDirectiveFromMetadata as compileR3Directive, jitExpression, makeBindingParser, parseHostBindings, parseTemplate } from '@angular/compiler';\nimport { componentNeedsResolution, maybeQueueResolutionOfComponentResources } from '../../metadata/resource_loading';\nimport { ViewEncapsulation } from '../../metadata/view';\nimport { stringify } from '../../util';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF } from '../fields';\nimport { angularCoreEnv } from './environment';\nimport { patchComponentDefWithScope, transitiveScopesFor } from './module';\nimport { getReflect, reflectDependencies } from './util';\n/** @typedef {?} */\nvar StringMap;\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nexport function compileComponent(type, metadata) {\n    /** @type {?} */\n    /** @nocollapse */ var ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: function () {\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    /** @type {?} */\n                    var error = [\"Component '\" + stringify(type) + \"' is not resolved:\"];\n                    if (metadata.templateUrl) {\n                        error.push(\" - templateUrl: \" + stringify(metadata.templateUrl));\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(\" - styleUrls: \" + JSON.stringify(metadata.styleUrls));\n                    }\n                    error.push(\"Did you run and wait for 'resolveComponentResources()'?\");\n                    throw new Error(error.join('\\n'));\n                }\n                /** @type {?} */\n                var constantPool = new ConstantPool();\n                /** @type {?} */\n                var template = parseTemplate(/** @type {?} */ ((metadata.template)), \"ng://\" + stringify(type) + \"/template.html\", {\n                    preserveWhitespaces: metadata.preserveWhitespaces || false,\n                }, '');\n                if (template.errors !== undefined) {\n                    /** @type {?} */\n                    var errors = template.errors.map(function (err) { return err.toString(); }).join(', ');\n                    throw new Error(\"Errors during JIT compilation of template for \" + stringify(type) + \": \" + errors);\n                }\n                /** @type {?} */\n                var animations = metadata.animations !== null ? new WrappedNodeExpr(metadata.animations) : null;\n                /** @type {?} */\n                var res = compileR3Component(tslib_1.__assign({}, directiveMetadata(type, metadata), { template: template, directives: new Map(), pipes: new Map(), viewQueries: [], wrapDirectivesInClosure: false, styles: metadata.styles || [], encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated, animations: animations }), constantPool, makeBindingParser());\n                /** @type {?} */\n                var preStatements = constantPool.statements.concat(res.statements);\n                ngComponentDef = jitExpression(res.expression, angularCoreEnv, \"ng://\" + type.name + \"/ngComponentDef.js\", preStatements);\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    /** @type {?} */\n                    var scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n            }\n            return ngComponentDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n    return (/** @type {?} */ (component)).ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nexport function compileDirective(type, directive) {\n    /** @type {?} */\n    /** @nocollapse */ var ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: function () {\n            if (ngDirectiveDef === null) {\n                /** @type {?} */\n                var constantPool = new ConstantPool();\n                /** @type {?} */\n                var sourceMapUrl = \"ng://\" + (type && type.name) + \"/ngDirectiveDef.js\";\n                /** @type {?} */\n                var res = compileR3Directive(directiveMetadata(type, directive), constantPool, makeBindingParser());\n                /** @type {?} */\n                var preStatements = constantPool.statements.concat(res.statements);\n                ngDirectiveDef = jitExpression(res.expression, angularCoreEnv, sourceMapUrl, preStatements);\n            }\n            return ngDirectiveDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n    /** @type {?} */\n    var propMetadata = getReflect().propMetadata(type);\n    /** @type {?} */\n    var host = extractHostBindings(metadata, propMetadata);\n    /** @type {?} */\n    var inputsFromMetadata = parseInputOutputs(metadata.inputs || []);\n    /** @type {?} */\n    var outputsFromMetadata = parseInputOutputs(metadata.outputs || []);\n    /** @type {?} */\n    var inputsFromType = {};\n    /** @type {?} */\n    var outputsFromType = {};\n    var _loop_1 = function (field) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(function (ann) {\n                if (isInput(ann)) {\n                    inputsFromType[field] = ann.bindingPropertyName || field;\n                }\n                else if (isOutput(ann)) {\n                    outputsFromType[field] = ann.bindingPropertyName || field;\n                }\n            });\n        }\n    };\n    for (var field in propMetadata) {\n        _loop_1(field);\n    }\n    return {\n        name: type.name,\n        type: new WrappedNodeExpr(type),\n        typeArgumentCount: 0,\n        selector: /** @type {?} */ ((metadata.selector)),\n        deps: reflectDependencies(type), host: host,\n        inputs: tslib_1.__assign({}, inputsFromMetadata, inputsFromType),\n        outputs: tslib_1.__assign({}, outputsFromMetadata, outputsFromType),\n        queries: [],\n        lifecycle: {\n            usesOnChanges: type.prototype.ngOnChanges !== undefined,\n        },\n        typeSourceSpan: /** @type {?} */ ((null)),\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: metadata.exportAs || null,\n    };\n}\n/**\n * @param {?} metadata\n * @param {?} propMetadata\n * @return {?}\n */\nfunction extractHostBindings(metadata, propMetadata) {\n    var _a = parseHostBindings(metadata.host || {}), attributes = _a.attributes, listeners = _a.listeners, properties = _a.properties, animations = _a.animations;\n    if (Object.keys(animations).length > 0) {\n        throw new Error(\"Animation bindings are as-of-yet unsupported in Ivy\");\n    }\n    var _loop_2 = function (field) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(function (ann) {\n                if (isHostBinding(ann)) {\n                    properties[ann.hostPropertyName || field] = field;\n                }\n                else if (isHostListener(ann)) {\n                    listeners[ann.eventName || field] = field + \"(\" + (ann.args || []).join(',') + \")\";\n                }\n            });\n        }\n    };\n    // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n    for (var field in propMetadata) {\n        _loop_2(field);\n    }\n    return { attributes: attributes, listeners: listeners, properties: properties };\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isInput(value) {\n    return value.ngMetadataName === 'Input';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isOutput(value) {\n    return value.ngMetadataName === 'Output';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isHostBinding(value) {\n    return value.ngMetadataName === 'HostBinding';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isHostListener(value) {\n    return value.ngMetadataName === 'HostListener';\n}\n/**\n * @param {?} values\n * @return {?}\n */\nfunction parseInputOutputs(values) {\n    return values.reduce(function (map, value) {\n        var _a = value.split(',').map(function (piece) { return piece.trim(); }), field = _a[0], property = _a[1];\n        map[field] = property || field;\n        return map;\n    }, /** @type {?} */ ({}));\n}\n//# sourceMappingURL=directive.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LiteralExpr, WrappedNodeExpr, compileInjectable as compileR3Injectable, jitExpression } from '@angular/compiler';\nimport { getClosureSafeProperty } from '../../util/property';\nimport { NG_INJECTABLE_DEF } from '../fields';\nimport { angularCoreEnv } from './environment';\nimport { convertDependencies, reflectDependencies } from './util';\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n * @param {?} type\n * @param {?=} srcMeta\n * @return {?}\n */\nexport function compileInjectable(type, srcMeta) {\n    /** @type {?} */\n    var meta = srcMeta || { providedIn: null };\n    /** @type {?} */\n    var def = null;\n    Object.defineProperty(type, NG_INJECTABLE_DEF, {\n        get: function () {\n            if (def === null) {\n                /** @type {?} */\n                var hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n                    isUseValueProvider(meta) || isUseExistingProvider(meta);\n                /** @type {?} */\n                var ctorDeps = reflectDependencies(type);\n                /** @type {?} */\n                var userDeps = undefined;\n                if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n                    userDeps = convertDependencies(meta.deps);\n                }\n                /** @type {?} */\n                var useClass = undefined;\n                /** @type {?} */\n                var useFactory = undefined;\n                /** @type {?} */\n                var useValue = undefined;\n                /** @type {?} */\n                var useExisting = undefined;\n                if (!hasAProvider) {\n                    // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                    // The deps will have been reflected above, causing the factory to create the class by\n                    // calling\n                    // its constructor with injected deps.\n                    useClass = new WrappedNodeExpr(type);\n                }\n                else if (isUseClassProvider(meta)) {\n                    // The user explicitly specified useClass, and may or may not have provided deps.\n                    useClass = new WrappedNodeExpr(meta.useClass);\n                }\n                else if (isUseValueProvider(meta)) {\n                    // The user explicitly specified useValue.\n                    useValue = new WrappedNodeExpr(meta.useValue);\n                }\n                else if (isUseFactoryProvider(meta)) {\n                    // The user explicitly specified useFactory.\n                    useFactory = new WrappedNodeExpr(meta.useFactory);\n                }\n                else if (isUseExistingProvider(meta)) {\n                    // The user explicitly specified useExisting.\n                    useExisting = new WrappedNodeExpr(meta.useExisting);\n                }\n                else {\n                    // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                    throw new Error(\"Unreachable state.\");\n                }\n                var _a = compileR3Injectable({\n                    name: type.name,\n                    type: new WrappedNodeExpr(type),\n                    providedIn: computeProvidedIn(meta.providedIn),\n                    useClass: useClass,\n                    useFactory: useFactory,\n                    useValue: useValue,\n                    useExisting: useExisting,\n                    ctorDeps: ctorDeps,\n                    userDeps: userDeps,\n                }), expression = _a.expression, statements = _a.statements;\n                def = jitExpression(expression, angularCoreEnv, \"ng://\" + type.name + \"/ngInjectableDef.js\", statements);\n            }\n            return def;\n        },\n    });\n}\n/**\n * @param {?} providedIn\n * @return {?}\n */\nfunction computeProvidedIn(providedIn) {\n    if (providedIn == null || typeof providedIn === 'string') {\n        return new LiteralExpr(providedIn);\n    }\n    else {\n        return new WrappedNodeExpr(providedIn);\n    }\n}\n/** @typedef {?} */\nvar UseClassProvider;\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseClassProvider(meta) {\n    return (/** @type {?} */ (meta)).useClass !== undefined;\n}\nvar ɵ0 = getClosureSafeProperty;\n/** @type {?} */\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0 });\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseValueProvider(meta) {\n    return USE_VALUE in meta;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseFactoryProvider(meta) {\n    return (/** @type {?} */ (meta)).useFactory !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseExistingProvider(meta) {\n    return (/** @type {?} */ (meta)).useExisting !== undefined;\n}\nexport { ɵ0 };\n//# sourceMappingURL=injectable.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedNodeExpr, compilePipeFromMetadata, jitExpression } from '@angular/compiler';\nimport { NG_PIPE_DEF } from '../fields';\nimport { stringify } from '../util';\nimport { angularCoreEnv } from './environment';\nimport { reflectDependencies } from './util';\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nexport function compilePipe(type, meta) {\n    /** @type {?} */\n    /** @nocollapse */ var ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: function () {\n            if (ngPipeDef === null) {\n                /** @type {?} */\n                var sourceMapUrl = \"ng://\" + stringify(type) + \"/ngPipeDef.js\";\n                /** @type {?} */\n                var name_1 = type.name;\n                /** @type {?} */\n                var res = compilePipeFromMetadata({\n                    name: name_1,\n                    type: new WrappedNodeExpr(type),\n                    deps: reflectDependencies(type),\n                    pipeName: meta.name,\n                    pure: meta.pure !== undefined ? meta.pure : true,\n                });\n                ngPipeDef = jitExpression(res.expression, angularCoreEnv, sourceMapUrl, res.statements);\n            }\n            return ngPipeDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n//# sourceMappingURL=pipe.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable, defineInjector, getInjectableDef } from '../../di/defs';\nimport { inject, injectArgs } from '../../di/injector';\nimport { ReflectionCapabilities } from '../../reflection/reflection_capabilities';\nimport { getClosureSafeProperty } from '../../util/property';\nimport * as ivyOn from './ivy_switch_on';\n/**\n * @return {?}\n */\nfunction noop() { }\n/**\n * @record\n */\nexport function DirectiveCompiler() { }\n/** @type {?} */\nexport var R3_COMPILE_COMPONENT__POST_NGCC__ = ivyOn.R3_COMPILE_COMPONENT;\n/** @type {?} */\nexport var R3_COMPILE_DIRECTIVE__POST_NGCC__ = ivyOn.R3_COMPILE_DIRECTIVE;\n/** @type {?} */\nexport var R3_COMPILE_INJECTABLE__POST_NGCC__ = ivyOn.R3_COMPILE_INJECTABLE;\n/** @type {?} */\nexport var R3_COMPILE_NGMODULE__POST_NGCC__ = ivyOn.R3_COMPILE_NGMODULE;\n/** @type {?} */\nexport var R3_COMPILE_PIPE__POST_NGCC__ = ivyOn.R3_COMPILE_PIPE;\n/** @type {?} */\nexport var R3_COMPILE_NGMODULE_DEFS__POST_NGCC__ = ivyOn.R3_COMPILE_NGMODULE_DEFS;\n/** @type {?} */\nexport var R3_PATCH_COMPONENT_DEF_WTIH_SCOPE__POST_NGCC__ = ivyOn.R3_PATCH_COMPONENT_DEF_WTIH_SCOPE;\n/** @type {?} */\nexport var ivyEnable__POST_NGCC__ = ivyOn.ivyEnabled;\n/** @type {?} */\nvar R3_COMPILE_COMPONENT__PRE_NGCC__ = noop;\n/** @type {?} */\nvar R3_COMPILE_DIRECTIVE__PRE_NGCC__ = noop;\n/** @type {?} */\nvar R3_COMPILE_INJECTABLE__PRE_NGCC__ = preR3InjectableCompile;\n/** @type {?} */\nvar R3_COMPILE_NGMODULE__PRE_NGCC__ = preR3NgModuleCompile;\n/** @type {?} */\nvar R3_COMPILE_PIPE__PRE_NGCC__ = noop;\n/** @type {?} */\nvar R3_COMPILE_NGMODULE_DEFS__PRE_NGCC__ = noop;\n/** @type {?} */\nvar R3_PATCH_COMPONENT_DEF_WTIH_SCOPE__PRE_NGCC__ = noop;\n/** @type {?} */\nvar ivyEnable__PRE_NGCC__ = false;\n/** @type {?} */\nexport var ivyEnabled = ivyEnable__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_COMPONENT = R3_COMPILE_COMPONENT__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_DIRECTIVE = R3_COMPILE_DIRECTIVE__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_INJECTABLE = R3_COMPILE_INJECTABLE__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_NGMODULE = R3_COMPILE_NGMODULE__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_PIPE = R3_COMPILE_PIPE__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_NGMODULE_DEFS = R3_COMPILE_NGMODULE_DEFS__PRE_NGCC__;\n/** @type {?} */\nexport var R3_PATCH_COMPONENT_DEF_WTIH_SCOPE = R3_PATCH_COMPONENT_DEF_WTIH_SCOPE__PRE_NGCC__;\n/**\n * @param {?} moduleType\n * @param {?} metadata\n * @return {?}\n */\nfunction preR3NgModuleCompile(moduleType, metadata) {\n    /** @type {?} */\n    var imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = imports.concat([metadata.exports]);\n    }\n    /** @nocollapse */ moduleType.ngInjectorDef = defineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n}\nvar ɵ0 = getClosureSafeProperty;\n/** @type {?} */\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0 });\n/** @type {?} */\nvar EMPTY_ARRAY = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nfunction convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        /** @type {?} */\n        var reflectionCapabilities = new ReflectionCapabilities();\n        /** @type {?} */\n        var deps_1 = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ (deps_1)))))(); };\n    }\n    if (USE_VALUE in provider) {\n        /** @type {?} */\n        var valueProvider_1 = (/** @type {?} */ (provider));\n        return function () { return valueProvider_1.useValue; };\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        /** @type {?} */\n        var existingProvider_1 = (/** @type {?} */ (provider));\n        return function () { return inject(existingProvider_1.useExisting); };\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        /** @type {?} */\n        var factoryProvider_1 = (/** @type {?} */ (provider));\n        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, injectArgs(factoryProvider_1.deps || EMPTY_ARRAY)); };\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        /** @type {?} */\n        var classProvider_1 = (/** @type {?} */ (provider));\n        /** @type {?} */\n        var deps_2 = (/** @type {?} */ (provider)).deps;\n        if (!deps_2) {\n            /** @type {?} */\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_2 = reflectionCapabilities.parameters(type);\n        }\n        return function () {\n            var _a;\n            return new ((_a = classProvider_1.useClass).bind.apply(_a, [void 0].concat(injectArgs(deps_2))))();\n        };\n    }\n    else {\n        /** @type {?} */\n        var deps_3 = (/** @type {?} */ (provider)).deps;\n        if (!deps_3) {\n            /** @type {?} */\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_3 = reflectionCapabilities.parameters(type);\n        }\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ ((deps_3))))))(); };\n    }\n}\n/**\n * Supports \\@Injectable() in JIT mode for Render2.\n * @param {?} injectableType\n * @param {?} options\n * @return {?}\n */\nfunction preR3InjectableCompile(injectableType, options) {\n    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n        /** @nocollapse */ injectableType.ngInjectableDef = defineInjectable({\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options),\n        });\n    }\n}\nexport { ɵ0 };\n//# sourceMappingURL=legacy.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { R3_COMPILE_COMPONENT, R3_COMPILE_DIRECTIVE, R3_COMPILE_PIPE } from '../ivy_switch/compiler/index';\nimport { NG_BASE_DEF } from '../render3/fields';\nimport { makeDecorator, makePropDecorator } from '../util/decorators';\nimport { fillProperties } from '../util/property';\n/**\n * Type of the Directive decorator / constructor function.\n * @record\n */\nexport function DirectiveDecorator() { }\n/** *\n * Type of the Directive metadata.\n  @type {?} */\nexport var Directive = makeDecorator('Directive', function (dir) {\n    if (dir === void 0) { dir = {}; }\n    return dir;\n}, undefined, undefined, function (type, meta) { return R3_COMPILE_DIRECTIVE(type, meta); });\n/**\n * Component decorator interface\n *\n * @record\n */\nexport function ComponentDecorator() { }\n/** *\n * Component decorator and metadata.\n *\n * \\@usageNotes\n *\n * ### Using animations\n *\n * The following snippet shows an animation trigger in a component's\n * metadata. The trigger is attached to an element in the component's\n * template, using \"\\@_trigger_name_\", and a state expression that is evaluated\n * at run time to determine whether the animation should start.\n *\n * ```typescript\n * \\@Component({\n *   selector: 'animation-cmp',\n *   templateUrl: 'animation-cmp.html',\n *   animations: [\n *     trigger('myTriggerName', [\n *       state('on', style({ opacity: 1 }),\n *       state('off', style({ opacity: 0 }),\n *       transition('on => off', [\n *         animate(\"1s\")\n *       ])\n *     ])\n *   ]\n * })\n * ```\n *\n * ```html\n * <!-- animation-cmp.html -->\n * <div \\@myTriggerName=\"expression\">...</div>\n * ```\n *\n * ### Preserving whitespace\n *\n * Removing whitespace can greatly reduce AOT-generated code size, and speed up view creation.\n * As of Angular 6, default for `preserveWhitespaces` is false (whitespace is removed).\n * To change the default setting for all components in your application, set\n * the `preserveWhitespaces` option of the AOT compiler.\n *\n * Current implementation removes whitespace characters as follows:\n * - Trims all whitespaces at the beginning and the end of a template.\n * - Removes whitespace-only text nodes. For example,\n * `<button>Action 1</button>  <button>Action 2</button>` becomes\n * `<button>Action 1</button><button>Action 2</button>`.\n * - Replaces a series of whitespace characters in text nodes with a single space.\n * For example, `<span>\\n some text\\n</span>` becomes `<span> some text </span>`.\n * - Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,\n * where whitespace characters are significant.\n *\n * Note that these transformations can influence DOM nodes layout, although impact\n * should be minimal.\n *\n * You can override the default behavior to preserve whitespace characters\n * in certain fragments of a template. For example, you can exclude an entire\n * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:\n *\n * ```html\n * <div ngPreserveWhitespaces>\n *     whitespaces are preserved here\n *     <span>    and here </span>\n * </div>\n * ```\n *\n * You can force a single space to be preserved in a text node by using `&ngsp;`,\n * which is replaced with a space character by Angular's template\n * compiler:\n *\n * ```html\n * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n * <!-->compiled to be equivalent to:</>\n *  <a>Spaces</a> <a>between</a> <a>links.</a>\n * ```\n *\n * Note that sequences of `&ngsp;` are still collapsed to just one space character when\n * the `preserveWhitespaces` option is set to `false`.\n *\n * ```html\n * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n * <!-->compiled to be equivalent to:</>\n *  <a>Spaces</a> <a>between</a> <a>links.</a>\n * ```\n *\n * To preserve sequences of whitespace characters, use the\n * `ngPreserveWhitespaces` attribute.\n *\n * \\@Annotation\n  @type {?} */\nexport var Component = makeDecorator('Component', function (c) {\n    if (c === void 0) { c = {}; }\n    return (tslib_1.__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\n}, Directive, undefined, function (type, meta) { return R3_COMPILE_COMPONENT(type, meta); });\n/**\n * Type of the Pipe decorator / constructor function.\n * @record\n */\nexport function PipeDecorator() { }\n/** *\n *\n *\n * \\@Annotation\n  @type {?} */\nexport var Pipe = makeDecorator('Pipe', function (p) { return (tslib_1.__assign({ pure: true }, p)); }, undefined, undefined, function (type, meta) { return R3_COMPILE_PIPE(type, meta); });\n/**\n *\n * @record\n */\nexport function InputDecorator() { }\n/** @type {?} */\nvar initializeBaseDef = function (target) {\n    /** @type {?} */\n    var constructor = target.constructor;\n    /** @nocollapse @type {?} */\n    var inheritedBaseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    var baseDef = constructor.ngBaseDef = {\n        inputs: {},\n        outputs: {},\n        declaredInputs: {},\n    };\n    if (inheritedBaseDef) {\n        fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n        fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n        fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n    }\n};\nvar ɵ0 = initializeBaseDef;\n/** *\n * Does the work of creating the `ngBaseDef` property for the \\@Input and \\@Output decorators.\n * \\@param key \"inputs\" or \"outputs\"\n  @type {?} */\nvar updateBaseDefFromIOProp = function (getProp) {\n    return function (target, name) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        /** @type {?} */\n        var constructor = target.constructor;\n        if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n            initializeBaseDef(target);\n        }\n        /** @nocollapse @type {?} */\n        var baseDef = constructor.ngBaseDef;\n        /** @type {?} */\n        var defProp = getProp(baseDef);\n        defProp[name] = args[0];\n    };\n};\nvar ɵ1 = updateBaseDefFromIOProp;\n/** *\n *\n * \\@Annotation\n  @type {?} */\nexport var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.inputs || {}; }));\n/**\n * Type of the Output decorator / constructor function.\n * @record\n */\nexport function OutputDecorator() { }\n/** *\n *\n * \\@Annotation\n  @type {?} */\nexport var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.outputs || {}; }));\n/**\n * Type of the HostBinding decorator / constructor function.\n * @record\n */\nexport function HostBindingDecorator() { }\n/** *\n *\n * \\@Annotation\n  @type {?} */\nexport var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n/**\n * Type of the HostListener decorator / constructor function.\n * @record\n */\nexport function HostListenerDecorator() { }\n/** *\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n  @type {?} */\nexport var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\nexport { ɵ0, ɵ1 };\n//# sourceMappingURL=directives.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n *\n */\nvar /**\n * \\@description Represents the version of Angular\n *\n *\n */\nVersion = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n    return Version;\n}());\n/**\n * \\@description Represents the version of Angular\n *\n *\n */\nexport { Version };\nif (false) {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/** @type {?} */\nexport var VERSION = new Version('7.0.0-rc.1-1c561a833c');\n//# sourceMappingURL=version.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nexport var ERROR_TYPE = 'ngType';\n/** @type {?} */\nexport var ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n/** @type {?} */\nexport var ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n/** @type {?} */\nexport var ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getType(error) {\n    return (/** @type {?} */ (error))[ERROR_TYPE];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getDebugContext(error) {\n    return (/** @type {?} */ (error))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getOriginalError(error) {\n    return (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getErrorLogger(error) {\n    return (/** @type {?} */ (error))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    console.error.apply(console, values);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError } from './errors';\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n */\nvar /**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n */\nErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype.handleError = /**\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        /** @type {?} */\n        var originalError = this._findOriginalError(error);\n        /** @type {?} */\n        var context = this._findContext(error);\n        /** @type {?} */\n        var errorLogger = getErrorLogger(error);\n        errorLogger(this._console, \"ERROR\", error);\n        if (originalError) {\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findContext = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findOriginalError = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        /** @type {?} */\n        var e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    };\n    return ErrorHandler;\n}());\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n */\nexport { ErrorHandler };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ErrorHandler.prototype._console;\n}\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nexport function wrappedError(message, originalError) {\n    /** @type {?} */\n    var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n    /** @type {?} */\n    var error = Error(msg);\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n//# sourceMappingURL=error_handler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { wrappedError } from '../error_handler';\nimport { ERROR_ORIGINAL_ERROR } from '../errors';\nimport { stringify } from '../util';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    /** @type {?} */\n    var res = [];\n    for (var i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        /** @type {?} */\n        var reversed = findFirstClosedCycle(keys.slice().reverse());\n        /** @type {?} */\n        var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @record\n */\nexport function InjectionError() { }\n/** @type {?} */\nInjectionError.prototype.keys;\n/** @type {?} */\nInjectionError.prototype.injectors;\n/** @type {?} */\nInjectionError.prototype.constructResolvingMessage;\n/** @type {?} */\nInjectionError.prototype.addKey;\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    /** @type {?} */\n    var keys = [key];\n    /** @type {?} */\n    var errMsg = constructResolvingMessage(keys);\n    /** @type {?} */\n    var error = /** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        var first = stringify(keys[0].token);\n        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nexport function instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        var first = stringify(keys[0].token);\n        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n    }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nexport function invalidProviderError(provider) {\n    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nexport function noAnnotationError(typeOrFunc, params) {\n    /** @type {?} */\n    var signature = [];\n    for (var i = 0, ii = params.length; i < ii; i++) {\n        /** @type {?} */\n        var parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nexport function outOfBoundsError(index) {\n    return Error(\"Index \" + index + \" is out-of-bounds.\");\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nexport function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n}\n//# sourceMappingURL=reflective_errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { resolveForwardRef } from './forward_ref';\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nvar /**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nReflectiveKey = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveKey(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    ReflectiveKey.get = /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    };\n    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n        /**\n         * @returns the number of keys registered in the system.\n         */\n        get: /**\n         * @return {?} the number of keys registered in the system.\n         */\n        function () { return _globalKeyRegistry.numberOfKeys; },\n        enumerable: true,\n        configurable: true\n    });\n    return ReflectiveKey;\n}());\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nexport { ReflectiveKey };\nif (false) {\n    /** @type {?} */\n    ReflectiveKey.prototype.displayName;\n    /** @type {?} */\n    ReflectiveKey.prototype.token;\n    /** @type {?} */\n    ReflectiveKey.prototype.id;\n}\nvar KeyRegistry = /** @class */ (function () {\n    function KeyRegistry() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    KeyRegistry.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return /** @type {?} */ ((this._allKeys.get(token)));\n        }\n        /** @type {?} */\n        var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    };\n    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._allKeys.size; },\n        enumerable: true,\n        configurable: true\n    });\n    return KeyRegistry;\n}());\nexport { KeyRegistry };\nif (false) {\n    /** @type {?} */\n    KeyRegistry.prototype._allKeys;\n}\n/** @type {?} */\nvar _globalKeyRegistry = new KeyRegistry();\n//# sourceMappingURL=reflective_key.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nvar /**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nReflector = /** @class */ (function () {\n    function Reflector(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    /**\n     * @param {?} caps\n     * @return {?}\n     */\n    Reflector.prototype.updateCapabilities = /**\n     * @param {?} caps\n     * @return {?}\n     */\n    function (caps) { this.reflectionCapabilities = caps; };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.factory = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.factory(type); };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.parameters = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    Reflector.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.getter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.setter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.method(name); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.importUri(type); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.resourceUri(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    Reflector.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.resolveEnum = /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    };\n    return Reflector;\n}());\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nexport { Reflector };\nif (false) {\n    /** @type {?} */\n    Reflector.prototype.reflectionCapabilities;\n}\n//# sourceMappingURL=reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { reflector } from '../reflection/reflection';\nimport { Type } from '../type';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nimport { invalidProviderError, mixingMultiProvidersWithRegularProvidersError, noAnnotationError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\n/**\n * @record\n */\nfunction NormalizedProvider() { }\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nvar /**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nReflectiveDependency = /** @class */ (function () {\n    function ReflectiveDependency(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    ReflectiveDependency.fromKey = /**\n     * @param {?} key\n     * @return {?}\n     */\n    function (key) {\n        return new ReflectiveDependency(key, false, null);\n    };\n    return ReflectiveDependency;\n}());\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport { ReflectiveDependency };\nif (false) {\n    /** @type {?} */\n    ReflectiveDependency.prototype.key;\n    /** @type {?} */\n    ReflectiveDependency.prototype.optional;\n    /** @type {?} */\n    ReflectiveDependency.prototype.visibility;\n}\n/** @type {?} */\nvar _EMPTY_LIST = [];\n/**\n * An internal resolved representation of a `Provider` used by the `Injector`.\n *\n * \\@usageNotes\n * This is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * \\@experimental\n * @record\n */\nexport function ResolvedReflectiveProvider() { }\n/**\n * A key, usually a `Type<any>`.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.key;\n/**\n * Factory function which can return an instance of an object represented by a key.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.resolvedFactories;\n/**\n * Indicates if the provider is a multi-provider or a regular provider.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.multiProvider;\nvar ResolvedReflectiveProvider_ = /** @class */ (function () {\n    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n    return ResolvedReflectiveProvider_;\n}());\nexport { ResolvedReflectiveProvider_ };\nif (false) {\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactory;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.key;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactories;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.multiProvider;\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@experimental\n */\nvar /**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@experimental\n */\nResolvedReflectiveFactory = /** @class */ (function () {\n    function ResolvedReflectiveFactory(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n    return ResolvedReflectiveFactory;\n}());\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@experimental\n */\nexport { ResolvedReflectiveFactory };\nif (false) {\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.factory;\n    /**\n     * Arguments (dependencies) to the `factory` function.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.dependencies;\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    /** @type {?} */\n    var factoryFn;\n    /** @type {?} */\n    var resolvedDeps;\n    if (provider.useClass) {\n        /** @type {?} */\n        var useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = function (aliasInstance) { return aliasInstance; };\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = function () { return provider.useValue; };\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(providers) {\n    /** @type {?} */\n    var normalized = _normalizeProviders(providers, []);\n    /** @type {?} */\n    var resolved = normalized.map(resolveReflectiveProvider);\n    /** @type {?} */\n    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (var i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        var provider = providers[i];\n        /** @type {?} */\n        var existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (var j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            /** @type {?} */\n            var resolvedProvider = void 0;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(function (b) {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && (/** @type {?} */ (b)).provide !== undefined) {\n            res.push(/** @type {?} */ (b));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nexport function constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        /** @type {?} */\n        var params_1 = dependencies.map(function (t) { return [t]; });\n        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    /** @type {?} */\n    var params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(function (p) { return p == null; })) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    /** @type {?} */\n    var token = null;\n    /** @type {?} */\n    var optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    /** @type {?} */\n    var visibility = null;\n    for (var i = 0; i < metadata.length; ++i) {\n        /** @type {?} */\n        var paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n//# sourceMappingURL=reflective_provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector, THROW_IF_NOT_FOUND } from './injector';\nimport { Self, SkipSelf } from './metadata';\nimport { cyclicDependencyError, instantiationError, noProviderError, outOfBoundsError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\nimport { resolveReflectiveProviders } from './reflective_provider';\n/** @type {?} */\nvar UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nvar /**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nReflectiveInjector = /** @class */ (function () {\n    function ReflectiveInjector() {\n    }\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     */\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.resolve = /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        return resolveReflectiveProviders(providers);\n    };\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.resolveAndCreate = /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        /** @type {?} */\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    };\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @experimental\n     */\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * \\@experimental\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.fromResolvedProviders = /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * \\@experimental\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    };\n    return ReflectiveInjector;\n}());\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nexport { ReflectiveInjector };\nif (false) {\n    /**\n     * Parent of this injector.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     * @abstract\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.parent = function () { };\n    /**\n     * Resolves an array of providers and creates a child injector from those providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n     * var child = parent.resolveAndCreateChild([ChildProvider]);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n    /**\n     * Creates a child injector from previously resolved providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n     *\n     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n     * var child = parent.createChildFromResolved(childProviders);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n    /**\n     * Resolves a provider and instantiates an object in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     *\n     * var car = injector.resolveAndInstantiate(Car);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n    /**\n     * Instantiates an object using a resolved provider in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n     * var car = injector.instantiateResolved(carProvider);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n    /**\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n}\nvar ReflectiveInjector_ = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveInjector_(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        /** @type {?} */\n        var len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndCreateChild = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        /** @type {?} */\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.createChildFromResolved = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        /** @type {?} */\n        var inj = new ReflectiveInjector_(providers);\n        (/** @type {?} */ (inj)).parent = this;\n        return inj;\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndInstantiate = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.instantiateResolved = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.getProviderAtIndex = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._new = /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getMaxNumberOfObjects = /**\n     * @return {?}\n     */\n    function () { return this.objs.length; };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiateProvider = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (provider.multiProvider) {\n            /** @type {?} */\n            var res = new Array(provider.resolvedFactories.length);\n            for (var i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    };\n    /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiate = /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    function (provider, ResolvedReflectiveFactory) {\n        var _this = this;\n        /** @type {?} */\n        var factory = ResolvedReflectiveFactory.factory;\n        /** @type {?} */\n        var deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        /** @type {?} */\n        var obj;\n        try {\n            obj = factory.apply(void 0, deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    };\n    /**\n     * @param {?} dep\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByReflectiveDependency = /**\n     * @param {?} dep\n     * @return {?}\n     */\n    function (dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    };\n    /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKey = /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    };\n    /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getObjByKeyId = /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    function (keyId) {\n        for (var i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._throwOrNull = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeySelf = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        /** @type {?} */\n        var obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeyDefault = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    function (key, notFoundValue, visibility) {\n        /** @type {?} */\n        var inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            /** @type {?} */\n            var inj_ = /** @type {?} */ (inj);\n            /** @type {?} */\n            var obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    };\n    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                .join(', ');\n            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.displayName; };\n    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n    return ReflectiveInjector_;\n}());\nexport { ReflectiveInjector_ };\nif (false) {\n    /** @type {?} */\n    ReflectiveInjector_.INJECTOR_KEY;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._constructionCounter;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._providers;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.parent;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.keyIds;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.objs;\n}\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    /** @type {?} */\n    var res = new Array(injector._providers.length);\n    for (var i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n//# sourceMappingURL=reflective_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isPromise } from '../src/util/lang';\nimport { Inject, Injectable, InjectionToken, Optional } from './di';\n/** *\n * A function that will be executed when an application is initialized.\n  @type {?} */\nexport var APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n */\nvar ApplicationInitStatus = /** @class */ (function () {\n    function ApplicationInitStatus(appInits) {\n        var _this = this;\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationInitStatus.prototype.runInitializers = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.initialized) {\n            return;\n        }\n        /** @type {?} */\n        var asyncInitPromises = [];\n        /** @type {?} */\n        var complete = function () {\n            (/** @type {?} */ (_this)).done = true;\n            _this.resolve();\n        };\n        if (this.appInits) {\n            for (var i = 0; i < this.appInits.length; i++) {\n                /** @type {?} */\n                var initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    };\n    ApplicationInitStatus.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationInitStatus.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }\n    ]; };\n    return ApplicationInitStatus;\n}());\nexport { ApplicationInitStatus };\nif (false) {\n    /** @type {?} */\n    ApplicationInitStatus.prototype.resolve;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.reject;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.initialized;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.donePromise;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.done;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.appInits;\n}\n//# sourceMappingURL=application_init.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/** *\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@experimental\n  @type {?} */\nexport var APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nexport function _appIdRandomProviderFactory() {\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\n}\n/** *\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@experimental\n  @type {?} */\nexport var APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: /** @type {?} */ ([]),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/** *\n * A function that will be executed when a platform is initialized.\n * \\@experimental\n  @type {?} */\nexport var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/** *\n * A token that indicates an opaque platform id.\n * \\@experimental\n  @type {?} */\nexport var PLATFORM_ID = new InjectionToken('Platform ID');\n/** *\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@experimental\n  @type {?} */\nexport var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/** *\n * A token which indicates the root directory of the application\n * \\@experimental\n  @type {?} */\nexport var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n//# sourceMappingURL=application_tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from './di';\nvar Console = /** @class */ (function () {\n    function Console() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.log = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    };\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.warn = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    };\n    Console.decorators = [\n        { type: Injectable },\n    ];\n    return Console;\n}());\nexport { Console };\n//# sourceMappingURL=console.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di/injectable';\nimport { InjectionToken } from '../di/injection_token';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n * @template T\n */\nvar /**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n * @template T\n */\nModuleWithComponentFactories = /** @class */ (function () {\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n    return ModuleWithComponentFactories;\n}());\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n * @template T\n */\nexport { ModuleWithComponentFactories };\nif (false) {\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.ngModuleFactory;\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.componentFactories;\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(\"Runtime compiler is not loaded\");\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n */\nvar Compiler = /** @class */ (function () {\n    function Compiler() {\n    }\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     */\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleSync = /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAsync = /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsSync = /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsAsync = /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Clears all caches.\n     */\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    Compiler.prototype.clearCache = /**\n     * Clears all caches.\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    Compiler.prototype.clearCacheFor = /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { };\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.getModuleId = /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { return undefined; };\n    Compiler.decorators = [\n        { type: Injectable },\n    ];\n    return Compiler;\n}());\nexport { Compiler };\n/** @typedef {?} */\nvar CompilerOptions;\nexport { CompilerOptions };\n/** *\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@experimental\n  @type {?} */\nexport var COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nCompilerFactory = /** @class */ (function () {\n    function CompilerFactory() {\n    }\n    return CompilerFactory;\n}());\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nexport { CompilerFactory };\nif (false) {\n    /**\n     * @abstract\n     * @param {?=} options\n     * @return {?}\n     */\n    CompilerFactory.prototype.createCompiler = function (options) { };\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util';\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * \\@experimental\n * @record\n */\nexport function WtfScopeFn() { }\n/**\n * @record\n */\nfunction WTF() { }\n/** @type {?} */\nWTF.prototype.trace;\n/**\n * @record\n */\nfunction Trace() { }\n/** @type {?} */\nTrace.prototype.events;\n/** @type {?} */\nTrace.prototype.leaveScope;\n/** @type {?} */\nTrace.prototype.beginTimeRange;\n/** @type {?} */\nTrace.prototype.endTimeRange;\n/**\n * @record\n */\nexport function Range() { }\n/**\n * @record\n */\nfunction Events() { }\n/** @type {?} */\nEvents.prototype.createScope;\n/**\n * @record\n */\nexport function Scope() { }\n/** @type {?} */\nvar trace;\n/** @type {?} */\nvar events;\n/**\n * @return {?}\n */\nexport function detectWTF() {\n    /** @type {?} */\n    var wtf = (/** @type {?} */ (global /** TODO #9100 */) /** TODO #9100 */)['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nexport function createScope(signature, flags) {\n    if (flags === void 0) { flags = null; }\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nexport function leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nexport function startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nexport function endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n//# sourceMappingURL=wtf_impl.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nvar /**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nNgZone = /** @class */ (function () {\n    function NgZone(_a) {\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(\"In this configuration Angular requires Zone.js\");\n        }\n        Zone.assertZonePatched();\n        /** @type {?} */\n        var self = /** @type {?} */ ((this));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if ((/** @type {?} */ (Zone))['wtfZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['wtfZoneSpec']);\n        }\n        if ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new (/** @type {?} */ ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec'])));\n        }\n        if (enableLongStackTrace && (/** @type {?} */ (Zone))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    NgZone.isInAngularZone = /**\n     * @return {?}\n     */\n    function () { return Zone.current.get('isAngularZone') === true; };\n    /**\n     * @return {?}\n     */\n    NgZone.assertInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgZone.assertNotInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.run = /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.run(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    NgZone.prototype.runTask = /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs, name) {\n        /** @type {?} */\n        var zone = (/** @type {?} */ ((this)))._inner;\n        /** @type {?} */\n        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n        try {\n            return /** @type {?} */ (zone.runTask(task, applyThis, applyArgs));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    };\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.runGuarded = /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.runGuarded(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NgZone.prototype.runOutsideAngular = /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._outer.run(fn));\n    };\n    return NgZone;\n}());\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nexport { NgZone };\nif (false) {\n    /** @type {?} */\n    NgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZone.prototype.hasPendingMacrotasks;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     * @type {?}\n     */\n    NgZone.prototype.isStable;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onUnstable;\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onMicrotaskEmpty;\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     * @type {?}\n     */\n    NgZone.prototype.onStable;\n    /**\n     * Notifies that an error has been delivered.\n     * @type {?}\n     */\n    NgZone.prototype.onError;\n}\n/**\n * @return {?}\n */\nfunction noop() { }\n/** @type {?} */\nvar EMPTY_PAYLOAD = {};\n/**\n * @record\n */\nfunction NgZonePrivate() { }\n/** @type {?} */\nNgZonePrivate.prototype._outer;\n/** @type {?} */\nNgZonePrivate.prototype._inner;\n/** @type {?} */\nNgZonePrivate.prototype._nesting;\n/** @type {?} */\nNgZonePrivate.prototype.hasPendingMicrotasks;\n/** @type {?} */\nNgZonePrivate.prototype.hasPendingMacrotasks;\n/** @type {?} */\nNgZonePrivate.prototype.isStable;\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: /** @type {?} */ ({ 'isAngularZone': true }),\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: function (delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: function (delegate, current, target, error) {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n            return false;\n        }\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nvar /**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nNoopNgZone = /** @class */ (function () {\n    function NoopNgZone() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.run = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runGuarded = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runOutsideAngular = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runTask = /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    return NoopNgZone;\n}());\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport { NoopNgZone };\nif (false) {\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.isStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onUnstable;\n    /** @type {?} */\n    NoopNgZone.prototype.onMicrotaskEmpty;\n    /** @type {?} */\n    NoopNgZone.prototype.onStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onError;\n}\n//# sourceMappingURL=ng_zone.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di';\nimport { scheduleMicroTask } from '../util';\nimport { NgZone } from '../zone/ng_zone';\n/**\n * @record\n */\nexport function PendingMacrotask() { }\n/** @type {?} */\nPendingMacrotask.prototype.source;\n/** @type {?} */\nPendingMacrotask.prototype.creationLocation;\n/** @type {?|undefined} */\nPendingMacrotask.prototype.runCount;\n/** @type {?} */\nPendingMacrotask.prototype.data;\n/**\n * @record\n */\nexport function TaskData() { }\n/** @type {?|undefined} */\nTaskData.prototype.target;\n/** @type {?|undefined} */\nTaskData.prototype.delay;\n/** @type {?|undefined} */\nTaskData.prototype.isPeriodic;\n/** @typedef {?} */\nvar DoneCallback;\nexport { DoneCallback };\n/** @typedef {?} */\nvar UpdateCallback;\nexport { UpdateCallback };\n/**\n * @record\n */\nfunction WaitCallback() { }\n/** @type {?} */\nWaitCallback.prototype.timeoutId;\n/** @type {?} */\nWaitCallback.prototype.doneCb;\n/** @type {?|undefined} */\nWaitCallback.prototype.updateCb;\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@experimental\n */\nvar Testability = /** @class */ (function () {\n    function Testability(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this._watchAngularEvents();\n        _ngZone.run(function () { _this.taskTrackingZone = Zone.current.get('TaskTrackingZone'); });\n    }\n    /**\n     * @return {?}\n     */\n    Testability.prototype._watchAngularEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onUnstable.subscribe({\n            next: function () {\n                _this._didWork = true;\n                _this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.subscribe({\n                next: function () {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(function () {\n                        _this._isZoneStable = true;\n                        _this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    Testability.prototype.increasePendingRequestCount = /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    function () {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    };\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.decreasePendingRequestCount = /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    };\n    /**\n     * Whether an associated application is stable\n     */\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    Testability.prototype.isStable = /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    function () {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype._runCallbacksIfReady = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(function () {\n                while (_this._callbacks.length !== 0) {\n                    /** @type {?} */\n                    var cb = /** @type {?} */ ((_this._callbacks.pop()));\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(_this._didWork);\n                }\n                _this._didWork = false;\n            });\n        }\n        else {\n            /** @type {?} */\n            var pending_1 = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter(function (cb) {\n                if (cb.updateCb && cb.updateCb(pending_1)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype.getPendingTasks = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map(function (t) {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: /** @type {?} */ ((/** @type {?} */ (t)).creationLocation),\n                data: t.data\n            };\n        });\n    };\n    /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    Testability.prototype.addCallback = /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    function (cb, timeout, updateCb) {\n        var _this = this;\n        /** @type {?} */\n        var timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(function () {\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                cb(_this._didWork, _this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push(/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb }));\n    };\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    Testability.prototype.whenStable = /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    function (doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback(/** @type {?} */ (doneCb), timeout, /** @type {?} */ (updateCb));\n        this._runCallbacksIfReady();\n    };\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.getPendingRequestCount = /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () { return this._pendingCount; };\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    Testability.prototype.findProviders = /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    function (using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    };\n    Testability.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Testability.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    return Testability;\n}());\nexport { Testability };\nif (false) {\n    /** @type {?} */\n    Testability.prototype._pendingCount;\n    /** @type {?} */\n    Testability.prototype._isZoneStable;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * \\@internal\n     * @type {?}\n     */\n    Testability.prototype._didWork;\n    /** @type {?} */\n    Testability.prototype._callbacks;\n    /** @type {?} */\n    Testability.prototype.taskTrackingZone;\n    /** @type {?} */\n    Testability.prototype._ngZone;\n}\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@experimental\n */\nvar TestabilityRegistry = /** @class */ (function () {\n    function TestabilityRegistry() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.registerApplication = /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    function (token, testability) {\n        this._applications.set(token, testability);\n    };\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterApplication = /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    function (token) { this._applications.delete(token); };\n    /**\n     * Unregisters all applications\n     */\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterAllApplications = /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    function () { this._applications.clear(); };\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getTestability = /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    function (elem) { return this._applications.get(elem) || null; };\n    /**\n     * Get all registered testabilities\n     */\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllTestabilities = /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.values()); };\n    /**\n     * Get all registered applications(root elements)\n     */\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllRootElements = /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.keys()); };\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.findTestabilityInTree = /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    function (elem, findInAncestors) {\n        if (findInAncestors === void 0) { findInAncestors = true; }\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    };\n    TestabilityRegistry.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    TestabilityRegistry.ctorParameters = function () { return []; };\n    return TestabilityRegistry;\n}());\nexport { TestabilityRegistry };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TestabilityRegistry.prototype._applications;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * \\@experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n * @record\n */\nexport function GetTestability() { }\n/** @type {?} */\nGetTestability.prototype.addToWindow;\n/** @type {?} */\nGetTestability.prototype.findTestabilityInTree;\nvar _NoopGetTestability = /** @class */ (function () {\n    function _NoopGetTestability() {\n    }\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.addToWindow = /**\n     * @param {?} registry\n     * @return {?}\n     */\n    function (registry) { };\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.findTestabilityInTree = /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    function (registry, elem, findInAncestors) {\n        return null;\n    };\n    return _NoopGetTestability;\n}());\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@experimental\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\n/** @type {?} */\nvar _testabilityGetter = new _NoopGetTestability();\n//# sourceMappingURL=testability.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { ApplicationInitStatus } from './application_init';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER } from './application_tokens';\nimport { Console } from './console';\nimport { Injectable, InjectionToken, Injector } from './di';\nimport { ErrorHandler } from './error_handler';\nimport { isDevMode } from './is_dev_mode';\nimport { CompilerFactory } from './linker/compiler';\nimport { ComponentFactory } from './linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from './linker/component_factory_resolver';\nimport { NgModuleRef } from './linker/ng_module_factory';\nimport { wtfCreateScope, wtfLeave } from './profile/profile';\nimport { assertNgModuleType } from './render3/assert';\nimport { NgModuleFactory as R3NgModuleFactory } from './render3/ng_module_ref';\nimport { Testability, TestabilityRegistry } from './testability/testability';\nimport { scheduleMicroTask, stringify } from './util';\nimport { isPromise } from './util/lang';\nimport { NgZone, NoopNgZone } from './zone/ng_zone';\n/** @type {?} */\nvar _platform;\n/** @type {?} */\nvar compileNgModuleFactory = compileNgModuleFactory__PRE_NGCC__;\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__PRE_NGCC__(injector, options, moduleType) {\n    /** @type {?} */\n    var compilerFactory = injector.get(CompilerFactory);\n    /** @type {?} */\n    var compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nexport function compileNgModuleFactory__POST_NGCC__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    return Promise.resolve(new R3NgModuleFactory(moduleType));\n}\n/** @type {?} */\nexport var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nvar /**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nNgProbeToken = /** @class */ (function () {\n    function NgProbeToken(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken;\n}());\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nexport { NgProbeToken };\nif (false) {\n    /** @type {?} */\n    NgProbeToken.prototype.name;\n    /** @type {?} */\n    NgProbeToken.prototype.token;\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    /** @type {?} */\n    var inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach(function (init) { return init(); });\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(parentPlatformFactory, name, providers) {\n    if (providers === void 0) { providers = []; }\n    /** @type {?} */\n    var desc = \"Platform: \" + name;\n    /** @type {?} */\n    var marker = new InjectionToken(desc);\n    return function (extraProviders) {\n        if (extraProviders === void 0) { extraProviders = []; }\n        /** @type {?} */\n        var platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                /** @type {?} */\n                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken) {\n    /** @type {?} */\n    var platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n * @record\n */\nexport function BootstrapOptions() { }\n/**\n * Optionally specify which `NgZone` should be used.\n *\n * - Provide your own `NgZone` instance.\n * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n * - `noop` - Use `NoopNgZone` which does nothing.\n * @type {?|undefined}\n */\nBootstrapOptions.prototype.ngZone;\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n */\nvar PlatformRef = /** @class */ (function () {\n    /** @internal */\n    function PlatformRef(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModuleFactory = /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    function (moduleFactory, options) {\n        var _this = this;\n        /** @type {?} */\n        var ngZoneOption = options ? options.ngZone : undefined;\n        /** @type {?} */\n        var ngZone = getNgZone(ngZoneOption);\n        /** @type {?} */\n        var providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(function () {\n            /** @type {?} */\n            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n            /** @type {?} */\n            var moduleRef = /** @type {?} */ (moduleFactory.create(ngZoneInjector));\n            /** @type {?} */\n            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */\n            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {\n                /** @type {?} */\n                var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(function () {\n                    _this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    };\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModule = /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        /** @type {?} */\n        var options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n    };\n    /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    PlatformRef.prototype._moduleDoBootstrap = /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    function (moduleRef) {\n        /** @type {?} */\n        var appRef = /** @type {?} */ (moduleRef.injector.get(ApplicationRef));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                \"Please define one of these.\");\n        }\n        this._modules.push(moduleRef);\n    };\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    PlatformRef.prototype.onDestroy = /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\n        /**\n         * Retrieve the platform {@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         */\n        get: /**\n         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         * @return {?}\n         */\n        function () { return this._injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    PlatformRef.prototype.destroy = /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n        this._destroyed = true;\n    };\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    PlatformRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    PlatformRef.ctorParameters = function () { return [\n        { type: Injector }\n    ]; };\n    return PlatformRef;\n}());\nexport { PlatformRef };\nif (false) {\n    /** @type {?} */\n    PlatformRef.prototype._modules;\n    /** @type {?} */\n    PlatformRef.prototype._destroyListeners;\n    /** @type {?} */\n    PlatformRef.prototype._destroyed;\n    /** @type {?} */\n    PlatformRef.prototype._injector;\n}\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    /** @type {?} */\n    var ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        /** @type {?} */\n        var result = callback();\n        if (isPromise(result)) {\n            return result.catch(function (e) {\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = tslib_1.__assign({}, dst, (/** @type {?} */ (objs)));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n */\nvar ApplicationRef = /** @class */ (function () {\n    /** @internal */\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        var _this = this;\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        /** @type {?} */\n        var isCurrentlyStable = new Observable(function (observer) {\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                !_this._zone.hasPendingMicrotasks;\n            _this._zone.runOutsideAngular(function () {\n                observer.next(_this._stable);\n                observer.complete();\n            });\n        });\n        /** @type {?} */\n        var isStable = new Observable(function (observer) {\n            /** @type {?} */\n            var stableSub;\n            _this._zone.runOutsideAngular(function () {\n                stableSub = _this._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                            !_this._zone.hasPendingMicrotasks) {\n                            _this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            /** @type {?} */\n            var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                NgZone.assertInAngularZone();\n                if (_this._stable) {\n                    _this._stable = false;\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n                }\n            });\n            return function () {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        (/** @type {?} */ (this)).isStable =\n            merge(isCurrentlyStable, isStable.pipe(share()));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    ApplicationRef.prototype.bootstrap = /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    function (componentOrFactory, rootSelectorOrNode) {\n        var _this = this;\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        /** @type {?} */\n        var componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                /** @type {?} */ ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        /** @type {?} */\n        var ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n            null :\n            this._injector.get(NgModuleRef);\n        /** @type {?} */\n        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        /** @type {?} */\n        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n        /** @type {?} */\n        var testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n        }\n        return compRef;\n    };\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    ApplicationRef.prototype.tick = /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        /** @type {?} */\n        var scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            this._views.forEach(function (view) { return view.detectChanges(); });\n            if (this._enforceNoNewChanges) {\n                this._views.forEach(function (view) { return view.checkNoChanges(); });\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    };\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.attachView = /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        /** @type {?} */\n        var view = (/** @type {?} */ (viewRef));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    };\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.detachView = /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        /** @type {?} */\n        var view = (/** @type {?} */ (viewRef));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._loadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        /** @type {?} */\n        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach(function (listener) { return listener(componentRef); });\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._unloadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationRef.prototype.ngOnDestroy = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach(function (view) { return view.destroy(); });\n    };\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n        /**\n         * Returns the number of attached views.\n         */\n        get: /**\n         * Returns the number of attached views.\n         * @return {?}\n         */\n        function () { return this._views.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     */\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationRef.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: Console },\n        { type: Injector },\n        { type: ErrorHandler },\n        { type: ComponentFactoryResolver },\n        { type: ApplicationInitStatus }\n    ]; };\n    return ApplicationRef;\n}());\nexport { ApplicationRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ApplicationRef._tickScope;\n    /** @type {?} */\n    ApplicationRef.prototype._bootstrapListeners;\n    /** @type {?} */\n    ApplicationRef.prototype._views;\n    /** @type {?} */\n    ApplicationRef.prototype._runningTick;\n    /** @type {?} */\n    ApplicationRef.prototype._enforceNoNewChanges;\n    /** @type {?} */\n    ApplicationRef.prototype._stable;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     * @type {?}\n     */\n    ApplicationRef.prototype.componentTypes;\n    /**\n     * Get a list of components registered to this application.\n     * @type {?}\n     */\n    ApplicationRef.prototype.components;\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     * @type {?}\n     */\n    ApplicationRef.prototype.isStable;\n    /** @type {?} */\n    ApplicationRef.prototype._zone;\n    /** @type {?} */\n    ApplicationRef.prototype._console;\n    /** @type {?} */\n    ApplicationRef.prototype._injector;\n    /** @type {?} */\n    ApplicationRef.prototype._exceptionHandler;\n    /** @type {?} */\n    ApplicationRef.prototype._componentFactoryResolver;\n    /** @type {?} */\n    ApplicationRef.prototype._initStatus;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    /** @type {?} */\n    var index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n//# sourceMappingURL=application_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to load ng module factories.\n *\n * @abstract\n */\nvar /**\n * Used to load ng module factories.\n *\n * @abstract\n */\nNgModuleFactoryLoader = /** @class */ (function () {\n    function NgModuleFactoryLoader() {\n    }\n    return NgModuleFactoryLoader;\n}());\n/**\n * Used to load ng module factories.\n *\n * @abstract\n */\nexport { NgModuleFactoryLoader };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} path\n     * @return {?}\n     */\n    NgModuleFactoryLoader.prototype.load = function (path) { };\n}\n/** @type {?} */\nvar moduleFactories = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@experimental\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id, factory) {\n    /** @type {?} */\n    var existing = moduleFactories.get(id);\n    if (existing) {\n        throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n    }\n    moduleFactories.set(id, factory);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n    moduleFactories = new Map();\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@experimental\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory(id) {\n    /** @type {?} */\n    var factory = moduleFactories.get(id);\n    if (!factory)\n        throw new Error(\"No module with ID \" + id + \" loaded\");\n    return factory;\n}\n//# sourceMappingURL=ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * @template T\n */\nvar /**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * @template T\n */\nQueryList = /** @class */ (function () {\n    function QueryList() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._results.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._results.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._results.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._results.slice(); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._results))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._results.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._results = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n        (/** @type {?} */ (this)).length = this._results.length;\n        (/** @type {?} */ (this)).last = this._results[this.length - 1];\n        (/** @type {?} */ (this)).first = this._results[0];\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.setDirty = /**\n     * internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.destroy = /**\n     * internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList;\n}());\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * @template T\n */\nexport { QueryList };\nif (false) {\n    /** @type {?} */\n    QueryList.prototype.dirty;\n    /** @type {?} */\n    QueryList.prototype._results;\n    /** @type {?} */\n    QueryList.prototype.changes;\n    /** @type {?} */\n    QueryList.prototype.length;\n    /** @type {?} */\n    QueryList.prototype.first;\n    /** @type {?} */\n    QueryList.prototype.last;\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n    return list.reduce(function (flat, item) {\n        /** @type {?} */\n        var flatItem = Array.isArray(item) ? flatten(item) : item;\n        return (/** @type {?} */ (flat)).concat(flatItem);\n    }, []);\n}\n//# sourceMappingURL=query_list.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional } from '../di';\nimport { Compiler } from './compiler';\n/** @type {?} */\nvar _SEPARATOR = '#';\n/** @type {?} */\nvar FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nSystemJsNgModuleLoaderConfig = /** @class */ (function () {\n    function SystemJsNgModuleLoaderConfig() {\n    }\n    return SystemJsNgModuleLoaderConfig;\n}());\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nexport { SystemJsNgModuleLoaderConfig };\nif (false) {\n    /**\n     * Prefix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathPrefix;\n    /**\n     * Suffix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathSuffix;\n}\n/** @type {?} */\nvar DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@experimental\n */\nvar SystemJsNgModuleLoader = /** @class */ (function () {\n    function SystemJsNgModuleLoader(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.load = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        /** @type {?} */\n        var offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadAndCompile = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _this = this;\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then(function (module) { return module[exportName]; })\n            .then(function (type) { return checkNotEmpty(type, module, exportName); })\n            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadFactory = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        /** @type {?} */\n        var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then(function (module) { return module[exportName + factoryClassSuffix]; })\n            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n    };\n    SystemJsNgModuleLoader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SystemJsNgModuleLoader.ctorParameters = function () { return [\n        { type: Compiler },\n        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }\n    ]; };\n    return SystemJsNgModuleLoader;\n}());\nexport { SystemJsNgModuleLoader };\nif (false) {\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._config;\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._compiler;\n}\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n    }\n    return value;\n}\n//# sourceMappingURL=system_js_ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { R3_VIEW_CONTAINER_REF_FACTORY } from '../ivy_switch/runtime/index';\nimport { ElementRef } from './element_ref';\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @abstract\n */\nvar ViewContainerRef = /** @class */ (function () {\n    function ViewContainerRef() {\n    }\n    /**\n     * \\@internal\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__ = function () { return R3_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef); };\n    return ViewContainerRef;\n}());\nexport { ViewContainerRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__;\n    /**\n     * Anchor element that specifies the location of this container in the containing view.\n     * Each view container can have only one anchor element, and each anchor element\n     * can have only a single view container.\n     *\n     * Root elements of views attached to this container become siblings of the anchor element in\n     * the rendered view.\n     *\n     * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n     * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n     *\n     * <!-- TODO: rename to anchorElement -->\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.element = function () { };\n    /**\n     * The [dependency injector](guide/glossary#injector) for this view container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.injector = function () { };\n    /**\n     * @deprecated No replacement\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.parentInjector = function () { };\n    /**\n     * Destroys all views in this container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.clear = function () { };\n    /**\n     * Retrieves a view from this container.\n     * @abstract\n     * @param {?} index The 0-based index of the view to retrieve.\n     * @return {?} The `ViewRef` instance, or null if the index is out of range.\n     */\n    ViewContainerRef.prototype.get = function (index) { };\n    /**\n     * Reports how many views are currently attached to this container.\n     * @abstract\n     * @return {?} The number of views.\n     */\n    ViewContainerRef.prototype.length = function () { };\n    /**\n     * Instantiates an embedded view and inserts it\n     * into this container.\n     * @abstract\n     * @template C\n     * @param {?} templateRef The HTML template that defines the view.\n     * @param {?=} context\n     * @param {?=} index The 0-based index at which to insert the new view into this container.\n     * If not specified, appends the new view as the last entry.\n     *\n     * @return {?} The `ViewRef` instance for the newly created view.\n     */\n    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n    /**\n     * Instantiates a single component and inserts its host view into this container.\n     *\n     * @abstract\n     * @template C\n     * @param {?} componentFactory The factory to use.\n     * @param {?=} index The index at which to insert the new component's host view into this container.\n     * If not specified, appends the new view as the last entry.\n     * @param {?=} injector The injector to use as the parent for the new component.\n     * @param {?=} projectableNodes\n     * @param {?=} ngModule\n     *\n     * @return {?} The new component instance, containing the host view.\n     *\n     */\n    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };\n    /**\n     * Inserts a view into this container.\n     * @abstract\n     * @param {?} viewRef The view to insert.\n     * @param {?=} index The 0-based index at which to insert the view.\n     * If not specified, appends the new view as the last entry.\n     * @return {?} The inserted `ViewRef` instance.\n     *\n     */\n    ViewContainerRef.prototype.insert = function (viewRef, index) { };\n    /**\n     * Moves a view to a new location in this container.\n     * @abstract\n     * @param {?} viewRef The view to move.\n     * @param {?} currentIndex\n     * @return {?} The moved `ViewRef` instance.\n     */\n    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n    /**\n     * Returns the index of a view within the current container.\n     * @abstract\n     * @param {?} viewRef The view to query.\n     * @return {?} The 0-based index of the view's position in this container,\n     * or `-1` if this container doesn't contain the view.\n     */\n    ViewContainerRef.prototype.indexOf = function (viewRef) { };\n    /**\n     * Destroys a view attached to this container\n     * @abstract\n     * @param {?=} index The 0-based index of the view to destroy.\n     * If not specified, the last view in the container is removed.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.remove = function (index) { };\n    /**\n     * Detaches a view from this container without destroying it.\n     * Use along with `insert()` to move a view within the current container.\n     * @abstract\n     * @param {?=} index The 0-based index of the view to detach.\n     * If not specified, the last view in the container is detached.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.detach = function (index) { };\n}\n//# sourceMappingURL=view_container_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { R3_CHANGE_DETECTOR_REF_FACTORY } from '../ivy_switch/runtime/index';\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * \\@usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @abstract\n */\nvar ChangeDetectorRef = /** @class */ (function () {\n    function ChangeDetectorRef() {\n    }\n    /**\n     * \\@internal\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__ = function () { return R3_CHANGE_DETECTOR_REF_FACTORY(); };\n    return ChangeDetectorRef;\n}());\nexport { ChangeDetectorRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__;\n    /**\n     * When a view uses the {\\@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n     * change detection strategy, explicitly marks the view as changed so that\n     * it can be checked again.\n     *\n     * Components are normally marked as dirty (in need of rerendering) when inputs\n     * have changed or events have fired in the view. Call this method to ensure that\n     * a component is checked even if these triggers have not occured.\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.markForCheck = function () { };\n    /**\n     * Detaches this view from the change-detection tree.\n     * A detached view is  not checked until it is reattached.\n     * Use in combination with `detectChanges()` to implement local change detection checks.\n     *\n     * Detached views are not checked during change detection runs until they are\n     * re-attached, even if they are marked as dirty.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detach = function () { };\n    /**\n     * Checks this view and its children. Use in combination with {\\@link ChangeDetectorRef#detach\n     * detach}\n     * to implement local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detectChanges = function () { };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * Use in development mode to verify that running change detection doesn't introduce\n     * other changes.\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.checkNoChanges = function () { };\n    /**\n     * Re-attaches the previously detached view to the change detection tree.\n     * Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.reattach = function () { };\n}\n//# sourceMappingURL=change_detector_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectorRef } from '../change_detection/change_detector_ref';\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n * @abstract\n */\nvar /**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n * @abstract\n */\nViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewRef, _super);\n    function ViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ViewRef;\n}(ChangeDetectorRef));\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n * @abstract\n */\nexport { ViewRef };\nif (false) {\n    /**\n     * Destroys this view and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = function () { };\n    /**\n     * Reports whether this view has been destroyed.\n     * @abstract\n     * @return {?} True after the `destroy()` method has been called, false otherwise.\n     */\n    ViewRef.prototype.destroyed = function () { };\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for views.\n     * @abstract\n     * @param {?} callback A handler function that cleans up developer-defined data\n     * associated with a view. Called when the `destroy()` method is invoked.\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n * @template C\n */\nvar /**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n * @template C\n */\nEmbeddedViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EmbeddedViewRef;\n}(ViewRef));\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n * @template C\n */\nexport { EmbeddedViewRef };\nif (false) {\n    /**\n     * The context for this view, inherited from the anchor element.\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.context = function () { };\n    /**\n     * The root nodes for this embedded view.\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.rootNodes = function () { };\n}\n/**\n * @record\n */\nexport function InternalViewRef() { }\n/** @type {?} */\nInternalViewRef.prototype.detachFromAppRef;\n/** @type {?} */\nInternalViewRef.prototype.attachToAppRef;\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nvar EventListener = /** @class */ (function () {\n    function EventListener(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n    return EventListener;\n}());\nexport { EventListener };\nif (false) {\n    /** @type {?} */\n    EventListener.prototype.name;\n    /** @type {?} */\n    EventListener.prototype.callback;\n}\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nvar /**\n * \\@experimental All debugging apis are currently experimental.\n */\nDebugNode = /** @class */ (function () {\n    function DebugNode(nativeNode, parent, _debugContext) {\n        this.nativeNode = nativeNode;\n        this._debugContext = _debugContext;\n        this.listeners = [];\n        this.parent = null;\n        if (parent && parent instanceof DebugElement) {\n            parent.addChild(this);\n        }\n    }\n    Object.defineProperty(DebugNode.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.references; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.providerTokens; },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode;\n}());\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport { DebugNode };\nif (false) {\n    /** @type {?} */\n    DebugNode.prototype.listeners;\n    /** @type {?} */\n    DebugNode.prototype.parent;\n    /** @type {?} */\n    DebugNode.prototype.nativeNode;\n    /** @type {?} */\n    DebugNode.prototype._debugContext;\n}\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nvar /**\n * \\@experimental All debugging apis are currently experimental.\n */\nDebugElement = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement, _super);\n    function DebugElement(nativeNode, parent, _debugContext) {\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n        _this.properties = {};\n        _this.attributes = {};\n        _this.classes = {};\n        _this.styles = {};\n        _this.childNodes = [];\n        _this.nativeElement = nativeNode;\n        return _this;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.addChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        if (child) {\n            this.childNodes.push(child);\n            child.parent = this;\n        }\n    };\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.removeChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        /** @type {?} */\n        var childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            child.parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    };\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    DebugElement.prototype.insertChildrenAfter = /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    function (child, newChildren) {\n        var _this = this;\n        var _a;\n        /** @type {?} */\n        var siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));\n            newChildren.forEach(function (c) {\n                if (c.parent) {\n                    c.parent.removeChild(c);\n                }\n                c.parent = _this;\n            });\n        }\n    };\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugElement.prototype.insertBefore = /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (refChild, newChild) {\n        /** @type {?} */\n        var refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                newChild.parent.removeChild(newChild);\n            }\n            newChild.parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.query = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAll = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAllNodes = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    };\n    Object.defineProperty(DebugElement.prototype, \"children\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    DebugElement.prototype.triggerEventHandler = /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement;\n}(DebugNode));\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport { DebugElement };\nif (false) {\n    /** @type {?} */\n    DebugElement.prototype.name;\n    /** @type {?} */\n    DebugElement.prototype.properties;\n    /** @type {?} */\n    DebugElement.prototype.attributes;\n    /** @type {?} */\n    DebugElement.prototype.classes;\n    /** @type {?} */\n    DebugElement.prototype.styles;\n    /** @type {?} */\n    DebugElement.prototype.childNodes;\n    /** @type {?} */\n    DebugElement.prototype.nativeElement;\n}\n/**\n * \\@experimental\n * @param {?} debugEls\n * @return {?}\n */\nexport function asNativeElements(debugEls) {\n    return debugEls.map(function (el) { return el.nativeElement; });\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(function (node) {\n        if (node instanceof DebugElement) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\n/** @type {?} */\nvar _nativeNodeToDebugNode = new Map();\n/**\n * \\@experimental\n * @param {?} nativeNode\n * @return {?}\n */\nexport function getDebugNode(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @return {?}\n */\nexport function getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * \\@experimental All debugging apis are currently experimental.\n * @record\n * @template T\n */\nexport function Predicate() { }\n//# sourceMappingURL=debug_node.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isListLikeIterable, iterateListLike } from '../change_detection_util';\nvar DefaultIterableDifferFactory = /** @class */ (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return isListLikeIterable(obj); };\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.create = /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    function (trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nexport { DefaultIterableDifferFactory };\n/** @type {?} */\nvar trackByIdentity = function (index, item) { return item; };\nvar ɵ0 = trackByIdentity;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @template V\n */\nvar /**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @template V\n */\nDefaultIterableDiffer = /** @class */ (function () {\n    function DefaultIterableDiffer(trackByFn) {\n        this.length = 0;\n        this._linkedRecords = null;\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachOperation = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var nextIt = this._itHead;\n        /** @type {?} */\n        var nextRemove = this._removalsHead;\n        /** @type {?} */\n        var addRemoveOffset = 0;\n        /** @type {?} */\n        var moveOffsets = null;\n        while (nextIt || nextRemove) {\n            /** @type {?} */\n            var record = !nextRemove ||\n                nextIt && /** @type {?} */ ((nextIt.currentIndex)) < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */\n                ((nextIt)) :\n                nextRemove;\n            /** @type {?} */\n            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            /** @type {?} */\n            var currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = /** @type {?} */ ((nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    /** @type {?} */\n                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    /** @type {?} */\n                    var localCurrentIndex = /** @type {?} */ ((currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (var i = 0; i < localMovePreviousIndex; i++) {\n                            /** @type {?} */\n                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            /** @type {?} */\n                            var index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        /** @type {?} */\n                        var previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachMovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachIdentityChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.diff = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.check = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        var _this = this;\n        this._reset();\n        /** @type {?} */\n        var record = this._itHead;\n        /** @type {?} */\n        var mayBeDirty = false;\n        /** @type {?} */\n        var index;\n        /** @type {?} */\n        var item;\n        /** @type {?} */\n        var itemTrackBy;\n        if (Array.isArray(collection)) {\n            (/** @type {?} */ (this)).length = collection.length;\n            for (var index_1 = 0; index_1 < this.length; index_1++) {\n                item = collection[index_1];\n                itemTrackBy = this._trackByFn(index_1, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, function (item) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            (/** @type {?} */ (this)).length = index;\n        }\n        this._truncate(record);\n        (/** @type {?} */ (this)).collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reset = /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            /** @type {?} */\n            var record = void 0;\n            /** @type {?} */\n            var nextRecord = void 0;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._mismatch = /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        /** @type {?} */\n        var previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        /** @type {?} */\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._truncate = /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            /** @type {?} */\n            var nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reinsertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        /** @type {?} */\n        var prev = record._prevRemoved;\n        /** @type {?} */\n        var next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._moveAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._insertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        /** @type {?} */\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._remove = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._unlink = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        /** @type {?} */\n        var prev = record._prev;\n        /** @type {?} */\n        var next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToMoves = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    function (record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToRemovals = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addIdentityChange = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    return DefaultIterableDiffer;\n}());\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @template V\n */\nexport { DefaultIterableDiffer };\nif (false) {\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.length;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.collection;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._linkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._unlinkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._previousItHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._trackByFn;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\nIterableChangeRecord_ = /** @class */ (function () {\n    function IterableChangeRecord_(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n    return IterableChangeRecord_;\n}());\n/**\n * @template V\n */\nexport { IterableChangeRecord_ };\nif (false) {\n    /** @type {?} */\n    IterableChangeRecord_.prototype.currentIndex;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.previousIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextMoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextIdentityChange;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.item;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.trackById;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateItemRecordList = /** @class */ (function () {\n    function _DuplicateItemRecordList() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.add = /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            /** @type {?} */ ((\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.get = /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        /** @type {?} */\n        var record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */ ((record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.remove = /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var prev = record._prevDup;\n        /** @type {?} */\n        var next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._head;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._tail;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateMap = /** @class */ (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.put = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var key = record.trackById;\n        /** @type {?} */\n        var duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateMap.prototype.get = /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        /** @type {?} */\n        var key = trackById;\n        /** @type {?} */\n        var recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    };\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.remove = /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var key = record.trackById;\n        /** @type {?} */\n        var recordList = /** @type {?} */ ((this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    _DuplicateMap.prototype.clear = /**\n     * @return {?}\n     */\n    function () { this.map.clear(); };\n    return _DuplicateMap;\n}());\nif (false) {\n    /** @type {?} */\n    _DuplicateMap.prototype.map;\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    /** @type {?} */\n    var previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    /** @type {?} */\n    var moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\nexport { ɵ0 };\n//# sourceMappingURL=default_iterable_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isJsObject } from '../change_detection_util';\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDifferFactory = /** @class */ (function () {\n    function DefaultKeyValueDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return obj instanceof Map || isJsObject(obj); };\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.create = /**\n     * @template K, V\n     * @return {?}\n     */\n    function () { return new DefaultKeyValueDiffer(); };\n    return DefaultKeyValueDifferFactory;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDifferFactory };\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDiffer = /** @class */ (function () {\n    function DefaultKeyValueDiffer() {\n        this._records = new Map();\n        this._mapHead = null;\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._changesHead !== null ||\n                this._removalsHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.diff = /**\n     * @param {?=} map\n     * @return {?}\n     */\n    function (map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n        }\n        return this.check(map) ? this : null;\n    };\n    /**\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.check = /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    function (map) {\n        var _this = this;\n        this._reset();\n        /** @type {?} */\n        var insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, function (value, key) {\n            if (insertBefore && insertBefore.key === key) {\n                _this._maybeAddToChanges(insertBefore, value);\n                _this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                /** @type {?} */\n                var record = _this._getOrCreateRecordForKey(key, value);\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    };\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    function (before, record) {\n        if (before) {\n            /** @type {?} */\n            var prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    function (key, value) {\n        if (this._records.has(key)) {\n            /** @type {?} */\n            var record_1 = /** @type {?} */ ((this._records.get(key)));\n            this._maybeAddToChanges(record_1, value);\n            /** @type {?} */\n            var prev = record_1._prev;\n            /** @type {?} */\n            var next = record_1._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record_1._next = null;\n            record_1._prev = null;\n            return record_1;\n        }\n        /** @type {?} */\n        var record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._reset = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            /** @type {?} */\n            var record = void 0;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    };\n    /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToAdditions = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToChanges = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    };\n    /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._forEach = /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function (obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n        }\n    };\n    return DefaultKeyValueDiffer;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDiffer };\nif (false) {\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._records;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._mapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._appendAfter;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._previousMapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsTail;\n}\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nKeyValueChangeRecord_ = /** @class */ (function () {\n    function KeyValueChangeRecord_(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n    return KeyValueChangeRecord_;\n}());\nif (false) {\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.previousValue;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.currentValue;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextChanged;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.key;\n}\n//# sourceMappingURL=default_keyvalue_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from '../../di/defs';\nimport { Optional, SkipSelf } from '../../di/metadata';\nimport { DefaultIterableDifferFactory } from '../differs/default_iterable_differ';\n/** @typedef {?} */\nvar NgIterable;\nexport { NgIterable };\n/**\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n *\n * @record\n * @template V\n */\nexport function IterableDiffer() { }\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nIterableDiffer.prototype.diff;\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n *\n * @record\n * @template V\n */\nexport function IterableChanges() { }\n/**\n * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nIterableChanges.prototype.forEachItem;\n/**\n * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n * new `Iterable`.\n *\n * NOTE: These are not necessarily the actual operations which were applied to the original\n * `Iterable`, rather these are a set of computed operations which may not be the same as the\n * ones applied.\n *\n * \\@param record A change which needs to be applied\n * \\@param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n *        original `Iterable` location, where as `previousIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * \\@param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n *        original `Iterable` location, where as `currentIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * @type {?}\n */\nIterableChanges.prototype.forEachOperation;\n/**\n * Iterate over changes in the order of original `Iterable` showing where the original items\n * have moved.\n * @type {?}\n */\nIterableChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nIterableChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all moved items.\n * @type {?}\n */\nIterableChanges.prototype.forEachMovedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nIterableChanges.prototype.forEachRemovedItem;\n/**\n * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n * changed.\n * @type {?}\n */\nIterableChanges.prototype.forEachIdentityChange;\n/**\n * Record representing the item change information.\n *\n *\n * @record\n * @template V\n */\nexport function IterableChangeRecord() { }\n/**\n * Current index of the item in `Iterable` or null if removed.\n * @type {?}\n */\nIterableChangeRecord.prototype.currentIndex;\n/**\n * Previous index of the item in `Iterable` or null if added.\n * @type {?}\n */\nIterableChangeRecord.prototype.previousIndex;\n/**\n * The item.\n * @type {?}\n */\nIterableChangeRecord.prototype.item;\n/**\n * Track by identity as computed by the `TrackByFunction`.\n * @type {?}\n */\nIterableChangeRecord.prototype.trackById;\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * @record\n * @template V\n */\nexport function CollectionChangeRecord() { }\n/**\n * An optional function passed into {\\@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n *\n * @record\n * @template T\n */\nexport function TrackByFunction() { }\n/**\n * Provides a factory for {\\@link IterableDiffer}.\n *\n *\n * @record\n */\nexport function IterableDifferFactory() { }\n/** @type {?} */\nIterableDifferFactory.prototype.supports;\n/** @type {?} */\nIterableDifferFactory.prototype.create;\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n */\nvar IterableDiffers = /** @class */ (function () {\n    function IterableDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    IterableDiffers.create = /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent != null) {\n            /** @type {?} */\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    IterableDiffers.extend = /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    IterableDiffers.prototype.find = /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    function (iterable) {\n        /** @type {?} */\n        var factory = this.factories.find(function (f) { return f.supports(iterable); });\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n        }\n    };\n    /** @nocollapse */ IterableDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n    });\n    return IterableDiffers;\n}());\nexport { IterableDiffers };\nif (false) {\n    /** @nocollapse @type {?} */\n    IterableDiffers.ngInjectableDef;\n    /**\n     * @deprecated v4.0.0 - Should be private\n     * @type {?}\n     */\n    IterableDiffers.prototype.factories;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n//# sourceMappingURL=iterable_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf } from '../../di';\n/**\n * A differ that tracks changes made to an object over time.\n *\n *\n * @record\n * @template K, V\n */\nexport function KeyValueDiffer() { }\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n *\n * @record\n * @template K, V\n */\nexport function KeyValueChanges() { }\n/**\n * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachItem;\n/**\n * Iterate over changes in the order of original Map showing where the original items\n * have moved.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all keys for which values have changed.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachChangedItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachRemovedItem;\n/**\n * Record representing the item change information.\n *\n *\n * @record\n * @template K, V\n */\nexport function KeyValueChangeRecord() { }\n/**\n * Current key in the Map.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.key;\n/**\n * Current value for the key or `null` if removed.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.currentValue;\n/**\n * Previous value for the key or `null` if added.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.previousValue;\n/**\n * Provides a factory for {\\@link KeyValueDiffer}.\n *\n *\n * @record\n */\nexport function KeyValueDifferFactory() { }\n/**\n * Test to see if the differ knows how to diff this kind of object.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.supports;\n/**\n * Create a `KeyValueDiffer`.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.create;\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nvar /**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nKeyValueDiffers = /** @class */ (function () {\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    KeyValueDiffers.create = /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent) {\n            /** @type {?} */\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    KeyValueDiffers.extend = /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    KeyValueDiffers.prototype.find = /**\n     * @param {?} kv\n     * @return {?}\n     */\n    function (kv) {\n        /** @type {?} */\n        var factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (factory) {\n            return factory;\n        }\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n    };\n    return KeyValueDiffers;\n}());\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nexport { KeyValueDiffers };\nif (false) {\n    /**\n     * @deprecated v4.0.0 - Should be private.\n     * @type {?}\n     */\n    KeyValueDiffers.prototype.factories;\n}\n//# sourceMappingURL=keyvalue_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/** *\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@experimental i18n support is experimental.\n  @type {?} */\nexport var LOCALE_ID = new InjectionToken('LocaleId');\n/** *\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@experimental i18n support is experimental.\n  @type {?} */\nexport var TRANSLATIONS = new InjectionToken('Translations');\n/** *\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@experimental i18n support is experimental.\n  @type {?} */\nexport var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nvar MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nexport { MissingTranslationStrategy };\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';\n//# sourceMappingURL=tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_INITIALIZER, ApplicationInitStatus } from './application_init';\nimport { ApplicationRef } from './application_ref';\nimport { APP_ID_RANDOM_PROVIDER } from './application_tokens';\nimport { IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers } from './change_detection/change_detection';\nimport { Console } from './console';\nimport { Injector } from './di';\nimport { Inject, Optional, SkipSelf } from './di/metadata';\nimport { ErrorHandler } from './error_handler';\nimport { LOCALE_ID } from './i18n/tokens';\nimport { ComponentFactoryResolver } from './linker';\nimport { Compiler } from './linker/compiler';\nimport { NgModule } from './metadata';\nimport { NgZone } from './zone';\n/**\n * @return {?}\n */\nexport function _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nexport function _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nexport function _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/** *\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n  @type {?} */\nexport var APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Configures the root injector for an app with\n * providers of `\\@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * \\@experimental\n */\nvar ApplicationModule = /** @class */ (function () {\n    // Inject ApplicationRef to make it eager...\n    function ApplicationModule(appRef) {\n    }\n    ApplicationModule.decorators = [\n        { type: NgModule, args: [{ providers: APPLICATION_MODULE_PROVIDERS },] },\n    ];\n    /** @nocollapse */\n    ApplicationModule.ctorParameters = function () { return [\n        { type: ApplicationRef }\n    ]; };\n    return ApplicationModule;\n}());\nexport { ApplicationModule };\n//# sourceMappingURL=application_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// unsupported: template constraints.\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n * @record\n * @template D\n */\nexport function DefinitionFactory() { }\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n * @record\n */\nexport function NodeLogger() { }\n// unsupported: template constraints.\n/**\n * @record\n * @template DF\n */\nexport function Definition() { }\n/** @type {?} */\nDefinition.prototype.factory;\n/**\n * @record\n */\nexport function NgModuleDefinition() { }\n/** @type {?} */\nNgModuleDefinition.prototype.providers;\n/** @type {?} */\nNgModuleDefinition.prototype.providersByKey;\n/** @type {?} */\nNgModuleDefinition.prototype.modules;\n/** @type {?} */\nNgModuleDefinition.prototype.isRoot;\n/**\n * @record\n */\nexport function NgModuleDefinitionFactory() { }\n/**\n * @record\n */\nexport function ViewDefinition() { }\n/** @type {?} */\nViewDefinition.prototype.flags;\n/** @type {?} */\nViewDefinition.prototype.updateDirectives;\n/** @type {?} */\nViewDefinition.prototype.updateRenderer;\n/** @type {?} */\nViewDefinition.prototype.handleEvent;\n/**\n * Order: Depth first.\n * Especially providers are before elements / anchors.\n * @type {?}\n */\nViewDefinition.prototype.nodes;\n/**\n * aggregated NodeFlags for all nodes *\n * @type {?}\n */\nViewDefinition.prototype.nodeFlags;\n/** @type {?} */\nViewDefinition.prototype.rootNodeFlags;\n/** @type {?} */\nViewDefinition.prototype.lastRenderRootNode;\n/** @type {?} */\nViewDefinition.prototype.bindingCount;\n/** @type {?} */\nViewDefinition.prototype.outputCount;\n/**\n * Binary or of all query ids that are matched by one of the nodes.\n * This includes query ids from templates as well.\n * Used as a bloom filter.\n * @type {?}\n */\nViewDefinition.prototype.nodeMatchedQueries;\n/**\n * @record\n */\nexport function ViewDefinitionFactory() { }\n/**\n * @record\n */\nexport function ViewUpdateFn() { }\n/**\n * @record\n */\nexport function NodeCheckFn() { }\n/** @enum {number} */\nvar ArgumentType = {\n    Inline: 0, Dynamic: 1,\n};\nexport { ArgumentType };\n/**\n * @record\n */\nexport function ViewHandleEventFn() { }\n/** @enum {number} */\nvar ViewFlags = {\n    None: 0,\n    OnPush: 2,\n};\nexport { ViewFlags };\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n * @record\n */\nexport function NodeDef() { }\n/** @type {?} */\nNodeDef.prototype.flags;\n/** @type {?} */\nNodeDef.prototype.nodeIndex;\n/** @type {?} */\nNodeDef.prototype.checkIndex;\n/** @type {?} */\nNodeDef.prototype.parent;\n/** @type {?} */\nNodeDef.prototype.renderParent;\n/**\n * this is checked against NgContentDef.index to find matched nodes\n * @type {?}\n */\nNodeDef.prototype.ngContentIndex;\n/**\n * number of transitive children\n * @type {?}\n */\nNodeDef.prototype.childCount;\n/**\n * aggregated NodeFlags for all transitive children (does not include self) *\n * @type {?}\n */\nNodeDef.prototype.childFlags;\n/**\n * aggregated NodeFlags for all direct children (does not include self) *\n * @type {?}\n */\nNodeDef.prototype.directChildFlags;\n/** @type {?} */\nNodeDef.prototype.bindingIndex;\n/** @type {?} */\nNodeDef.prototype.bindings;\n/** @type {?} */\nNodeDef.prototype.bindingFlags;\n/** @type {?} */\nNodeDef.prototype.outputIndex;\n/** @type {?} */\nNodeDef.prototype.outputs;\n/**\n * references that the user placed on the element\n * @type {?}\n */\nNodeDef.prototype.references;\n/**\n * ids and value types of all queries that are matched by this node.\n * @type {?}\n */\nNodeDef.prototype.matchedQueries;\n/**\n * Binary or of all matched query ids of this node.\n * @type {?}\n */\nNodeDef.prototype.matchedQueryIds;\n/**\n * Binary or of all query ids that are matched by one of the children.\n * This includes query ids from templates as well.\n * Used as a bloom filter.\n * @type {?}\n */\nNodeDef.prototype.childMatchedQueries;\n/** @type {?} */\nNodeDef.prototype.element;\n/** @type {?} */\nNodeDef.prototype.provider;\n/** @type {?} */\nNodeDef.prototype.text;\n/** @type {?} */\nNodeDef.prototype.query;\n/** @type {?} */\nNodeDef.prototype.ngContent;\n/** @enum {number} */\nvar NodeFlags = {\n    None: 0,\n    TypeElement: 1,\n    TypeText: 2,\n    ProjectedTemplate: 4,\n    CatRenderNode: 3,\n    TypeNgContent: 8,\n    TypePipe: 16,\n    TypePureArray: 32,\n    TypePureObject: 64,\n    TypePurePipe: 128,\n    CatPureExpression: 224,\n    TypeValueProvider: 256,\n    TypeClassProvider: 512,\n    TypeFactoryProvider: 1024,\n    TypeUseExistingProvider: 2048,\n    LazyProvider: 4096,\n    PrivateProvider: 8192,\n    TypeDirective: 16384,\n    Component: 32768,\n    CatProviderNoDirective: 3840,\n    CatProvider: 20224,\n    OnInit: 65536,\n    OnDestroy: 131072,\n    DoCheck: 262144,\n    OnChanges: 524288,\n    AfterContentInit: 1048576,\n    AfterContentChecked: 2097152,\n    AfterViewInit: 4194304,\n    AfterViewChecked: 8388608,\n    EmbeddedViews: 16777216,\n    ComponentView: 33554432,\n    TypeContentQuery: 67108864,\n    TypeViewQuery: 134217728,\n    StaticQuery: 268435456,\n    DynamicQuery: 536870912,\n    TypeNgModule: 1073741824,\n    CatQuery: 201326592,\n    // mutually exclusive values...\n    Types: 201347067,\n};\nexport { NodeFlags };\n/**\n * @record\n */\nexport function BindingDef() { }\n/** @type {?} */\nBindingDef.prototype.flags;\n/** @type {?} */\nBindingDef.prototype.ns;\n/** @type {?} */\nBindingDef.prototype.name;\n/** @type {?} */\nBindingDef.prototype.nonMinifiedName;\n/** @type {?} */\nBindingDef.prototype.securityContext;\n/** @type {?} */\nBindingDef.prototype.suffix;\n/** @enum {number} */\nvar BindingFlags = {\n    TypeElementAttribute: 1,\n    TypeElementClass: 2,\n    TypeElementStyle: 4,\n    TypeProperty: 8,\n    SyntheticProperty: 16,\n    SyntheticHostProperty: 32,\n    CatSyntheticProperty: 48,\n    // mutually exclusive values...\n    Types: 15,\n};\nexport { BindingFlags };\n/**\n * @record\n */\nexport function OutputDef() { }\n/** @type {?} */\nOutputDef.prototype.type;\n/** @type {?} */\nOutputDef.prototype.target;\n/** @type {?} */\nOutputDef.prototype.eventName;\n/** @type {?} */\nOutputDef.prototype.propName;\n/** @enum {number} */\nvar OutputType = {\n    ElementOutput: 0, DirectiveOutput: 1,\n};\nexport { OutputType };\n/** @enum {number} */\nvar QueryValueType = {\n    ElementRef: 0,\n    RenderElement: 1,\n    TemplateRef: 2,\n    ViewContainerRef: 3,\n    Provider: 4,\n};\nexport { QueryValueType };\n/**\n * @record\n */\nexport function ElementDef() { }\n/** @type {?} */\nElementDef.prototype.name;\n/** @type {?} */\nElementDef.prototype.ns;\n/**\n * ns, name, value\n * @type {?}\n */\nElementDef.prototype.attrs;\n/** @type {?} */\nElementDef.prototype.template;\n/** @type {?} */\nElementDef.prototype.componentProvider;\n/** @type {?} */\nElementDef.prototype.componentRendererType;\n/** @type {?} */\nElementDef.prototype.componentView;\n/**\n * visible public providers for DI in the view,\n * as see from this element. This does not include private providers.\n * @type {?}\n */\nElementDef.prototype.publicProviders;\n/**\n * same as visiblePublicProviders, but also includes private providers\n * that are located on this element.\n * @type {?}\n */\nElementDef.prototype.allProviders;\n/** @type {?} */\nElementDef.prototype.handleEvent;\n/**\n * @record\n */\nexport function ElementHandleEventFn() { }\n/**\n * @record\n */\nexport function ProviderDef() { }\n/** @type {?} */\nProviderDef.prototype.token;\n/** @type {?} */\nProviderDef.prototype.value;\n/** @type {?} */\nProviderDef.prototype.deps;\n/**\n * @record\n */\nexport function NgModuleProviderDef() { }\n/** @type {?} */\nNgModuleProviderDef.prototype.flags;\n/** @type {?} */\nNgModuleProviderDef.prototype.index;\n/** @type {?} */\nNgModuleProviderDef.prototype.token;\n/** @type {?} */\nNgModuleProviderDef.prototype.value;\n/** @type {?} */\nNgModuleProviderDef.prototype.deps;\n/**\n * @record\n */\nexport function DepDef() { }\n/** @type {?} */\nDepDef.prototype.flags;\n/** @type {?} */\nDepDef.prototype.token;\n/** @type {?} */\nDepDef.prototype.tokenKey;\n/** @enum {number} */\nvar DepFlags = {\n    None: 0,\n    SkipSelf: 1,\n    Optional: 2,\n    Self: 4,\n    Value: 8,\n};\nexport { DepFlags };\n/**\n * @record\n */\nexport function TextDef() { }\n/** @type {?} */\nTextDef.prototype.prefix;\n/**\n * @record\n */\nexport function QueryDef() { }\n/** @type {?} */\nQueryDef.prototype.id;\n/** @type {?} */\nQueryDef.prototype.filterId;\n/** @type {?} */\nQueryDef.prototype.bindings;\n/**\n * @record\n */\nexport function QueryBindingDef() { }\n/** @type {?} */\nQueryBindingDef.prototype.propName;\n/** @type {?} */\nQueryBindingDef.prototype.bindingType;\n/** @enum {number} */\nvar QueryBindingType = {\n    First: 0, All: 1,\n};\nexport { QueryBindingType };\n/**\n * @record\n */\nexport function NgContentDef() { }\n/**\n * this index is checked against NodeDef.ngContentIndex to find the nodes\n * that are matched by this ng-content.\n * Note that a NodeDef with an ng-content can be reprojected, i.e.\n * have a ngContentIndex on its own.\n * @type {?}\n */\nNgContentDef.prototype.index;\n/**\n * @record\n */\nexport function NgModuleData() { }\n/** @type {?} */\nNgModuleData.prototype._def;\n/** @type {?} */\nNgModuleData.prototype._parent;\n/** @type {?} */\nNgModuleData.prototype._providers;\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ViewData() { }\n/** @type {?} */\nViewData.prototype.def;\n/** @type {?} */\nViewData.prototype.root;\n/** @type {?} */\nViewData.prototype.renderer;\n/** @type {?} */\nViewData.prototype.parentNodeDef;\n/** @type {?} */\nViewData.prototype.parent;\n/** @type {?} */\nViewData.prototype.viewContainerParent;\n/** @type {?} */\nViewData.prototype.component;\n/** @type {?} */\nViewData.prototype.context;\n/** @type {?} */\nViewData.prototype.nodes;\n/** @type {?} */\nViewData.prototype.state;\n/** @type {?} */\nViewData.prototype.oldValues;\n/** @type {?} */\nViewData.prototype.disposables;\n/** @type {?} */\nViewData.prototype.initIndex;\n/** @enum {number} */\nvar ViewState = {\n    BeforeFirstCheck: 1,\n    FirstCheck: 2,\n    Attached: 4,\n    ChecksEnabled: 8,\n    IsProjectedView: 16,\n    CheckProjectedView: 32,\n    CheckProjectedViews: 64,\n    Destroyed: 128,\n    // InitState Uses 3 bits\n    InitState_Mask: 1792,\n    InitState_BeforeInit: 0,\n    InitState_CallingOnInit: 256,\n    InitState_CallingAfterContentInit: 512,\n    InitState_CallingAfterViewInit: 768,\n    InitState_AfterInit: 1024,\n    CatDetectChanges: 12,\n    CatInit: 13,\n};\nexport { ViewState };\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nexport function shiftInitState(view, priorInitState, newInitState) {\n    /** @type {?} */\n    var state = view.state;\n    /** @type {?} */\n    var initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nexport function shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * @record\n */\nexport function DisposableFn() { }\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nvar /**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nNodeData = /** @class */ (function () {\n    function NodeData() {\n    }\n    return NodeData;\n}());\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nexport { NodeData };\nif (false) {\n    /** @type {?} */\n    NodeData.prototype.__brand;\n}\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function TextData() { }\n/** @type {?} */\nTextData.prototype.renderText;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asTextData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ElementData() { }\n/** @type {?} */\nElementData.prototype.renderElement;\n/** @type {?} */\nElementData.prototype.componentView;\n/** @type {?} */\nElementData.prototype.viewContainer;\n/** @type {?} */\nElementData.prototype.template;\n/**\n * @record\n */\nexport function ViewContainerData() { }\n/** @type {?} */\nViewContainerData.prototype._embeddedViews;\n/**\n * @record\n */\nexport function TemplateData() { }\n/** @type {?} */\nTemplateData.prototype._projectedViews;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asElementData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ProviderData() { }\n/** @type {?} */\nProviderData.prototype.instance;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asProviderData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function PureExpressionData() { }\n/** @type {?} */\nPureExpressionData.prototype.value;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asPureExpressionData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asQueryList(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * @record\n */\nexport function RootData() { }\n/** @type {?} */\nRootData.prototype.injector;\n/** @type {?} */\nRootData.prototype.ngModule;\n/** @type {?} */\nRootData.prototype.projectableNodes;\n/** @type {?} */\nRootData.prototype.selectorOrNode;\n/** @type {?} */\nRootData.prototype.renderer;\n/** @type {?} */\nRootData.prototype.rendererFactory;\n/** @type {?} */\nRootData.prototype.errorHandler;\n/** @type {?} */\nRootData.prototype.sanitizer;\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nDebugContext = /** @class */ (function () {\n    function DebugContext() {\n    }\n    return DebugContext;\n}());\n/**\n * @abstract\n */\nexport { DebugContext };\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.view = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.nodeIndex = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.componentRenderElement = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.renderNode = function () { };\n    /**\n     * @abstract\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext.prototype.logError = function (console, values) { };\n}\n/** @enum {number} */\nvar CheckType = {\n    CheckAndUpdate: 0, CheckNoChanges: 1,\n};\nexport { CheckType };\n/**\n * @record\n */\nexport function ProviderOverride() { }\n/** @type {?} */\nProviderOverride.prototype.token;\n/** @type {?} */\nProviderOverride.prototype.flags;\n/** @type {?} */\nProviderOverride.prototype.value;\n/** @type {?} */\nProviderOverride.prototype.deps;\n/** @type {?} */\nProviderOverride.prototype.deprecatedBehavior;\n/** *\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n  @type {?} */\nexport var Services = {\n    setCurrentNode: /** @type {?} */ ((undefined)),\n    createRootView: /** @type {?} */ ((undefined)),\n    createEmbeddedView: /** @type {?} */ ((undefined)),\n    createComponentView: /** @type {?} */ ((undefined)),\n    createNgModuleRef: /** @type {?} */ ((undefined)),\n    overrideProvider: /** @type {?} */ ((undefined)),\n    overrideComponentView: /** @type {?} */ ((undefined)),\n    clearOverrides: /** @type {?} */ ((undefined)),\n    checkAndUpdateView: /** @type {?} */ ((undefined)),\n    checkNoChangesView: /** @type {?} */ ((undefined)),\n    destroyView: /** @type {?} */ ((undefined)),\n    resolveDep: /** @type {?} */ ((undefined)),\n    createDebugContext: /** @type {?} */ ((undefined)),\n    handleEvent: /** @type {?} */ ((undefined)),\n    updateDirectives: /** @type {?} */ ((undefined)),\n    updateRenderer: /** @type {?} */ ((undefined)),\n    dirtyParentQueries: /** @type {?} */ ((undefined)),\n};\n//# sourceMappingURL=types.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext } from '../errors';\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    /** @type {?} */\n    var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (isFirstCheck) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nexport function viewDebugError(msg, context) {\n    /** @type {?} */\n    var err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    (/** @type {?} */ (err))[ERROR_DEBUG_CONTEXT] = context;\n    (/** @type {?} */ (err))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nexport function isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nexport function viewDestroyedError(action) {\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedValue, devModeEqual } from '../change_detection/change_detection';\nimport { SOURCE } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { looseIdentical, stringify } from '../util';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { Services, asElementData, asTextData } from './types';\n/** @type {?} */\nexport var NOOP = function () { };\n/** @type {?} */\nvar _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenKey(token) {\n    /** @type {?} */\n    var key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        /** @type {?} */\n        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        /** @type {?} */\n        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\n/** @type {?} */\nvar UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nvar EMPTY_RENDERER_TYPE_ID = '$$empty';\n/**\n * @param {?} values\n * @return {?}\n */\nexport function createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\n/** @type {?} */\nvar _renderCompCount = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nexport function resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        /** @type {?} */\n        var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = \"c\" + _renderCompCount++;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBinding(view, def, bindingIdx, value) {\n    /** @type {?} */\n    var oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBindingNoChanges(view, def, bindingIdx, value) {\n    /** @type {?} */\n    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        /** @type {?} */\n        var bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function markParentViewsForCheck(view) {\n    /** @type {?} */\n    var currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nexport function markParentViewsForCheckProjectedViews(view, endView) {\n    /** @type {?} */\n    var currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nexport function dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function declaredViewContainer(view) {\n    if (view.parent) {\n        /** @type {?} */\n        var parentView = view.parent;\n        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nexport function viewParentEl(view) {\n    /** @type {?} */\n    var parentView = view.parent;\n    if (parentView) {\n        return /** @type {?} */ ((view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isComponentView(view) {\n    return !!view.parent && !!(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isEmbeddedView(view) {\n    return !!view.parent && !(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nexport function splitMatchedQueriesDsl(matchedQueriesDsl) {\n    /** @type {?} */\n    var matchedQueries = {};\n    /** @type {?} */\n    var matchedQueryIds = 0;\n    /** @type {?} */\n    var references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(function (_a) {\n            var queryId = _a[0], valueType = _a[1];\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nexport function splitDepsDsl(deps, sourceName) {\n    return deps.map(function (value) {\n        /** @type {?} */\n        var token;\n        /** @type {?} */\n        var flags;\n        if (Array.isArray(value)) {\n            flags = value[0], token = value[1];\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\n    });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function getParentRenderElement(view, renderHost, def) {\n    /** @type {?} */\n    var renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            (/** @type {?} */ ((renderParent.element)).componentRendererType && /** @type {?} */ ((/** @type {?} */ ((renderParent.element)).componentRendererType)).encapsulation === ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\n/** @type {?} */\nvar DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nexport function resolveDefinition(factory) {\n    /** @type {?} */\n    var value = /** @type {?} */ (((DEFINITION_CACHE.get(factory))));\n    if (!value) {\n        value = factory(function () { return NOOP; });\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function rootRenderNodes(view) {\n    /** @type {?} */\n    var renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/** @enum {number} */\nvar RenderNodeAction = {\n    Collect: 0, AppendChild: 1, InsertBefore: 2, RemoveChild: 3,\n};\nexport { RenderNodeAction };\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    var compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    var hostView = /** @type {?} */ ((compView)).parent;\n    /** @type {?} */\n    var hostElDef = viewParentEl(/** @type {?} */ ((compView)));\n    /** @type {?} */\n    var startIndex = /** @type {?} */ ((hostElDef)).nodeIndex + 1;\n    /** @type {?} */\n    var endIndex = /** @type {?} */ ((hostElDef)).nodeIndex + /** @type {?} */ ((hostElDef)).childCount;\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = /** @type {?} */ ((hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!/** @type {?} */ ((hostView)).parent) {\n        /** @type {?} */\n        var projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (var i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        /** @type {?} */\n        var rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                /** @type {?} */\n                var compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            var embeddedViews = /** @type {?} */ ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !/** @type {?} */ ((nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    var renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            /** @type {?} */ ((target)).push(renderNode);\n            break;\n    }\n}\n/** @type {?} */\nvar NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function splitNamespace(name) {\n    if (name[0] === ':') {\n        /** @type {?} */\n        var match = /** @type {?} */ ((name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nexport function calcBindingFlags(bindings) {\n    /** @type {?} */\n    var flags = 0;\n    for (var i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nexport function interpolate(valueCount, constAndInterp) {\n    /** @type {?} */\n    var result = '';\n    for (var i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nexport function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(\"Does not support more than 9 expressions\");\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\n/** @type {?} */\nexport var EMPTY_ARRAY = [];\n/** @type {?} */\nexport var EMPTY_MAP = {};\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from '../metadata/view';\nimport { SecurityContext } from '../sanitization/security';\nimport { asElementData } from './types';\nimport { NOOP, calcBindingFlags, checkAndUpdateBinding, dispatchEvent, elementEventFullName, getParentRenderElement, resolveDefinition, resolveRendererType2, splitMatchedQueriesDsl, splitNamespace } from './util';\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nexport function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    /** @type {?} */\n    var template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags: flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template: template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nexport function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\n    var _a;\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;\n    /** @type {?} */\n    var ns = /** @type {?} */ ((null));\n    /** @type {?} */\n    var name = /** @type {?} */ ((null));\n    if (namespaceAndName) {\n        _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n    }\n    bindings = bindings || [];\n    /** @type {?} */\n    var bindingDefs = new Array(bindings.length);\n    for (var i = 0; i < bindings.length; i++) {\n        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];\n        /** @type {?} */\n        var securityContext = /** @type {?} */ ((undefined));\n        /** @type {?} */\n        var suffix = /** @type {?} */ ((undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n    }\n    outputs = outputs || [];\n    /** @type {?} */\n    var outputDefs = new Array(outputs.length);\n    for (var i = 0; i < outputs.length; i++) {\n        var _e = outputs[i], target = _e[0], eventName = _e[1];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: /** @type {?} */ (target), eventName: eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    /** @type {?} */\n    var attrs = /** @type {?} */ (fixedAttrs.map(function (_a) {\n        var namespaceAndName = _a[0], value = _a[1];\n        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n        return [ns, name, value];\n    }));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns: ns,\n            name: name,\n            attrs: attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createElement(view, renderHost, def) {\n    /** @type {?} */\n    var elDef = /** @type {?} */ ((def.element));\n    /** @type {?} */\n    var rootSelectorOrNode = view.root.selectorOrNode;\n    /** @type {?} */\n    var renderer = view.renderer;\n    /** @type {?} */\n    var el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        /** @type {?} */\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        /** @type {?} */\n        var preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (var i = 0; i < elDef.attrs.length; i++) {\n            var _a = elDef.attrs[i], ns = _a[0], name_2 = _a[1], value = _a[2];\n            renderer.setAttribute(el, name_2, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nexport function listenToElementOutputs(view, compView, def, el) {\n    for (var i = 0; i < def.outputs.length; i++) {\n        /** @type {?} */\n        var output = def.outputs[i];\n        /** @type {?} */\n        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        /** @type {?} */\n        var listenTarget = output.target;\n        /** @type {?} */\n        var listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        /** @type {?} */\n        var disposable = /** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */\n        ((view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindLen = def.bindings.length;\n    /** @type {?} */\n    var changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateElementDynamic(view, def, values) {\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    /** @type {?} */\n    var binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    var elData = asElementData(view, def.nodeIndex);\n    /** @type {?} */\n    var renderNode = elData.renderElement;\n    /** @type {?} */\n    var name = /** @type {?} */ ((binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            /** @type {?} */\n            var bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    /** @type {?} */\n    var securityContext = binding.securityContext;\n    /** @type {?} */\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode, name, value) {\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        /** @type {?} */\n        var unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    var securityContext = binding.securityContext;\n    /** @type {?} */\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n//# sourceMappingURL=element.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getInjectableDef } from '../di/defs';\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { INJECTOR, Injector, setCurrentInjector } from '../di/injector';\nimport { APP_ROOT } from '../di/scope';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { splitDepsDsl, tokenKey } from './util';\n/** @type {?} */\nvar UNDEFINED_VALUE = new Object();\n/** @type {?} */\nvar InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\n/** @type {?} */\nvar NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags: flags, token: token, value: value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nexport function moduleDef(providers) {\n    /** @type {?} */\n    var providersByKey = {};\n    /** @type {?} */\n    var modules = [];\n    /** @type {?} */\n    var isRoot = false;\n    for (var i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        var provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey: providersByKey,\n        providers: providers,\n        modules: modules,\n        isRoot: isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function initNgModule(data) {\n    /** @type {?} */\n    var def = data._def;\n    /** @type {?} */\n    var providers = data._providers = new Array(def.providers.length);\n    for (var i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        var provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveNgModuleDep(data, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    /** @type {?} */\n    var former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        /** @type {?} */\n        var tokenKey_1 = depDef.tokenKey;\n        switch (tokenKey_1) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        /** @type {?} */\n        var providerDef = data._def.providersByKey[tokenKey_1];\n        /** @type {?} */\n        var injectableDef = void 0;\n        if (providerDef) {\n            /** @type {?} */\n            var providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            /** @type {?} */\n            var index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index: index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    /** @type {?} */\n    var injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable != null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callNgModuleLifecycle(ngModule, lifecycles) {\n    /** @type {?} */\n    var def = ngModule._def;\n    /** @type {?} */\n    var destroyed = new Set();\n    for (var i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        var provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            /** @type {?} */\n            var instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                /** @type {?} */\n                var onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=ng_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Services } from './types';\nimport { declaredViewContainer, renderNode, visitRootRenderNodes } from './util';\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nexport function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    /** @type {?} */\n    var prevView = /** @type {?} */ ((viewIndex)) > 0 ? embeddedViews[/** @type {?} */ ((viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    /** @type {?} */\n    var dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    /** @type {?} */\n    var projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    /** @type {?} */\n    var parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nexport function detachEmbeddedView(elementData, viewIndex) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    /** @type {?} */\n    var view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    /** @type {?} */\n    var dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        /** @type {?} */\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nexport function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    /** @type {?} */\n    var view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    /** @type {?} */\n    var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    /** @type {?} */\n    var prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    /** @type {?} */\n    var parentNode = view.renderer.parentNode(prevRenderNode);\n    /** @type {?} */\n    var nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function renderDetachView(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=view_attach.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { ComponentFactory, ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef } from '../linker/element_ref';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { TemplateRef } from '../linker/template_ref';\nimport { stringify } from '../util';\nimport { VERSION } from '../version';\nimport { callNgModuleLifecycle, initNgModule, resolveNgModuleDep } from './ng_module';\nimport { Services, asElementData, asProviderData, asTextData } from './types';\nimport { markParentViewsForCheck, resolveDefinition, rootRenderNodes, splitNamespace, tokenKey, viewParentEl } from './util';\nimport { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView, renderDetachView } from './view_attach';\n/** @type {?} */\nvar EMPTY_CONTEXT = new Object();\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nexport function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nexport function getComponentViewDefinitionFactory(componentFactory) {\n    return (/** @type {?} */ (componentFactory)).viewDefFactory;\n}\nvar ComponentFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory_, _super);\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.selector = selector;\n        _this.componentType = componentType;\n        _this._inputs = _inputs;\n        _this._outputs = _outputs;\n        _this.ngContentSelectors = ngContentSelectors;\n        _this.viewDefFactory = viewDefFactory;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var inputsArr = [];\n            /** @type {?} */\n            var inputs = /** @type {?} */ ((this._inputs));\n            for (var propName in inputs) {\n                /** @type {?} */\n                var templateName = inputs[propName];\n                inputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return inputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var outputsArr = [];\n            for (var propName in this._outputs) {\n                /** @type {?} */\n                var templateName = this._outputs[propName];\n                outputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return outputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a new component.\n     */\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory_.prototype.create = /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        /** @type {?} */\n        var viewDef = resolveDefinition(this.viewDefFactory);\n        /** @type {?} */\n        var componentNodeIndex = /** @type {?} */ ((/** @type {?} */ ((viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        /** @type {?} */\n        var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        /** @type {?} */\n        var component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    };\n    return ComponentFactory_;\n}(ComponentFactory));\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ComponentFactory_.prototype.viewDefFactory;\n    /** @type {?} */\n    ComponentFactory_.prototype.selector;\n    /** @type {?} */\n    ComponentFactory_.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory_.prototype._inputs;\n    /** @type {?} */\n    ComponentFactory_.prototype._outputs;\n    /** @type {?} */\n    ComponentFactory_.prototype.ngContentSelectors;\n}\nvar ComponentRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef_, _super);\n    function ComponentRef_(_view, _viewRef, _component) {\n        var _this = _super.call(this) || this;\n        _this._view = _view;\n        _this._viewRef = _viewRef;\n        _this._component = _component;\n        _this._elDef = _this._view.def.nodes[0];\n        _this.hostView = _viewRef;\n        _this.changeDetectorRef = _viewRef;\n        _this.instance = _component;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (this._component.constructor); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ComponentRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this._viewRef.destroy(); };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._viewRef.onDestroy(callback); };\n    return ComponentRef_;\n}(ComponentRef));\nif (false) {\n    /** @type {?} */\n    ComponentRef_.prototype.hostView;\n    /** @type {?} */\n    ComponentRef_.prototype.instance;\n    /** @type {?} */\n    ComponentRef_.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef_.prototype._elDef;\n    /** @type {?} */\n    ComponentRef_.prototype._view;\n    /** @type {?} */\n    ComponentRef_.prototype._viewRef;\n    /** @type {?} */\n    ComponentRef_.prototype._component;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nexport function createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nvar ViewContainerRef_ = /** @class */ (function () {\n    function ViewContainerRef_(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new ElementRef(this._data.renderElement); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n        /** @deprecated No replacement */\n        get: /**\n         * @deprecated No replacement\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var view = this._view;\n            /** @type {?} */\n            var elDef = this._elDef.parent;\n            while (!elDef && view) {\n                elDef = viewParentEl(view);\n                view = /** @type {?} */ ((view.parent));\n            }\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.clear = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var len = this._embeddedViews.length;\n        for (var i = len - 1; i >= 0; i--) {\n            /** @type {?} */\n            var view = /** @type {?} */ ((detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.get = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var view = this._embeddedViews[index];\n        if (view) {\n            /** @type {?} */\n            var ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    };\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._embeddedViews.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createEmbeddedView = /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    function (templateRef, context, index) {\n        /** @type {?} */\n        var viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createComponent = /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        var contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        /** @type {?} */\n        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.insert = /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    function (viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        var viewRef_ = /** @type {?} */ (viewRef);\n        /** @type {?} */\n        var viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.move = /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    function (viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        var previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.indexOf = /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        return this._embeddedViews.indexOf((/** @type {?} */ (viewRef))._view);\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.remove = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.detach = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    };\n    return ViewContainerRef_;\n}());\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef_.prototype._embeddedViews;\n    /** @type {?} */\n    ViewContainerRef_.prototype._view;\n    /** @type {?} */\n    ViewContainerRef_.prototype._elDef;\n    /** @type {?} */\n    ViewContainerRef_.prototype._data;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nvar ViewRef_ = /** @class */ (function () {\n    function ViewRef_(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return rootRenderNodes(this._view); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._view.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.markForCheck = /**\n     * @return {?}\n     */\n    function () { markParentViewsForCheck(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detach = /**\n     * @return {?}\n     */\n    function () { this._view.state &= ~4 /* Attached */; };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { Services.checkNoChangesView(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.reattach = /**\n     * @return {?}\n     */\n    function () { this._view.state |= 4 /* Attached */; };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push(/** @type {?} */ (callback));\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () {\n        this._appRef = null;\n        renderDetachView(this._view);\n        Services.dirtyParentQueries(this._view);\n    };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    return ViewRef_;\n}());\nexport { ViewRef_ };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef_.prototype._view;\n    /** @type {?} */\n    ViewRef_.prototype._viewContainerRef;\n    /** @type {?} */\n    ViewRef_.prototype._appRef;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nvar TemplateRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(TemplateRef_, _super);\n    function TemplateRef_(_parentView, _def) {\n        var _this = _super.call(this) || this;\n        _this._parentView = _parentView;\n        _this._def = _def;\n        return _this;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateRef_.prototype.createEmbeddedView = /**\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((/** @type {?} */ ((this._def.element)).template)), context));\n    };\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef_;\n}(TemplateRef));\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef_.prototype._projectedViews;\n    /** @type {?} */\n    TemplateRef_.prototype._parentView;\n    /** @type {?} */\n    TemplateRef_.prototype._def;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nexport function createInjector(view, elDef) {\n    return new Injector_(view, elDef);\n}\nvar Injector_ = /** @class */ (function () {\n    function Injector_(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        /** @type {?} */\n        var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n    };\n    return Injector_;\n}());\nif (false) {\n    /** @type {?} */\n    Injector_.prototype.view;\n    /** @type {?} */\n    Injector_.prototype.elDef;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function nodeValue(view, index) {\n    /** @type {?} */\n    var def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        /** @type {?} */\n        var elData = asElementData(view, def.nodeIndex);\n        return /** @type {?} */ ((def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nvar RendererAdapter = /** @class */ (function () {\n    function RendererAdapter(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    RendererAdapter.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    RendererAdapter.prototype.createElement = /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    function (parent, namespaceAndName) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        /** @type {?} */\n        var el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    };\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createViewRoot = /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    function (hostElement) { return hostElement; };\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createTemplateAnchor = /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    function (parentElement) {\n        /** @type {?} */\n        var comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    RendererAdapter.prototype.createText = /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    function (parentElement, value) {\n        /** @type {?} */\n        var node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.projectNodes = /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (parentElement, nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    };\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.attachViewAfter = /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (node, viewRootNodes) {\n        /** @type {?} */\n        var parentElement = this.delegate.parentNode(node);\n        /** @type {?} */\n        var nextSibling = this.delegate.nextSibling(node);\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    };\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.detachView = /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (viewRootNodes) {\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            /** @type {?} */\n            var node = viewRootNodes[i];\n            /** @type {?} */\n            var parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    };\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.destroyView = /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    function (hostElement, viewAllNodes) {\n        for (var i = 0; i < viewAllNodes.length; i++) {\n            /** @type {?} */ ((this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listen = /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listenGlobal = /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, name, callback) {\n        return this.delegate.listen(target, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementProperty = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementAttribute = /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    function (renderElement, namespaceAndName, attributeValue) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setBindingDebugInfo = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementClass = /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementStyle = /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    function (renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    RendererAdapter.prototype.invokeElementMethod = /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    function (renderElement, methodName, args) {\n        (/** @type {?} */ (renderElement))[methodName].apply(renderElement, args);\n    };\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    RendererAdapter.prototype.setText = /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n    /**\n     * @return {?}\n     */\n    RendererAdapter.prototype.animate = /**\n     * @return {?}\n     */\n    function () { throw new Error('Renderer.animate is no longer supported!'); };\n    return RendererAdapter;\n}());\nif (false) {\n    /** @type {?} */\n    RendererAdapter.prototype.delegate;\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nexport function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nvar NgModuleRef_ = /** @class */ (function () {\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    NgModuleRef_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = 0 /* Default */; }\n        /** @type {?} */\n        var flags = 0 /* None */;\n        if (injectFlags & 4 /* SkipSelf */) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & 2 /* Self */) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    };\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(this._moduleType); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(ComponentFactoryResolver); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgModuleRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    return NgModuleRef_;\n}());\nif (false) {\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyListeners;\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyed;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._providers;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._modules;\n    /** @type {?} */\n    NgModuleRef_.prototype.injector;\n    /** @type {?} */\n    NgModuleRef_.prototype._moduleType;\n    /** @type {?} */\n    NgModuleRef_.prototype._parent;\n    /** @type {?} */\n    NgModuleRef_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef_.prototype._def;\n}\n//# sourceMappingURL=refs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, SimpleChange, WrappedValue } from '../change_detection/change_detection';\nimport { INJECTOR, Injector, resolveForwardRef } from '../di';\nimport { ElementRef } from '../linker/element_ref';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer as RendererV1, Renderer2 } from '../render/api';\nimport { stringify } from '../util';\nimport { isObservable } from '../util/lang';\nimport { createChangeDetectorRef, createInjector, createRendererV1 } from './refs';\nimport { Services, asElementData, asProviderData, shouldCallLifecycleInitHook } from './types';\nimport { calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl } from './util';\n/** @type {?} */\nvar RendererV1TokenKey = tokenKey(RendererV1);\n/** @type {?} */\nvar Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nvar ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nvar TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nvar InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nexport function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    /** @type {?} */\n    var bindings = [];\n    if (props) {\n        for (var prop in props) {\n            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName: nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    /** @type {?} */\n    var outputDefs = [];\n    if (outputs) {\n        for (var propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nexport function pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nexport function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n        element: null,\n        provider: { token: token, value: value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createProviderInstance(view, def) {\n    return _createProviderInstance(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPipeInstance(view, def) {\n    /** @type {?} */\n    var compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    var allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createDirectiveInstance(view, def) {\n    /** @type {?} */\n    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    /** @type {?} */\n    var instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n    if (def.outputs.length) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            /** @type {?} */\n            var output = def.outputs[i];\n            /** @type {?} */\n            var outputObservable = instance[/** @type {?} */ ((output.propName))];\n            if (isObservable(outputObservable)) {\n                /** @type {?} */\n                var subscription = outputObservable.subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */\n                ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n            }\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    var directive = providerData.instance;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var changes = /** @type {?} */ ((undefined));\n    /** @type {?} */\n    var bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateDirectiveDynamic(view, def, values) {\n    /** @type {?} */\n    var providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    var directive = providerData.instance;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var changes = /** @type {?} */ ((undefined));\n    for (var i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance(view, def) {\n    /** @type {?} */\n    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    /** @type {?} */\n    var providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return /** @type {?} */ ((providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/** @type {?} */\nexport var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    /** @type {?} */\n    var startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    /** @type {?} */\n    var tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && /** @type {?} */ ((elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = /** @type {?} */ ((elDef.parent));\n    }\n    /** @type {?} */\n    var searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    /** @type {?} */\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    /** @type {?} */\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if (/** @type {?} */ ((elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    /** @type {?} */\n                    var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                    return createInjector(searchView, elDef);\n                default:\n                    /** @type {?} */\n                    var providerDef_1 = /** @type {?} */ (((allowPrivateServices ? /** @type {?} */ ((elDef.element)).allProviders : /** @type {?} */ ((elDef.element)).publicProviders)))[tokenKey];\n                    if (providerDef_1) {\n                        /** @type {?} */\n                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\n                            searchView.nodes[providerDef_1.nodeIndex] = /** @type {?} */ (providerData);\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = /** @type {?} */ ((viewParentEl(searchView)));\n        searchView = /** @type {?} */ ((searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    /** @type {?} */\n    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    /** @type {?} */\n    var compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        /** @type {?} */\n        var compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    /** @type {?} */\n    var binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    var propName = /** @type {?} */ ((binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        /** @type {?} */\n        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        /** @type {?} */\n        var binding_1 = def.bindings[bindingIdx];\n        changes[/** @type {?} */ ((binding_1.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    /** @type {?} */\n    var nodes = view.def.nodes;\n    /** @type {?} */\n    var initIndex = 0;\n    for (var i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = nodes[i];\n        /** @type {?} */\n        var parent_1 = nodeDef.parent;\n        if (!parent_1 && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n            i === parent_1.nodeIndex + parent_1.childCount) {\n            // last child of an element\n            if (parent_1.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n            }\n            parent_1 = parent_1.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    /** @type {?} */\n    var providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    /** @type {?} */\n    var provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n//# sourceMappingURL=provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '../linker/element_ref';\nimport { QueryList } from '../linker/query_list';\nimport { asElementData, asProviderData, asQueryList } from './types';\nimport { declaredViewContainer, filterQueryId, isEmbeddedView } from './util';\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nexport function queryDef(flags, id, bindings) {\n    /** @type {?} */\n    var bindingDefs = [];\n    for (var propName in bindings) {\n        /** @type {?} */\n        var bindingType = bindings[propName];\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nexport function createQuery() {\n    return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function dirtyParentQueries(view) {\n    /** @type {?} */\n    var queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        /** @type {?} */\n        var tplDef = /** @type {?} */ ((view.parentNodeDef));\n        view = view.parent;\n        /** @type {?} */\n        var end = tplDef.nodeIndex + tplDef.childCount;\n        for (var i = 0; i <= end; i++) {\n            /** @type {?} */\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                (/** @type {?} */ ((nodeDef.query)).filterId & queryIds) === /** @type {?} */ ((nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (var i = 0; i < view.def.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nexport function checkAndUpdateQuery(view, nodeDef) {\n    /** @type {?} */\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    /** @type {?} */\n    var directiveInstance;\n    /** @type {?} */\n    var newValues = /** @type {?} */ ((undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        /** @type {?} */\n        var elementDef = /** @type {?} */ ((/** @type {?} */ ((nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    /** @type {?} */\n    var bindings = /** @type {?} */ ((nodeDef.query)).bindings;\n    /** @type {?} */\n    var notify = false;\n    for (var i = 0; i < bindings.length; i++) {\n        /** @type {?} */\n        var binding = bindings[i];\n        /** @type {?} */\n        var boundValue = void 0;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        /** @type {?} */\n        var valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */ ((nodeDef.element)).template &&\n            (/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            /** @type {?} */\n            var elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                /** @type {?} */\n                var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    /** @type {?} */\n                    var embeddedView = embeddedViews[k];\n                    /** @type {?} */\n                    var dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            /** @type {?} */\n            var projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (var k = 0; k < projectedViews.length; k++) {\n                    /** @type {?} */\n                    var projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nexport function getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getParentRenderElement, visitProjectedRenderNodes } from './util';\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nexport function ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index: index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function appendNgContent(view, renderHost, def) {\n    /** @type {?} */\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    /** @type {?} */\n    var ngContentIndex = /** @type {?} */ ((def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n//# sourceMappingURL=ng_content.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asPureExpressionData } from './types';\nimport { calcBindingFlags, checkAndUpdateBinding } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nexport function pureObjectDef(checkIndex, propToIndex) {\n    /** @type {?} */\n    var keys = Object.keys(propToIndex);\n    /** @type {?} */\n    var nbKeys = keys.length;\n    /** @type {?} */\n    var propertyNames = new Array(nbKeys);\n    for (var i = 0; i < nbKeys; i++) {\n        /** @type {?} */\n        var key = keys[i];\n        /** @type {?} */\n        var index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    /** @type {?} */\n    var bindings = new Array(propertyNames.length);\n    for (var i = 0; i < propertyNames.length; i++) {\n        /** @type {?} */\n        var prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        var data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[/** @type {?} */ ((bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[/** @type {?} */ ((bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[/** @type {?} */ ((bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[/** @type {?} */ ((bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[/** @type {?} */ ((bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[/** @type {?} */ ((bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[/** @type {?} */ ((bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[/** @type {?} */ ((bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[/** @type {?} */ ((bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[/** @type {?} */ ((bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                var pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionDynamic(view, def, values) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        var data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (var i = 0; i < values.length; i++) {\n                    value[/** @type {?} */ ((bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                var pipe = values[0];\n                /** @type {?} */\n                var params = values.slice(1);\n                value = pipe.transform.apply(pipe, params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n//# sourceMappingURL=pure_expression.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asTextData } from './types';\nimport { checkAndUpdateBinding, getParentRenderElement } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nexport function textDef(checkIndex, ngContentIndex, staticText) {\n    /** @type {?} */\n    var bindings = new Array(staticText.length - 1);\n    for (var i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0, bindings: bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createText(view, renderHost, def) {\n    /** @type {?} */\n    var renderNode;\n    /** @type {?} */\n    var renderer = view.renderer;\n    renderNode = renderer.createText(/** @type {?} */ ((def.text)).prefix);\n    /** @type {?} */\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        var value = /** @type {?} */ ((def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        /** @type {?} */\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateTextDynamic(view, def, values) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        var value = '';\n        for (var i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = /** @type {?} */ ((def.text)).prefix + value;\n        /** @type {?} */\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    /** @type {?} */\n    var valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n//# sourceMappingURL=text.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { checkAndUpdateElementDynamic, checkAndUpdateElementInline, createElement, listenToElementOutputs } from './element';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { appendNgContent } from './ng_content';\nimport { callLifecycleHooksChildrenFirst, checkAndUpdateDirectiveDynamic, checkAndUpdateDirectiveInline, createDirectiveInstance, createPipeInstance, createProviderInstance } from './provider';\nimport { checkAndUpdatePureExpressionDynamic, checkAndUpdatePureExpressionInline, createPureExpression } from './pure_expression';\nimport { checkAndUpdateQuery, createQuery } from './query';\nimport { createTemplateData, createViewContainerData } from './refs';\nimport { checkAndUpdateTextDynamic, checkAndUpdateTextInline, createText } from './text';\nimport { Services, asElementData, asQueryList, asTextData, shiftInitState } from './types';\nimport { NOOP, checkBindingNoChanges, isComponentView, markParentViewsForCheckProjectedViews, resolveDefinition, tokenKey } from './util';\nimport { detachProjectedView } from './view_attach';\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nexport function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    /** @type {?} */\n    var viewBindingCount = 0;\n    /** @type {?} */\n    var viewDisposableCount = 0;\n    /** @type {?} */\n    var viewNodeFlags = 0;\n    /** @type {?} */\n    var viewRootNodeFlags = 0;\n    /** @type {?} */\n    var viewMatchedQueries = 0;\n    /** @type {?} */\n    var currentParent = null;\n    /** @type {?} */\n    var currentRenderParent = null;\n    /** @type {?} */\n    var currentElementHasPublicProviders = false;\n    /** @type {?} */\n    var currentElementHasPrivateProviders = false;\n    /** @type {?} */\n    var lastRenderRootNode = null;\n    for (var i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        var node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            /** @type {?} */\n            var elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? /** @type {?} */ ((currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true; /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).publicProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders); /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).allProviders = /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders;\n            }\n            /** @type {?} */\n            var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            /** @type {?} */\n            var isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true; /** @type {?} */\n                    ((/** @type {?} */ ((currentParent)).element)).allProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders);\n                } /** @type {?} */\n                ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                /** @type {?} */\n                var newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    var handleEvent = function (view, nodeIndex, eventName, event) { return ((/** @type {?} */ ((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */ ((node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    /** @type {?} */\n    var template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        /** @type {?} */\n        var parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.childCount) {\n        /** @type {?} */\n        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nexport function createEmbeddedView(parent, anchorDef, viewDef, context) {\n    /** @type {?} */\n    var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nexport function createRootView(root, def, context) {\n    /** @type {?} */\n    var view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nexport function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    var rendererType = /** @type {?} */ ((nodeDef.element)).componentRendererType;\n    /** @type {?} */\n    var compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    /** @type {?} */\n    var nodes = new Array(def.nodes.length);\n    /** @type {?} */\n    var disposables = def.outputCount ? new Array(def.outputCount) : null;\n    /** @type {?} */\n    var view = {\n        def: def,\n        parent: parent,\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\n        context: null,\n        component: null, nodes: nodes,\n        state: 13 /* CatInit */, root: root, renderer: renderer,\n        oldValues: new Array(def.bindingCount), disposables: disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    /** @type {?} */\n    var renderHost;\n    if (isComponentView(view)) {\n        /** @type {?} */\n        var hostDef = view.parentNodeDef;\n        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((/** @type {?} */ ((hostDef)).parent)).nodeIndex).renderElement;\n    }\n    /** @type {?} */\n    var def = view.def;\n    /** @type {?} */\n    var nodes = view.nodes;\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        /** @type {?} */\n        var nodeData = void 0;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                /** @type {?} */\n                var el = /** @type {?} */ (createElement(view, renderHost, nodeDef));\n                /** @type {?} */\n                var componentView = /** @type {?} */ ((undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    /** @type {?} */\n                    var compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = /** @type {?} */ ({\n                    renderElement: el,\n                    componentView: componentView,\n                    viewContainer: null,\n                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                });\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = /** @type {?} */ (createText(view, renderHost, nodeDef));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    /** @type {?} */\n                    var instance = createProviderInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                /** @type {?} */\n                var instance = createPipeInstance(view, nodeDef);\n                nodeData = /** @type {?} */ ({ instance: instance });\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    /** @type {?} */\n                    var instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    /** @type {?} */\n                    var compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = /** @type {?} */ (createPureExpression(view, nodeDef));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = /** @type {?} */ (createQuery());\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    /** @type {?} */\n    var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            /** @type {?} */\n            var projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                    /** @type {?} */\n                    var projectedView = projectedViews[i_1];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (var i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    /** @type {?} */\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" not dirty\", \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (var i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    /** @type {?} */\n    var len = view.def.nodes.length;\n    for (var i = 0; i < len; i++) {\n        /** @type {?} */\n        var def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nvar ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';\nViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';\nViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';\nViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';\nViewAction[ViewAction.Destroy] = 'Destroy';\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            var embeddedViews = /** @type {?} */ ((asElementData(view, i).viewContainer))._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    /** @type {?} */\n    var viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    /** @type {?} */\n    var nodeCount = view.def.nodes.length;\n    for (var i = 0; i < nodeCount; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DebugElement, DebugNode, EventListener, getDebugNode, indexDebugNode, removeDebugNodeFromIndex } from '../debug/debug_node';\nimport { getInjectableDef } from '../di/defs';\nimport { ErrorHandler } from '../error_handler';\nimport { isDevMode } from '../is_dev_mode';\nimport { ivyEnabled } from '../ivy_switch/compiler/index';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { tokenKey } from '../view/util';\nimport { isViewDebugError, viewDestroyedError, viewWrappedDebugError } from './errors';\nimport { resolveDep } from './provider';\nimport { dirtyParentQueries, getQueryValue } from './query';\nimport { createInjector, createNgModuleRef, getComponentViewDefinitionFactory } from './refs';\nimport { Services, asElementData, asPureExpressionData } from './types';\nimport { NOOP, isComponentView, renderNode, resolveDefinition, splitDepsDsl, viewParentEl } from './util';\nimport { checkAndUpdateNode, checkAndUpdateView, checkNoChangesNode, checkNoChangesView, createComponentView, createEmbeddedView, createRootView, destroyView } from './view';\n/** @type {?} */\nvar initialized = false;\n/**\n * @return {?}\n */\nexport function initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    /** @type {?} */\n    var services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: function () { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: function (view, nodeIndex, eventName, event) {\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\n        },\n        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    /** @type {?} */\n    var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    /** @type {?} */\n    var sanitizer = ngModule.injector.get(Sanitizer);\n    /** @type {?} */\n    var errorHandler = ngModule.injector.get(ErrorHandler);\n    /** @type {?} */\n    var renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule: ngModule,\n        injector: elInjector, projectableNodes: projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    var overrideComponentView = viewDefOverrides.get(/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n/** @type {?} */\nvar providerOverrides = new Map();\n/** @type {?} */\nvar providerOverridesWithScope = new Map();\n/** @type {?} */\nvar viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    /** @type {?} */\n    var injectableDef;\n    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n        typeof injectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set(/** @type {?} */ (override.token), override);\n    }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    /** @type {?} */\n    var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    /** @type {?} */\n    var compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    /** @type {?} */\n    var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        /** @type {?} */\n        var elIndicesWithOverwrittenProviders = [];\n        /** @type {?} */\n        var lastElementDef = null;\n        for (var i = 0; i < def.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                /** @type {?} */\n                var provider = /** @type {?} */ ((nodeDef.provider));\n                /** @type {?} */\n                var override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        /** @type {?} */\n        var hasOverrides = false;\n        /** @type {?} */\n        var hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        def.providers.forEach(function (node) {\n            /** @type {?} */\n            var override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        def.modules.forEach(function (module) {\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (/** @type {?} */ ((getInjectableDef(token))).providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n        });\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (var i = 0; i < def.providers.length; i++) {\n            /** @type {?} */\n            var provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            /** @type {?} */\n            var override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            /** @type {?} */\n            var moduleSet_1 = new Set(def.modules);\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (moduleSet_1.has(/** @type {?} */ ((getInjectableDef(token))).providedIn)) {\n                    /** @type {?} */\n                    var provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            });\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nvar DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = 'create';\nDebugAction[DebugAction.detectChanges] = 'detectChanges';\nDebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';\nDebugAction[DebugAction.destroy] = 'destroy';\nDebugAction[DebugAction.handleEvent] = 'handleEvent';\n/** @type {?} */\nvar _currentAction;\n/** @type {?} */\nvar _currentView;\n/** @type {?} */\nvar _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    /** @type {?} */\n    var changed = (/** @type {?} */ (checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));\n    if (changed) {\n        /** @type {?} */\n        var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            /** @type {?} */\n            var bindingValues = {};\n            for (var i = 0; i < nodeDef.bindings.length; i++) {\n                /** @type {?} */\n                var binding = nodeDef.bindings[i];\n                /** @type {?} */\n                var value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            /** @type {?} */\n            var elDef = /** @type {?} */ ((nodeDef.parent));\n            /** @type {?} */\n            var el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!/** @type {?} */ ((elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n            }\n            else {\n                // a regular element.\n                for (var attr in bindingValues) {\n                    /** @type {?} */\n                    var value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    (/** @type {?} */ (checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return \"ng-reflect-\" + name;\n}\n/** @type {?} */\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nvar DebugContext_ = /** @class */ (function () {\n    function DebugContext_(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        var elDef = this.nodeDef;\n        /** @type {?} */\n        var elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = /** @type {?} */ ((elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = /** @type {?} */ ((viewParentEl(elView)));\n                elView = /** @type {?} */ ((elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return createInjector(this.elView, this.elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var tokens = [];\n            if (this.elDef) {\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    /** @type {?} */\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        tokens.push(/** @type {?} */ ((childDef.provider)).token);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return tokens;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var references = {};\n            if (this.elDef) {\n                collectReferences(this.elView, this.elDef, references);\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    /** @type {?} */\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        collectReferences(this.elView, childDef, references);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return references;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var elData = findHostElement(this.elOrCompView);\n            return elData ? elData.renderElement : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                renderNode(this.elView, this.elDef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext_.prototype.logError = /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        /** @type {?} */\n        var logViewDef;\n        /** @type {?} */\n        var logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        /** @type {?} */\n        var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        /** @type {?} */\n        var currRenderNodeIndex = -1;\n        /** @type {?} */\n        var nodeLogger = function () {\n            var _a;\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return (_a = console.error).bind.apply(_a, [console].concat(values));\n            }\n            else {\n                return NOOP;\n            }\n        }; /** @type {?} */\n        ((logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            console.error.apply(console, values);\n        }\n    };\n    return DebugContext_;\n}());\nif (false) {\n    /** @type {?} */\n    DebugContext_.prototype.nodeDef;\n    /** @type {?} */\n    DebugContext_.prototype.elView;\n    /** @type {?} */\n    DebugContext_.prototype.elDef;\n    /** @type {?} */\n    DebugContext_.prototype.view;\n    /** @type {?} */\n    DebugContext_.prototype.nodeIndex;\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    /** @type {?} */\n    var renderNodeIndex = -1;\n    for (var i = 0; i <= nodeIndex; i++) {\n        /** @type {?} */\n        var nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = /** @type {?} */ ((view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (var refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    /** @type {?} */\n    var oldAction = _currentAction;\n    /** @type {?} */\n    var oldView = _currentView;\n    /** @type {?} */\n    var oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        /** @type {?} */\n        var result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nexport function getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nvar DebugRendererFactory2 = /** @class */ (function () {\n    function DebugRendererFactory2(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.createRenderer = /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    function (element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.begin = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.end = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.whenRenderingDone = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    };\n    return DebugRendererFactory2;\n}());\nexport { DebugRendererFactory2 };\nif (false) {\n    /** @type {?} */\n    DebugRendererFactory2.prototype.delegate;\n}\nvar DebugRenderer2 = /** @class */ (function () {\n    function DebugRenderer2(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    /**\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createDebugContext = /**\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    function (nativeElement) { return this.debugContextFactory(nativeElement); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroyNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this.delegate.destroy(); };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createElement = /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (name, namespace) {\n        /** @type {?} */\n        var el = this.delegate.createElement(name, namespace);\n        /** @type {?} */\n        var debugCtx = this.createDebugContext(el);\n        if (debugCtx) {\n            /** @type {?} */\n            var debugEl = new DebugElement(el, null, debugCtx);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createComment = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var comment = this.delegate.createComment(value);\n        /** @type {?} */\n        var debugCtx = this.createDebugContext(comment);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(comment, null, debugCtx));\n        }\n        return comment;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createText = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var text = this.delegate.createText(value);\n        /** @type {?} */\n        var debugCtx = this.createDebugContext(text);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(text, null, debugCtx));\n        }\n        return text;\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.appendChild = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (parent, newChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.insertBefore = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    function (parent, newChild, refChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(newChild);\n        /** @type {?} */\n        var debugRefEl = /** @type {?} */ ((getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeChild = /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    function (parent, oldChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    };\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    DebugRenderer2.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    function (selectorOrNode, preserveContent) {\n        /** @type {?} */\n        var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        /** @type {?} */\n        var debugCtx = getCurrentDebugContext() || (ivyEnabled ? this.createDebugContext(el) : null);\n        if (debugCtx) {\n            indexDebugNode(new DebugElement(el, null, debugCtx));\n        }\n        return el;\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, value, namespace) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            /** @type {?} */\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, namespace) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            /** @type {?} */\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.addClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, value, flags) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, flags) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setProperty = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (el, name, value) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    DebugRenderer2.prototype.listen = /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, eventName, callback) {\n        if (typeof target !== 'string') {\n            /** @type {?} */\n            var debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.parentNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.parentNode(node); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.nextSibling = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.nextSibling(node); };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setValue = /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    function (node, value) { return this.delegate.setValue(node, value); };\n    return DebugRenderer2;\n}());\nexport { DebugRenderer2 };\nif (false) {\n    /** @type {?} */\n    DebugRenderer2.prototype.data;\n    /**\n     * Factory function used to create a `DebugContext` when a node is created.\n     *\n     * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n     *\n     * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n     * or a Render context.\n     * @type {?}\n     */\n    DebugRenderer2.prototype.debugContextFactory;\n    /** @type {?} */\n    DebugRenderer2.prototype.delegate;\n}\n//# sourceMappingURL=services.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { NgModuleFactory } from '../linker/ng_module_factory';\nimport { initServicesIfNeeded } from './services';\nimport { Services } from './types';\nimport { resolveDefinition } from './util';\n/**\n * @param {?} override\n * @return {?}\n */\nexport function overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nexport function overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nexport function clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nexport function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction cloneNgModuleDefinition(def) {\n    /** @type {?} */\n    var providers = Array.from(def.providers);\n    /** @type {?} */\n    var modules = Array.from(def.modules);\n    /** @type {?} */\n    var providersByKey = {};\n    for (var key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers: providers, modules: modules, providersByKey: providersByKey,\n    };\n}\nvar NgModuleFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory_, _super);\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.moduleType = moduleType;\n        _this._bootstrapComponents = _bootstrapComponents;\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory_.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        initServicesIfNeeded();\n        /** @type {?} */\n        var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    };\n    return NgModuleFactory_;\n}(NgModuleFactory));\nif (false) {\n    /** @type {?} */\n    NgModuleFactory_.prototype.moduleType;\n    /** @type {?} */\n    NgModuleFactory_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleFactory_.prototype._ngModuleDefFactory;\n}\n//# sourceMappingURL=entrypoint.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { assertDefined } from './assert';\nimport { discoverDirectives, discoverLocalRefs, getContext, isComponentInstance } from './context_discovery';\nimport { NodeInjector } from './di';\nimport { CONTEXT, FLAGS, PARENT, TVIEW } from './interfaces/view';\nimport { getComponentViewByIndex, readPatchedLViewData } from './util';\n/**\n * Returns the component instance associated with the target.\n *\n * If a DOM is used then it will return the component that\n *    owns the view where the element is situated.\n * If a component instance is used then it will return the\n *    instance of the parent component depending on where\n *    the component instance is exists in a template.\n * If a directive instance is used then it will return the\n *    component that contains that directive in it's template.\n * @template T\n * @param {?} target\n * @return {?}\n */\nexport function getComponent(target) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(target)));\n    if (context.component === undefined) {\n        /** @type {?} */\n        var lViewData = context.lViewData;\n        while (lViewData) {\n            /** @type {?} */\n            var ctx = /** @type {?} */ (((/** @type {?} */ ((lViewData))[CONTEXT])));\n            if (ctx && isComponentInstance(ctx)) {\n                context.component = ctx;\n                break;\n            }\n            lViewData = /** @type {?} */ ((/** @type {?} */ ((lViewData))[PARENT]));\n        }\n        if (context.component === undefined) {\n            context.component = null;\n        }\n    }\n    return /** @type {?} */ (context.component);\n}\n/**\n * Returns the host component instance associated with the target.\n *\n * This will only return a component instance of the DOM node\n * contains an instance of a component on it.\n * @template T\n * @param {?} target\n * @return {?}\n */\nexport function getHostComponent(target) {\n    /** @type {?} */\n    var context = loadContext(target);\n    /** @type {?} */\n    var tNode = /** @type {?} */ (context.lViewData[TVIEW].data[context.nodeIndex]);\n    if (tNode.flags & 4096 /* isComponent */) {\n        /** @type {?} */\n        var componentView = getComponentViewByIndex(context.nodeIndex, context.lViewData);\n        return /** @type {?} */ ((componentView[CONTEXT]));\n    }\n    return null;\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n * @param {?} target\n * @return {?}\n */\nexport function getRootContext(target) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(target)));\n    /** @type {?} */\n    var rootLViewData = getRootView(context.lViewData);\n    return /** @type {?} */ (rootLViewData[CONTEXT]);\n}\n/**\n * Returns a list of all the components in the application\n * that are have been bootstrapped.\n * @param {?} target\n * @return {?}\n */\nexport function getRootComponents(target) {\n    return getRootContext(target).components.slice();\n}\n/**\n * Returns the injector instance that is associated with\n * the element, component or directive.\n * @param {?} target\n * @return {?}\n */\nexport function getInjector(target) {\n    /** @type {?} */\n    var context = loadContext(target);\n    /** @type {?} */\n    var tNode = /** @type {?} */ (context.lViewData[TVIEW].data[context.nodeIndex]);\n    return new NodeInjector(tNode, context.lViewData);\n}\n/**\n * Returns a list of all the directives that are associated\n * with the underlying target element.\n * @param {?} target\n * @return {?}\n */\nexport function getDirectives(target) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(target)));\n    if (context.directives === undefined) {\n        context.directives = discoverDirectives(context.nodeIndex, context.lViewData, false);\n    }\n    return context.directives || [];\n}\n/**\n * Returns LContext associated with a target passed as an argument.\n * Throws if a given target doesn't have associated LContext.\n * @param {?} target\n * @return {?}\n */\nexport function loadContext(target) {\n    /** @type {?} */\n    var context = getContext(target);\n    if (!context) {\n        throw new Error(ngDevMode ? 'Unable to find the given context data for the given target' :\n            'Invalid ng target');\n    }\n    return context;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LViewData` until\n * reaching the root `LViewData`.\n *\n * @param {?} componentOrView any component or view\n * @return {?}\n */\nexport function getRootView(componentOrView) {\n    /** @type {?} */\n    var lViewData;\n    if (Array.isArray(componentOrView)) {\n        ngDevMode && assertDefined(componentOrView, 'lViewData');\n        lViewData = /** @type {?} */ (componentOrView);\n    }\n    else {\n        ngDevMode && assertDefined(componentOrView, 'component');\n        lViewData = /** @type {?} */ ((readPatchedLViewData(componentOrView)));\n    }\n    while (lViewData && !(lViewData[FLAGS] & 64 /* IsRoot */)) {\n        lViewData = /** @type {?} */ ((lViewData[PARENT]));\n    }\n    return lViewData;\n}\n/**\n *  Retrieve map of local references (local reference name => element or directive instance).\n * @param {?} target\n * @return {?}\n */\nexport function getLocalRefs(target) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(target)));\n    if (context.localRefs === undefined) {\n        context.localRefs = discoverLocalRefs(context.lViewData, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n//# sourceMappingURL=discovery_utils.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DebugRendererFactory2 } from '../view/services';\nimport { getHostComponent, getInjector, getLocalRefs, loadContext } from './discovery_utils';\nimport { TVIEW } from './interfaces/view';\n/**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nvar /**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nRender3DebugRendererFactory2 = /** @class */ (function (_super) {\n    tslib_1.__extends(Render3DebugRendererFactory2, _super);\n    function Render3DebugRendererFactory2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    Render3DebugRendererFactory2.prototype.createRenderer = /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    function (element, renderData) {\n        /** @type {?} */\n        var renderer = /** @type {?} */ (_super.prototype.createRenderer.call(this, element, renderData));\n        renderer.debugContextFactory = function (nativeElement) { return new Render3DebugContext(nativeElement); };\n        return renderer;\n    };\n    return Render3DebugRendererFactory2;\n}(DebugRendererFactory2));\n/**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nexport { Render3DebugRendererFactory2 };\n/**\n * Stores context information about view nodes.\n *\n * Used in tests to retrieve information those nodes.\n */\nvar /**\n * Stores context information about view nodes.\n *\n * Used in tests to retrieve information those nodes.\n */\nRender3DebugContext = /** @class */ (function () {\n    function Render3DebugContext(_nativeNode) {\n        this._nativeNode = _nativeNode;\n    }\n    Object.defineProperty(Render3DebugContext.prototype, \"nodeIndex\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return loadContext(this._nativeNode).nodeIndex; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"view\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return loadContext(this._nativeNode).lViewData; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return getInjector(this._nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return getHostComponent(this._nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var lDebugCtx = loadContext(this._nativeNode);\n            /** @type {?} */\n            var lViewData = lDebugCtx.lViewData;\n            /** @type {?} */\n            var tNode = /** @type {?} */ (lViewData[TVIEW].data[lDebugCtx.nodeIndex]);\n            /** @type {?} */\n            var directivesCount = tNode.flags & 4095 /* DirectiveCountMask */;\n            if (directivesCount > 0) {\n                /** @type {?} */\n                var directiveIdxStart = tNode.flags >> 15 /* DirectiveStartingIndexShift */;\n                /** @type {?} */\n                var directiveIdxEnd = directiveIdxStart + directivesCount;\n                /** @type {?} */\n                var viewDirectiveDefs = this.view[TVIEW].data;\n                /** @type {?} */\n                var directiveDefs = /** @type {?} */ (viewDirectiveDefs.slice(directiveIdxStart, directiveIdxEnd));\n                return directiveDefs.map(function (directiveDef) { return directiveDef.type; });\n            }\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return getLocalRefs(this._nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"context\", {\n        // TODO(pk): check previous implementation and re-implement\n        get: /**\n         * @return {?}\n         */\n        function () { throw new Error('Not implemented in ivy'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"componentRenderElement\", {\n        // TODO(pk): check previous implementation and re-implement\n        get: /**\n         * @return {?}\n         */\n        function () { throw new Error('Not implemented in ivy'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"renderNode\", {\n        // TODO(pk): check previous implementation and re-implement\n        get: /**\n         * @return {?}\n         */\n        function () { throw new Error('Not implemented in ivy'); },\n        enumerable: true,\n        configurable: true\n    });\n    // TODO(pk): check previous implementation and re-implement\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    Render3DebugContext.prototype.logError = /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        console.error.apply(console, values);\n    };\n    return Render3DebugContext;\n}());\nif (false) {\n    /** @type {?} */\n    Render3DebugContext.prototype._nativeNode;\n}\n//# sourceMappingURL=debug.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar CorePlayerHandler = /** @class */ (function () {\n    function CorePlayerHandler() {\n        this._players = [];\n    }\n    /**\n     * @return {?}\n     */\n    CorePlayerHandler.prototype.flushPlayers = /**\n     * @return {?}\n     */\n    function () {\n        for (var i = 0; i < this._players.length; i++) {\n            /** @type {?} */\n            var player = this._players[i];\n            if (!player.parent) {\n                player.play();\n            }\n        }\n        this._players.length = 0;\n    };\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    CorePlayerHandler.prototype.queuePlayer = /**\n     * @param {?} player\n     * @return {?}\n     */\n    function (player) { this._players.push(player); };\n    return CorePlayerHandler;\n}());\nexport { CorePlayerHandler };\nif (false) {\n    /** @type {?} */\n    CorePlayerHandler.prototype._players;\n}\n//# sourceMappingURL=core_player_handler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { getContext } from './context_discovery';\nimport { scheduleTick } from './instructions';\nimport { CorePlayerHandler } from './styling/core_player_handler';\nimport { getOrCreatePlayerContext } from './styling/util';\nimport { getRootContext } from './util';\n/**\n * @param {?} ref\n * @param {?} player\n * @return {?}\n */\nexport function addPlayer(ref, player) {\n    /** @type {?} */\n    var elementContext = /** @type {?} */ ((getContext(ref)));\n    /** @type {?} */\n    var animationContext = /** @type {?} */ ((getOrCreatePlayerContext(elementContext.native, elementContext)));\n    animationContext.push(player);\n    player.addEventListener(200 /* Destroyed */, function () {\n        /** @type {?} */\n        var index = animationContext.indexOf(player);\n        if (index >= 0) {\n            animationContext.splice(index, 1);\n        }\n        player.destroy();\n    });\n    /** @type {?} */\n    var rootContext = getRootContext(elementContext.lViewData);\n    /** @type {?} */\n    var playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n    playerHandler.queuePlayer(player, ref);\n    /** @type {?} */\n    var nothingScheduled = rootContext.flags === 0 /* Empty */;\n    // change detection may or may not happen therefore\n    // the core code needs to be kicked off to flush the animations\n    rootContext.flags |= 2 /* FlushPlayers */;\n    if (nothingScheduled) {\n        scheduleTick(rootContext);\n    }\n}\n/**\n * @param {?} ref\n * @return {?}\n */\nexport function getPlayers(ref) {\n    return getOrCreatePlayerContext(ref);\n}\n//# sourceMappingURL=player.js.map"]}