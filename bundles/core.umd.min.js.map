{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/core/esm5/src/di/injection_token.js","../../../packages/core/esm5/src/util/decorators.js","../../../packages/core/esm5/src/change_detection/constants.js","../../../packages/core/esm5/src/util.js","../../../packages/core/esm5/src/di/forward_ref.js","../../../packages/core/esm5/src/di/injector.js","../../../packages/core/esm5/src/metadata/resource_loading.js","../../../packages/core/esm5/src/metadata/view.js","../../../packages/core/esm5/src/render3/assert.js","../../../packages/core/esm5/src/render3/hooks.js","../../../packages/core/esm5/src/render3/ng_dev_mode.js","../../../packages/core/esm5/src/render3/element_discovery.js","../../../packages/core/esm5/src/render3/interfaces/renderer.js","../../../packages/core/esm5/src/render3/node_assert.js","../../../packages/core/esm5/src/change_detection/change_detection_util.js","../../../packages/core/esm5/src/render3/util.js","../../../packages/core/esm5/src/render3/node_manipulation.js","../../../packages/core/esm5/src/render3/node_selector_matcher.js","../../../packages/core/esm5/src/render3/styling.js","../../../packages/core/esm5/src/render3/instructions.js","../../../packages/core/esm5/src/render3/errors.js","../../../packages/core/esm5/src/render3/component.js","../../../packages/core/esm5/src/render3/definition.js","../../../packages/core/esm5/src/util/property.js","../../../packages/core/esm5/src/render3/features/inherit_definition_feature.js","../../../packages/core/esm5/src/render3/features/ng_onchanges_feature.js","../../../packages/core/esm5/src/linker/element_ref.js","../../../packages/core/esm5/src/render/api.js","../../../packages/core/esm5/src/linker/component_factory_resolver.js","../../../packages/core/esm5/src/render3/view_ref.js","../../../packages/core/esm5/src/render3/component_ref.js","../../../packages/core/esm5/src/render3/di.js","../../../packages/core/esm5/src/render3/i18n.js","../../../packages/core/esm5/src/di/r3_injector.js","../../../packages/core/esm5/src/render3/ng_module_ref.js","../../../packages/core/esm5/src/render3/pure_function.js","../../../packages/core/esm5/src/render3/pipe.js","../../../packages/core/esm5/src/event_emitter.js","../../../packages/core/esm5/src/render3/query.js","../../../packages/core/esm5/src/sanitization/bypass.js","../../../packages/core/esm5/src/sanitization/inert_body.js","../../../packages/core/esm5/src/sanitization/url_sanitizer.js","../../../packages/core/esm5/src/sanitization/html_sanitizer.js","../../../packages/core/esm5/src/sanitization/security.js","../../../packages/core/esm5/src/sanitization/style_sanitizer.js","../../../packages/core/esm5/src/sanitization/sanitization.js","../../../packages/core/esm5/src/render3/jit/environment.js","../../../packages/core/esm5/src/type.js","../../../packages/core/esm5/src/reflection/reflection_capabilities.js","../../../packages/core/esm5/src/render3/jit/util.js","../../../packages/core/esm5/src/render3/jit/module.js","../../../packages/core/esm5/src/render3/jit/directive.js","../../../packages/core/esm5/src/render3/jit/injectable.js","../../../packages/core/esm5/src/render3/jit/pipe.js","../../../packages/core/esm5/src/ivy_switch_legacy.js","../../../packages/core/esm5/src/metadata/directives.js","../../../packages/core/esm5/src/version.js","../../../packages/core/esm5/src/errors.js","../../../packages/core/esm5/src/error_handler.js","../../../packages/core/esm5/src/di/reflective_errors.js","../../../packages/core/esm5/src/di/reflective_key.js","../../../packages/core/esm5/src/reflection/reflector.js","../../../packages/core/esm5/src/di/reflective_provider.js","../../../packages/core/esm5/src/di/reflective_injector.js","../../../packages/core/esm5/src/application_init.js","../../../packages/core/esm5/src/application_tokens.js","../../../packages/core/esm5/src/console.js","../../../packages/core/esm5/src/linker/compiler.js","../../../packages/core/esm5/src/profile/wtf_impl.js","../../../packages/core/esm5/src/zone/ng_zone.js","../../../packages/core/esm5/src/testability/testability.js","../../../packages/core/esm5/src/application_ref.js","../../../packages/core/esm5/src/linker/ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/query_list.js","../../../packages/core/esm5/src/linker/system_js_ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/view_ref.js","../../../packages/core/esm5/src/debug/debug_node.js","../../../packages/core/esm5/src/change_detection/differs/default_iterable_differ.js","../../../packages/core/esm5/src/change_detection/differs/default_keyvalue_differ.js","../../../packages/core/esm5/src/change_detection/differs/iterable_differs.js","../../../packages/core/esm5/src/change_detection/differs/keyvalue_differs.js","../../../packages/core/esm5/src/i18n/tokens.js","../../../packages/core/esm5/src/application_module.js","../../../packages/core/esm5/src/view/types.js","../../../packages/core/esm5/src/view/errors.js","../../../packages/core/esm5/src/view/util.js","../../../packages/core/esm5/src/view/element.js","../../../packages/core/esm5/src/view/ng_module.js","../../../packages/core/esm5/src/view/view_attach.js","../../../packages/core/esm5/src/view/refs.js","../../../packages/core/esm5/src/view/provider.js","../../../packages/core/esm5/src/view/query.js","../../../packages/core/esm5/src/view/ng_content.js","../../../packages/core/esm5/src/view/pure_expression.js","../../../packages/core/esm5/src/view/text.js","../../../packages/core/esm5/src/view/view.js","../../../packages/core/esm5/src/view/services.js","../../../packages/core/esm5/src/view/entrypoint.js","../../../packages/core/esm5/src/render3/debug.js"],"names":["exports","module","factory","require","extendStatics","d","b","__proto__","Array","p","hasOwnProperty","__","this","constructor","Object","create","prototype","assign","t","s","i","n","arguments","length","call","InjectionToken","_desc","options","ngMetadataName","ngInjectableDef","undefined","defineInjectable","providedIn","toString","metaCtor","makeMetadataCtor","props","DecoratorFactory","args","_i","apply","concat","annotationInstance","_a","bind","cls","typeFn","ANNOTATIONS","defineProperty","value","push","additionalProcessing","parentClass","values","propName","ParamDecoratorFactory","parameters","PARAMETERS","index","PropDecoratorFactory","target","name","meta","PROP_METADATA","unshift","decoratorInstance","OnPush","Default","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Errored","Destroyed","__window","window","__self","self","WorkerGlobalScope","_symbolIterator","Symbol_1","iterator","getOwnPropertyNames","Map","keys","key","scheduleMicroTask","fn","Zone","promise","then","stringify","token","map","join","overriddenName","res","resolveForwardRef","type","__forward_ref__","forwardRef","NullInjector","get","notFoundValue","_THROW_IF_NOT_FOUND","Error","parent","isArray","StaticInjector","providers","THROW_IF_NOT_FOUND","Injector","NULL","inject","INJECTOR","EMPTY","USE_VALUE","slice","objWithPropertyToExtract","GET_PROPERTY_NAME$1","NULL_INJECTOR","source","records","provider","provide","deps","providerDeps","j","annotations","annotation","Optional","SkipSelf","Self","Inject","useExisting","USE_VALUE$1","useNew","useValue","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","set","MULTI_PROVIDER_FN","record","resolvedProvider","flags","tryResolveToken","_records","e","tokenPath","NG_TEMP_TOKEN_PATH","SOURCE","message","formatError","tokens","NO_NEW_LINE","depRecords","depRecord","childRecord","obj","resolveToken","CIRCULAR","text","charAt","substr","context","parts","JSON","_currentInjector","setCurrentInjector","injector","injectableDef","injectArgs","types","arg","componentResourceResolutionQueue","Set","ShadowDom","assertComponentType","actual","msg","queueInitHooks","onInit","doCheck","tView","ngDevMode","assertEqual","firstTemplatePass","initHooks","queueLifecycleHooks","start","end","def","queueContentHooks","afterContentInit","contentHooks","queueViewHooks","afterViewInit","viewHooks","executeInitHooks","currentView","creationMode","executeHooks","data","allHooks","checkHooks","__global$1","global","tNode","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererDestroyNode","lViewData","result","native","element","RendererStyleFlags3","assertNodeOfPossibleTypes","node","typeName","devModeEqual","a","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","comparator","iterator1","getSymbolIterator","iterator2","item1","next","item2","done","WrappedValue","wrap","isWrapped","SimpleChange","isFirstChange","stringify$1","getNextLNode","getChildLNode","child","getParentLNode","containerHostIndex","CONTAINER_INDEX","view","dynamicLContainerNode","walkLNodeTree","startingNode","rootNode","action","renderer","renderParentNode","beforeNode","projectionNodeIndex","nextNode","parent_1","nodeType","lContainerNode","childContainerData","VIEWS","projectionNodeStack","componentHost","findComponentHost","projectionNodeStack$1","head","PARENT","viewRootLNode","HOST_NODE","assertDefined","executeNodeAction","insertBefore","isProceduralRenderer","removeChild","assertNodeType","container","parentNode","RENDER_PARENT","views","lView","viewNode","NEXT","splice","QUERIES","insertView","detachView","removeIndex","detached","removedLView","removeView","getLViewChild","viewData","TVIEW","childIndex","destroyLView","destroyNode","rootView","viewOrContainer","HEADER_OFFSET","cleanUpView","getParentState","cleanup","readElementValue","removeEventListener","listener","cleanupFn","CLEANUP","id","RENDERER","canInsertNativeChildOfElement","grandParentContainer","canInsertNativeNode","grandParent","canInsertNativeChildOfView","nativeInsertBefore","indexOf","renderParent","getRenderParent","appendChild","appendProjectedNode","currentParent","parentView","lContainer","addRemoveViewFromContainer","ngContainerChild","parentView_1","isNodeMatchingSelector","selector","nodeClassesLen","matchEndIdx","nodeAttrs","selectOnlyMarkerIdx","mode","current","tagName","isPositive","skipToNextSelector","attrIndexInNode","findAttrIndexInNode","selectorAttrValue","nodeAttrValue","maybeAttrName","assertNotEqual","matchIndex","cssClassToMatch","attrs","selectOnlyMode","isNodeMatchingSelectorList","ngProjectAsAttrIdx","NG_PROJECT_AS_ATTR_NAME","getProjectAsAttrValue","selectors","ngProjectAsAttrVal","textSelectors","setValue","singleIndex","indexForMulti","getMultiOrSingleIndex","currFlag","valueForMulti","getValue","singleDirty","isClassBased_5","valueExists","multiDirty","setDirty","renderStyling","styleStore","classStore","multiStartIndex","getMultiStartIndex","getStyleSanitizer","valueToApply","isClassBased_6","getInitialValue","flag","setClass","prop","setStyle","styleSanitizer","sanitizer","store","DashCase","setProperty","className","add","addClass","isDirtyYes","adjustedIndex","startIndex","flagA","tmpFlag","flagB","getPointers","indexB","singleIndexA","getInitialIndex","_flag","singleIndexB","setFlag","pointers","indexA","setProp","getProp","insertNewMultiProperty","classBased","doShift","indexStartPosition","isDirty","isClassBased","isSanitizable","prepareInitialFlag","NG_HOST_SYMBOL","getRenderer","rendererFactory","contextViewData","directives","bindingRootIndex","enterView","newView","host","oldView","DIRECTIVES","FLAGS","bindingStartIndex","previousOrParentNode","isParent","creationOnly","checkNoChangesMode","viewCheckHooks","refreshDescendantViews","ACTIVE_INDEX","container_1","lViewNode","dynamicViewData","contentQueries","directiveDefIdx","refreshContentQueries","components","setHostBindings","bindings","BINDING_INDEX","hostBindingStartIndex","defs","dirIndex","executeInitAndContentHooks","createLViewData","instance","blueprint","CONTEXT","createLNodeObject","state","nodeInjector","createLNode","tParent","isState","tData","assertLessThan","createTNode","previousTNode","dynamicContainerNode","adjustBlueprintForNewNode","_isParent","_previousOrParentNode","template","rf","leaveView","nestingLevel","DECLARATION_VIEW","hostView","componentOrContext","templateFn","begin","namespaceHTML","hostBindings","componentRefresh","getRenderFlags","_currentNamespace","elementStart","localRefs","elementCreate","assertDataInRange","overriddenRenderer","rendererToUse","createElement","createDirectivesAndLocals","lNode","localRefExtractor","nativeNodeLocalRefExtractor","matches","valueIndex","resolveDirective","saveNameToExportMap","exportsMap","cacheMatchingDirectivesForNode","isContentQueryHost","currentQueries","count","tDirectives","localIndex","localNames","findDirectiveMatches","registry","throwMultipleComponentError","diPublic","CIRCULAR$1","directiveCreate","queueHostBindingForCheck","hostVars","exportAs","createTView","viewIndex","consts","vars","pipes","viewQuery","initialViewLength","fill","createViewBlueprint","HEADER_FILLER","contentCheckHooks","destroyHooks","pipeDestroyHooks","setUpAttributes","isProc","attrName","namespaceURI","attrVal","setAttributeNS","attrName_1","setAttribute","createRenderer","rNode","elementOrSelector","defaultRenderer","selectRootElement","querySelector","createError","hostElement","tag","getOrCreateTView","directiveDefs","pipeDefs","onPush","eventName","listenerFn","useCapture","wrappedListener","wrapListenerWithDirtyLogic","listen","storeCleanupFn","preventDefault","wrapListenerWithDirtyAndDefault","addEventListener","cleanupInstances","getCleanup","getTViewCleanup","outputs","generatePropertyAliases","storeCleanupWithContext","elementEnd","assertHasParent","NO_CHANGE","element_1","loadElement","removeAttribute","strValue","inputs","inputData","markDirtyIfOnPush","tViews","initialInputs","tNodeFlags","direction","propStore","isInput","directiveDef","propertyAliasMap","publicName","internalName","elementStyling","classDeclarations","styleDeclarations","stylingTemplate","stylesLookup","classesLookup","hasPassedDeclarations","initialStyleDeclarations","initialStylingValues","totalStyleDeclarations","initialClassDeclarations","totalProps","styleProps","classNames","maxLength","multiStart","indexForSingle","initialFlag","isClassBased_1","indexForInitial","createStylingContextTemplate","getStylingContext","stylingContext","load","lElement","templateStyleContext","applyAllClasses","ignoreAllClassUpdates","classes","cachedClassString","split","EMPTY_ARR","EMPTY_OBJ","styles","ctxIndex","propIndex","propLimit","isClassBased_2","classesStartIndex","newProp","adjustedPropIndex","newValue","initialValue","indexOfEntry","findEntryPositionByProp","flagToCompare","dirty","isClassBased_3","isClassBased_4","textNode","createTextNode","textBinding","existingNode","directive","baseDirectiveCreate","componentView","addToViewTree","getCurrentSanitizer","addComponentLogic","directiveIndex","initialInputData","minifiedInputName","attrValue","inputsToStore","generateInitialInputs","setInputsFromAttrs","assertPreviousIsParent","enumerable","assertDataNext","createLContainer","parentLNode","isForViewContainerRef","containerInternal","directiveRegistry","pipeRegistry","rendererCreateComment","comment","containerRefreshStart","containerRefreshEnd","nextIndex","embeddedViewStart","viewBlockId","containerNode","startIdx","viewAtPositionId","scanForView","containerTViews","getOrCreateEmbeddedTView","createView","embeddedViewEnd","adjustedElementIndex","projectionDef","componentNode","projection","noOfNodeBuckets","pData","tails","componentChild","bucketIndex","matchingSelectorIndex","nodeIndex","selectorIndex","grandparent","nodeToProject","currentComponentHost","projectedView","firstProjectedNode","adjustedHostIndex","TAIL","markViewDirty","rootContext","clean","_CLEAN_PROMISE","res_1","Promise","r","scheduler","tickRootContext","rootComponent","getRootView","component","_getComponentHostLElementNode","detectChanges","hostTView","updateViewQuery","interpolationV","different","content","interpolation2","prefix","v0","i0","v1","suffix","interpolation3","i1","v2","interpolation4","i2","v3","bindingUpdated4","interpolation5","i3","v4","bindingUpdated","interpolation6","i4","v5","bindingUpdated2","interpolation7","i5","v6","bindingUpdated3","interpolation8","i6","v7","getBinding","bindingIndex","isDifferent","oldValue","currValue","throwErrorIfNoChangesMode","exp3","exp4","registerContentQuery","queryList","savedContentQueriesLength","CONTENT_QUERIES","currentDirectiveIndex","tViewContentQueries","lElementNode","createRootContext","EMPTY$1","encapsulation","componentDefinition","ViewEncapsulation","Emulated","EMPTY_ARRAY$1","contentQueriesRefresh","attributes","invertObject","declaredInputs","ngOnInit","ngDoCheck","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnDestroy","changeDetection","ChangeDetectionStrategy","directiveTypes","extractDirectiveDef","pipeTypes","extractPipeDef","features","EMPTY_ARRAY","viewProviders","_renderCompCount","ngComponentDef","ngDirectiveDef","ngPipeDef","defineNgModule","bootstrap","declarations","imports","secondary","minifiedKey","declaredName","newLookup","defineBase","baseDefinition","definePipe","pipeDef","getClosureSafeProperty$1","fillProperties","InheritDefinitionFeature","definition","superDef","superType","baseDef","ngBaseDef","prevHostBindings_1","elementIndex","superHostBindings_1","isComponentDef","prevViewQuery_1","ctx","superViewQuery_1","prevContentQueries_1","superContentQueries_1","prevContentQueriesRefresh_1","queryIndex","superContentQueriesRefresh_1","onDestroy","features_1","feature","superPrototype","afterViewChecked","getPrototypeOf","NgOnChangesFeature","privateMinKey_1","PRIVATE_PREFIX","originalProperty","checkProto","proto","getter","setter_1","simpleChanges","writable","currentChange","currentValue","configurable","_loop_1","delegateHook","ngOnChanges","ElementRef$1","templateUrl","slotCount","animations","Important","noComponentFactoryError","error","ComponentFactoryResolver","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver$1","_parent","_ngModule","_factories","factories","CodegenComponentFactoryResolver","_super","ComponentFactoryBoundToModule","ngModule","_this","componentType","_appRef","_viewContainerRef","ViewRef","destroy","viewAttached","_view","getRendererFactory","checkNoChanges","attachToAppRef","RootViewRef","detectChangesInRootView","ComponentFactoryResolver$$1","nonMinified","minified","array","ROOT_CONTEXT","SCHEDULER","ComponentFactory","ComponentFactory$$1","componentDef","toRefArray","projectableNodes","rootSelectorOrNode","isInternalRootView","WRAP_RENDERER_FACTORY2","v","domRendererFactory3","locateHostElement","requestAnimationFrame","hostNode","elementNode","componentTag","initChangeDetectorIfExisting","projection$$1","nodeList","firstTNode","renderEmbeddedTemplate","ComponentRef","componentRef","ComponentRef$$1","viewEngine_ComponentFactory","destroyCbs","changeDetectorRef","_lViewNode","viewEngine_ComponentRef","parentInjector","bf0","bf1","bf2","bf3","bf4","bf5","bf6","bf7","cbf0","cbf1","cbf2","cbf3","cbf4","cbf5","cbf6","cbf7","templateRef","NG_ELEMENT_ID","nextNgElementId","bloomBit","b5","mask","injectAttribute","attrNameToInject","getOrCreateChangeDetectorRef","di","currentNode","getClosestComponentAncestor","hostInjector","existingRef","getOrCreateRenderer2","bloomHash","bloomHashBit","bloomFindPossibleInjector","nodeFlags","searchMatchesQueuedForCreation","sameHostView","formerInjector","getPreviousOrParentNode","INJECTOR$1","currentMatches","b6","startInjector","b7","ReadFromInjectorFn","elementRef","ElementRef$$1","getOrCreateContainerRef","getOrCreateElementRef","directiveIdx","getOrCreateTemplateRef","viewContainerRef","vcRefHost","hostParent","createComment","hostTNode","ViewContainerRef","ViewContainerRef$$1","viewEngine_TemplateRef","TemplateRef$1","_lInjector","ViewContainerRef$1","ChangeDetectorRef","Renderer2","_hostNode","_lContainerNode","getOrCreateNodeInjectorForNode","NodeInjector","parentLInjector","clear","_viewRefs","adjustedIdx","_adjustIndex","viewRef","componentFactory","ngModuleRef","contextInjector","NgModuleRef","insert","move","newIndex","shift","getFactoryOf","typeAny","ngInjectorDef","getInheritedFactory","TemplateRef$$1","_declarationParentView","_tView","_renderer","_queries","declarationView","queries","appendI18nNode","previousNode","_getViewData","NULL_INJECTOR$2","getNullInjector","createInjector","defType","additionalProviders","R3Injector","destroyed","deepForEach","processProvider","makeRecord","assertNotDestroyed","forEach","service","injectableDefInScope","injectableDefRecord","hydrate","EMPTY_ARRAY$2","parents","has","imported","processInjectorType","delete","isTypeProvider","NOT_YET","isValueProvider","isExistingProvider","isFactoryProvider","classRef_1","hasDeps","existing","multiRecord_1","CIRCULAR$2","isRootInjector","_bootstrapComponents","ngModuleDef","viewEngine_NgModuleRef","ngModuleType","COMPONENT_FACTORY_RESOLVER","NgModuleFactory","NgModuleRef$$1","callback","NgModuleFactory$$1","pureFunction0","slotOffset","pureFn","thisArg","pureFunction1","exp","pureFunction2","exp1","exp2","pureFunction3","pureFunction4","pureFunction5","exp5","getBindingRoot","pureFunction6","exp6","pureFunction7","exp7","pureFunction8","exp8","pureFunctionV","exps","getTView","getPipeDef","pipeName","pipeBind1","pipeBind3","pipeBind4","pipeBindV","EventEmitter","isAsync","emit","schedulerFn","err","completeFn","generatorOrNext","__isAsync","setTimeout","complete","Subscription","sink","subscribe","errorFn","rxjs","Subject","predicate","descend","read","deep","createQuery","shallowResults","deepResults","LQueries_","addNode","shallow","copyQueriesToContainer","query","containerValues","list","copyQueriesToView","insertView$1","removeView$1","viewValuesIdx","removed","matchingIdx","getIdxOfMatchingDirective","readFromNodeInjector","addMatch","previous","changes","_values","QueryList_","some","reset","item","unsubscribe","memoryIndex","QueryType","QueryList","track","queryRefresh","queryListImpl","_valuesTree","bypassSanitizationTrustString","trustedString","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","innerHTML","DOMParser","getInertBodyElement","getInertBodyElement_DOMParser","getInertBodyElement_XHR","html","xhr","XMLHttpRequest","responseType","open","send","parseFromString","templateEl","elAttrs","el","childNode","firstChild","Node","ELEMENT_NODE","stripCustomNsAttrs","DATA_URL_PATTERN","_sanitizeUrl","url","String","match","SAFE_URL_PATTERN","tagSet","tags","sets","sets_1","OPTIONAL_END_TAG_INLINE_ELEMENTS","BLOCK_ELEMENTS","merge$1","OPTIONAL_END_TAG_BLOCK_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","HTML_ATTRS","startElement","TEXT_NODE","chars","sanitizedSomething","endElement","checkClobberedElement","nodeName","toLowerCase","VALID_ELEMENTS","buf","elAttr","lower","VOID_ELEMENTS","SanitizingHtmlSerializer","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","replace","SURROGATE_PAIR_REGEXP","charCodeAt","NON_ALPHANUMERIC_REGEXP","inertBodyHelper","InertBodyHelper","unsafeHtml","unsafeHtmlInput","parsedHtml","mXSSAttempts","safeHtml","sanitizeChildren","getTemplateContent","isDevMode","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","_sanitizeStyle","trim","urlMatch","URL_RE","SAFE_STYLE_VALUE","outsideSingle","c","outsideDouble","hasBalancedQuotes","sanitizeHtml","sanitize","sanitizeStyle","unsafeStyle","sanitizeUrl","unsafeUrl","sanitizeResourceUrl","unsafeResourceUrl","angularCoreEnv","ɵdefineBase","ɵdefineComponent","r3.definePipe","ɵdefineDirective","r3.directiveInject","r3.getFactoryOf","defineInjector","ɵdefineNgModule","ɵdefinePipe","ɵdirectiveInject","directiveInject","ɵgetFactoryOf","ɵgetInheritedFactory","r3.injectTemplateRef","ɵinjectAttribute","ɵinjectChangeDetectorRef","r3.injectRenderer2","ɵinjectElementRef","injectElementRef","ɵinjectTemplateRef","r3.PublicFeature","ɵinjectViewContainerRef","injectViewContainerRef","ɵtemplateRefExtractor","r3.elementAttribute","ɵinjectRenderer2","injectRenderer2","ɵNgOnChangesFeature","ɵPublicFeature","r3.nextContext","ɵInheritDefinitionFeature","r3.containerRefreshStart","ɵelementAttribute","elementAttribute","ɵbind","ɵcontainer","ɵnextContext","nextContext","ɵcontainerRefreshStart","r3.namespaceMathML","ɵcontainerRefreshEnd","r3.namespaceSVG","ɵloadDirective","r3.elementStart","ɵloadQueryList","r3.elementEnd","ɵnamespaceHTML","r3.element","ɵnamespaceMathML","r3.elementContainerStart","ɵnamespaceSVG","r3.elementContainerEnd","ɵelementStart","ɵelementEnd","ɵelement","ɵEC","ɵeC","ɵpureFunction0","r3.pureFunction5","ɵpureFunction1","r3.pureFunction6","ɵpureFunction2","r3.pureFunction7","ɵpureFunction3","r3.pureFunction8","ɵpureFunction4","r3.pureFunctionV","ɵpureFunction5","ɵpureFunction6","r3.restoreView","ɵpureFunction7","ɵpureFunction8","ɵpureFunctionV","ɵgetCurrentView","r3.interpolation4","ɵrestoreView","restoreView","ɵinterpolation1","r3.interpolation6","ɵinterpolation2","r3.interpolation7","ɵinterpolation3","r3.interpolation8","ɵinterpolation4","r3.interpolationV","ɵinterpolation5","ɵinterpolation6","r3.listener","ɵinterpolation7","ɵinterpolation8","r3.projection","ɵinterpolationV","ɵelementClassProp","r3.pipeBind1","ɵlistener","ɵload","ɵprojection","r3.pipeBind4","ɵelementProperty","r3.pipeBindV","ɵpipeBind1","ɵpipeBind2","ɵpipeBind3","r3.query","ɵpipeBind4","ɵpipeBindV","ɵprojectionDef","r3.reference","ɵpipe","pipe","ɵquery","ɵqueryRefresh","ɵregisterContentQuery","r3.elementStylingApply","ɵreference","r3.template","ɵelementStyling","ɵelementStylingMap","r3.textBinding","ɵelementStylingProp","r3.embeddedViewStart","ɵelementStylingApply","r3.embeddedViewEnd","ɵtemplate","ɵtext","ɵtextBinding","ɵembeddedViewStart","ɵembeddedViewEnd","sanitization.sanitizeScript","ɵsanitizeHtml","sanitization.sanitizeUrl","ɵsanitizeStyle","unsafeScript","Type","Function","DELEGATE_CTOR","_reflect","reflect","_global","ReflectionCapabilities","paramTypes","paramAnnotations","_ownParameters","exec","typeStr","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","parentCtor","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","_zipTypesAndAnnotations","paramAnnotations_1","getParentCtor","_ownAnnotations","typeOrFunc","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","setter","resolveEnum","decoratorInvocations","annotationCls","decoratorInvocation","parentProto","ctor","dep","_angular_compiler","LiteralExpr","setTokenAndResolvedType","R3ResolvedDependencyType","resolved","TemplateRef","ElementRef","WrappedNodeExpr","Token","param","optional","skipSelf","Host","attributeName","Attribute","compileNgModuleDefs","moduleType","flatten$1","EMPTY_ARRAY$3","NG_MODULE_DEF","flatten","wrapReference","expandModuleWithProviders","compileR3NgModule","emitInline","jitExpression","expression","NG_INJECTOR_DEF","reflectDependencies","compileInjector","statements","patchComponentDefWithScope","transitiveScopes","from","compilation","dir","transitiveScopesFor","isNgModule","transitiveCompileScopes","scopes","exported","declared","importedTyped","importedScope","entry","exportedTyped","exportedScope","out","compileComponent","metadata","NG_COMPONENT_DEF","styleUrls","parseTemplate","constantPool","ConstantPool","preserveWhitespaces","errors","preStatements","ngSelectorScope","sourceMapUrl","compileDirectiveFromMetadata","directiveMetadata","makeBindingParser","parseHostBindings","listeners","properties","field","ann","hostPropertyName","isHostListener","outputsFromMetadata","parseInputOutputs","inputsFromType","bindingPropertyName","isOutput","outputsFromType","tslib_1.__assign","typeArgumentCount","__assign","inputsFromMetadata","lifecycle","usesOnChanges","reduce","isUseClassProvider","GET_PROPERTY_NAME","USE_VALUE$2","GET_PROPERTY_NAME$2","name_1","compilePipeFromMetadata","pure","srcMeta","NG_INJECTABLE_DEF","hasAProvider","isUseFactoryProvider","isUseValueProvider","isUseExistingProvider","ctorDeps","userDeps","convertDependencies","compileInjectable","declaration","NG_DIRECTIVE_DEF","NG_PIPE_DEF","injectableType","convertInjectableProviderToFactory","reflectionCapabilities","valueProvider_1","existingProvider_1","factoryProvider_1","classProvider_1","deps_2","deps_3","NG_BASE_DEF","inheritedBaseDef","initializeBaseDef","full","major","patch","defaultErrorLogger","console","ErrorHandler","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","_console","getOriginalError","constructResolvingPath","findFirstClosedCycle","reverse","errMsg","constructResolvingMessage","wrappedError","addKey","noAnnotationError","params","ii","parameter","signature","ReflectiveKey","_globalKeyRegistry","numberOfKeys","_allKeys","newKey","KeyRegistry","size","caps","Reflector","method","importUri","fromKey","ReflectiveDependency","resolvedFactories","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","factoryFn","resolvedDeps","reflector","_dependenciesFor","aliasInstance","constructDependencies","normalizedProvidersMap","ResolvedReflectiveProvider_","_normalizeProviders","_extractToken","_createDependency","paramMetadata","visibility","ReflectiveInjector_","_providers","_constructionCounter","len","keyIds","objs","resolveAndInstantiate","instantiateResolved","getProviderAtIndex","_new","_instantiateProvider","_instantiate","ResolvedReflectiveFactory$$1","originalException","_getByReflectiveDependency","injectionError","INJECTOR_KEY","_getByKeySelf","_getObjByKeyId","keyId","UNDEFINED","inj","inj_","_mapProviders","displayName","APP_INITIALIZER","ApplicationInitStatus","appInits","initialized","runInitializers","asyncInitPromises","resolve","initResult","isPromise","all","catch","reject","Injectable","APP_ID","PLATFORM_INITIALIZER","APP_BOOTSTRAP_LISTENER","warn","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","clearCacheFor","getModuleId","detectWTF","trace","wtf","events","hasPendingMicrotasks","onStable","assertZonePatched","zone","_nesting","_outer","_inner","fork","isAngularZone","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","invoke","hasTaskState","hasTask","change","microTask","checkStable","hasPendingMacrotasks","macroTask","onHandleError","handleError","scheduleEventTask","EMPTY_PAYLOAD","noop$1","runTask","noop","isStable","onMicrotaskEmpty","runOutsideAngular","NoopNgZone","_ngZone","run","taskTrackingZone","_watchAngularEvents","onUnstable","_didWork","_isZoneStable","NgZone","assertNotInAngularZone","_runCallbacksIfReady","Testability","increasePendingRequestCount","decreasePendingRequestCount","_pendingCount","_callbacks","cb","pop","clearTimeout","timeoutId","doneCb","getPendingTasks","filter","updateCb","pending_1","macroTasks","timeout","getPendingRequestCount","using","exactMatch","TestabilityRegistry","unregisterApplication","getTestability","elem","findInAncestors","NgProbeToken","createPlatform","_platform","ALLOW_MULTIPLE_PLATFORMS","PlatformRef","createPlatformFactory","parentPlatformFactory","marker","desc","extraProviders","getPlatform","injectedProviders","assertPlatform","requiredToken","platform","_injector","moduleFactory","ngZone","ngZoneOption","getNgZone","ngZoneInjector","moduleRef","exceptionHandler","remove","_modules","onError","errorHandler","initStatus","donePromise","_moduleDoBootstrap","compilerOptions","appRef","ApplicationRef","f","ngDoBootstrap","_destroyed","optionsReducer","dst","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_stable","componentTypes","tick","Observable","observer","assertInAngularZone","merge","unstableSub","ComponentFactory$1","componentOrFactory","selectorOrNode","compRef","_unloadComponent","testability","registerApplication","location","nativeElement","_loadComponent","_runningTick","_tickScope","_views","attachView","wtfCreateScope","Console","_results","flatten$2","flat","first","loadAndCompile","path","exportName","loadFactory","factoryClassSuffix","System","import","_config","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","checkNotEmpty","modulePath","ViewRef$1","__extends","EmbeddedViewRef","EventListener","DebugNode","nativeNode","_debugContext","DebugElement","references","providerTokens","addChild","childNodes","insertChildrenAfter","newChildren","siblingIndex","refChild","newChild","refIndex","triggerEventHandler","eventObj","DefaultIterableDifferFactory","DefaultIterableDiffer","trackByFn","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","nextRemove","addRemoveOffset","adjPreviousIndex","getPreviousIndex","moveOffsets","currentIndex","_nextRemoved","previousIndex","localCurrentIndex","localMovePreviousIndex","offset","diff","collection","check","index_1","_trackByFn","looseIdentical","trackById","itemTrackBy","mayBeDirty","_verifyReinsertion","_addIdentityChange","_next","nextRecord","_nextPrevious","_nextAdded","_removalsTail","previousRecord","_prev","_moveAfter","_reinsertAfter","reinsertRecord","_addToRemovals","_unlink","_nextMoved","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","_remove","toIndex","_identityChangesTail","_identityChangesHead","_nextIdentityChange","_head","_tail","_nextDup","_DuplicateItemRecordList","atOrAfterIndex","_prevDup","duplicates","moveOffset","isJsObject","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","_reset","_forEach","_getOrCreateRecordForKey","_insertBeforeOrAppend","previousValue","before","record_1","_maybeAddToChanges","KeyValueChangeRecord_","_nextChanged","_addToAdditions","_addToChanges","IterableDiffers","iterable","find","supports","KeyValueDiffers","kv","TRANSLATIONS_FORMAT","MissingTranslationStrategy","Warning","defaultIterableDiffers","_localeFactory","locale","_iterableDiffersFactory","_keyValueDiffersFactory","NgModule","APPLICATION_MODULE_PROVIDERS","shiftInitState","priorInitState","newInitState","initState","shouldCallLifecycleInitHook","initIndex","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","isFirstCheck","_tokenKeyCache","tokenKey","EMPTY_RENDERER_TYPE_ID","_renderCompCount$1","checkBinding","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","currView","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","markParentViewsForCheck","nodes","asElementData","handleEvent","declaredViewContainer","viewParentEl","matchedQueries","valueType","queryId","matchedQueryIds","filterQueryId","splitDepsDsl","sourceName","renderHost","componentRendererType","Native","renderElement","resolveDefinition","DEFINITION_CACHE","NOOP","visitRootRenderNodes","nextSibling","endIndex","nodeDef","visitRenderNode","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","childCount","projectedNodes","root","renderNode","bindingFlags","execRenderNodeAction","rn","embeddedViews","_embeddedViews","k","NS_PREFIX_RE","splitNamespace","calcBindingFlags","elDef","parentEl","getParentRenderElement","preserveContent","ns","name_2","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","elementEventFullName","output","listenTarget","listenerView","checkAndUpdateElementValue","elData","binding","renderNode$$1","securityContext","renderValue","setElementAttribute","setElementClass","unit","resolveNgModuleDep","depDef","former","InjectorRefTokenKey","tokenKey_1","INJECTORRefTokenKey$1","NgModuleRefTokenKey","_def","providersByKey","_createProviderInstance","providerInstance","providerDef","UNDEFINED_VALUE","_createProviderInstance$1","injectable","depValues","_createClass","_callFactory","attachEmbeddedView","elementData","viewContainerParent","addToArray","vcElementData","projectedViews","dvcElementData","_projectedViews","viewDef","parentNodeDef","attachProjectedView","detachEmbeddedView","removeFromArray","renderAttachEmbeddedView","prevView","prevRenderNode","arr","getComponentViewDefinitionFactory","viewDefFactory","ComponentFactory_","_inputs","_outputs","ngContentSelectors","inputsArr","templateName","outputsArr","componentNodeIndex","EMPTY_CONTEXT","asProviderData","tslib_1.__extends","VERSION","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","Injector_","createViewContainerData","ViewContainerRef_","_data","ref","attachToViewContainerRef","viewRef_","oldViewIndex","newViewIndex","dirtyParentQueries","renderDetachView","createChangeDetectorRef","fs","disposables","detachFromAppRef","vcRef","createTemplateData","TemplateRef_","_parentView","createInjector$1","createRendererV1","RendererAdapter","namespaceAndName","parentElement","createText","projectNodes","attachViewAfter","viewRootNodes","attributeValue","isAdd","styleName","styleValue","setText","animate","bootstrapComponents","NgModuleRef_","_moduleType","provDef","injectFlags","lifecycles","checkIndex","matchedQueriesDsl","splitMatchedQueriesDsl","depDefs","outputIndex","childFlags","directChildFlags","childMatchedQueries","createPipeInstance","createDirectiveInstance","outputObservable","subscription","eventHandlerClosure","createClass","allowPrivateServices","callFactory","tokenKey$$1","ChangeDetectorRefTokenKey","RendererV1TokenKey","findCompView","searchView","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","viewContainer","TemplateRefTokenKey","INJECTORRefTokenKey","allProviders","publicProviders","providerData","providerDef_1","isComponentView","unwrap","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","isEmbeddedView","tplDef","filterId","queryIds","asQueryList","checkAndUpdateQuery","directiveInstance","newValues","elementDef","calcQueryValues","notify","boundValue","bindingType","queryDef","embeddedView","dvc","queryValueType","appendNgContent","_pureExpressionDef","propertyNames","nonMinifiedName","nodeCount","lastRenderRootNode","parentEnd","anchorDef$$1","compRenderer","rendererType","outputCount","createViewNodes","compViewDef","nodeData","createProviderInstance","initView","execEmbeddedViewsAction","ViewAction","CheckNoChanges","updateRenderer","markProjectedViewsForCheck","updateDirectives","CheckAndUpdate","execQueriesAction","callInit","checkAndUpdateNode","argStyle","v8","v9","bindLen","changed","checkAndUpdateElementInline","_addInterpolationPart","checkAndUpdateTextInline","updateProp","checkAndUpdateDirectiveInline","asPureExpressionData","transform","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","i_1","checkNoChangesNode","checkNoChangesQuery","Destroy","asTextData","renderText","destroyViewNodes","CreateViewNodes","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","execComponentViewsAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","services","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","createProdRootView","prodCheckAndUpdateNode","RendererFactory2","Sanitizer","viewDef$$1","viewDefOverrides","hasOverrides","providerOverrides","hasDeprecatedOverrides","override","deprecatedBehavior","modules","comp","compFactory","applyProviderOverridesToView","elIndicesWithOverwrittenProviders","lastElementDef","elementIndicesWithOverwrittenProviders","elIndex","prodCheckNoChangesNode","callWithDebugContext","DebugAction","debugUpdateDirectives","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextDirectiveWithBinding","debugUpdateRenderer","nextRenderNodeWithBinding","givenValues","bindingValues","normalizeDebugBindingName","attr","CAMEL_CASE_REGEXP","m","normalizeDebugBindingValue","elView","elOrCompView","childDef","collectReferences","findHostElement","logError","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","oldAction","_currentAction","oldNodeIndex","_currentNodeIndex","_currentView","getCurrentDebugContext","DebugRendererFactory2","DebugRenderer2","renderData","whenRenderingDone","namespace","debugCtx","debugContext","debugEl","getDebugNode","debugChildEl","debugRefEl","oldChild","removeClass","style","NgModuleFactory_","_ngModuleDefFactory","initServicesIfNeeded","isRoot","Render3DebugRendererFactory2","element$$1","Render3DebugContext","matchedDirectives","urlMap","cachedResourceResolve","resp","resourceResolver","unwrapResponse","urlFetches","styleUrl","styleOffset","opts","hostFeatures","instructions","localPreviousNode","localParentNode","instruction","textRNode","resetComponentState","rendererRemoveNode","removedNode","translation","placeholders","staticText","i18nTagRegex","idx","b1","b2","translationParts","nbTemplates","templateRoots","maxIndex","tmplIndex","tmplInstructions","partIndex","phIndex","currentElements","templateRootIndex","openedTagCount","phVisited","currentExpressions","newTmplIndex","phKeys","ph","tmplElements","tmplExpressions","lastChildIndex","attachLViewDataToNode","findMatchingElement","parentContext","MONKEY_PATCH_KEY_NAME","moduleFactories","templateFactory","componentProvider","UNDEFINED_RENDERER_TYPE_ID","outputDefs","fixedAttrs","_b","bindingDefs","_c","namespaceAndName_1","suffixOrSecurityContext","_d","ns_1","_e","None","isFilled","resolveRendererType2","valueCount","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","_toStringWithNull","constAndInterp","APP_ROOT","propToIndex","nbKeys","globalBindingIdx","nodeIdx","currentElementHasPublicProviders","currentElementHasPrivateProviders","viewBindingCount","currentRenderParent","viewMatchedQueries","nodeMatchedQueries","isPrivateService","isComponent","newParent","isNgContainer","viewNodeFlags","rootNodeFlags","viewRootNodeFlags"],"mappings":"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","file":"/Users/ced-pro/Code/angular/angular/dist/packages-dist/core/bundles/core.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from './defs';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * #### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * #### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @template T\n */\nvar /**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * #### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * #### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @template T\n */\nInjectionToken = /** @class */ (function () {\n    function InjectionToken(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n        else {\n            /** @nocollapse */ this.ngInjectableDef = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    InjectionToken.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"InjectionToken \" + this._desc; };\n    return InjectionToken;\n}());\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * #### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * #### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @template T\n */\nexport { InjectionToken };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    InjectionToken.prototype.ngMetadataName;\n    /** @type {?} */\n    InjectionToken.prototype.ngInjectableDef;\n    /** @type {?} */\n    InjectionToken.prototype._desc;\n}\n/**\n * @record\n * @template T\n */\nexport function InjectableDefToken() { }\n/** @type {?} */\nInjectableDefToken.prototype.ngInjectableDef;\n//# sourceMappingURL=injection_token.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * \\@ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @record\n */\nexport function TypeDecorator() { }\n/** @type {?} */\nexport var ANNOTATIONS = '__annotations__';\n/** @type {?} */\nexport var PARAMETERS = '__parameters__';\n/** @type {?} */\nexport var PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n * @template T\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @param {?=} typeFn\n * @return {?}\n */\nexport function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function DecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call.apply(metaCtor, [this].concat(args));\n            return this;\n        }\n        /** @type {?} */\n        var annotationInstance = new ((_a = (/** @type {?} */ (DecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn.apply(void 0, [cls].concat(args));\n            /** @type {?} */\n            var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                (/** @type {?} */ (cls))[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (DecoratorFactory)).annotationCls = DecoratorFactory;\n    return /** @type {?} */ (DecoratorFactory);\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props) {\n    return function ctor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (props) {\n            /** @type {?} */\n            var values = props.apply(void 0, args);\n            for (var propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makeParamDecorator(name, props, parentClass) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function ParamDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        var annotationInstance = new ((_a = (/** @type {?} */ (ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        (/** @type {?} */ (ParamDecorator)).annotation = annotationInstance;\n        return ParamDecorator;\n        /**\n         * @param {?} cls\n         * @param {?} unusedKey\n         * @param {?} index\n         * @return {?}\n         */\n        function ParamDecorator(cls, unusedKey, index) {\n            /** @type {?} */\n            var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                (/** @type {?} */ (cls))[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @return {?}\n */\nexport function makePropDecorator(name, props, parentClass, additionalProcessing) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function PropDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        var decoratorInstance = new ((_a = (/** @type {?} */ (PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        /**\n         * @param {?} target\n         * @param {?} name\n         * @return {?}\n         */\n        function PropDecorator(target, name) {\n            /** @type {?} */\n            var constructor = target.constructor;\n            /** @type {?} */\n            var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                (/** @type {?} */ (constructor))[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing.apply(void 0, [target, name].concat(args));\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n//# sourceMappingURL=decorators.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ChangeDetectionStrategy = {\n    /**\n       * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n       * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n       * Change detection can still be explictly invoked.\n       */\n    OnPush: 0,\n    /**\n       * Use the default `CheckAlways` strategy, in which change detection is automatic until\n       * explicitly deactivated.\n       */\n    Default: 1,\n};\nexport { ChangeDetectionStrategy };\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nvar ChangeDetectorStatus = {\n    /**\n       * A state in which, after calling `detectChanges()`, the change detector\n       * state becomes `Checked`, and must be explicitly invoked or reactivated.\n       */\n    CheckOnce: 0,\n    /**\n       * A state in which change detection is skipped until the change detector mode\n       * becomes `CheckOnce`.\n       */\n    Checked: 1,\n    /**\n       * A state in which change detection continues automatically until explictly\n       * deactivated.\n       */\n    CheckAlways: 2,\n    /**\n       * A state in which a change detector sub tree is not a part of the main tree and\n       * should be skipped.\n       */\n    Detached: 3,\n    /**\n       * Indicates that the change detector encountered an error checking a binding\n       * or calling a directive lifecycle method and is now in an inconsistent state. Change\n       * detectors in this state do not detect changes.\n       */\n    Errored: 4,\n    /**\n       * Indicates that the change detector has been destroyed.\n       */\n    Destroyed: 5,\n};\nexport { ChangeDetectorStatus };\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n//# sourceMappingURL=constants.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar __window = typeof window !== 'undefined' && window;\n/** @type {?} */\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\n/** @type {?} */\nvar __global = typeof global !== 'undefined' && global;\n/** @type {?} */\nvar _global = __global || __window || __self;\n/** @type {?} */\nvar promise = Promise.resolve(0);\nexport { _global as global };\n/** @type {?} */\nvar _symbolIterator = null;\n/**\n * @return {?}\n */\nexport function getSymbolIterator() {\n    if (!_symbolIterator) {\n        /** @type {?} */\n        var Symbol_1 = _global['Symbol'];\n        if (Symbol_1 && Symbol_1.iterator) {\n            _symbolIterator = Symbol_1.iterator;\n        }\n        else {\n            /** @type {?} */\n            var keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                /** @type {?} */\n                var key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nexport function scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(function () { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    /** @type {?} */\n    var res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    /** @type {?} */\n    var newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\n/**\n * An interface that a function passed into {\\@link forwardRef} has to implement.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * \\@experimental\n * @record\n */\nexport function ForwardRefFn() { }\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@experimental\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn) {\n    (/** @type {?} */ (forwardRefFn)).__forward_ref__ = forwardRef;\n    (/** @type {?} */ (forwardRefFn)).toString = function () { return stringify(this()); };\n    return (/** @type {?} */ (/** @type {?} */ (forwardRefFn)));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@experimental\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type) {\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n        type.__forward_ref__ === forwardRef) {\n        return (/** @type {?} */ (type))();\n    }\n    else {\n        return type;\n    }\n}\n//# sourceMappingURL=forward_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { defineInjectable } from './defs';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/** @type {?} */\nexport var SOURCE = '__source';\n/** @type {?} */\nvar _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nexport var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/** *\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@experimental\n  @type {?} */\nexport var INJECTOR = new InjectionToken('INJECTOR');\nvar NullInjector = /** @class */ (function () {\n    function NullInjector() {\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    NullInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            throw new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n        }\n        return notFoundValue;\n    };\n    return NullInjector;\n}());\nexport { NullInjector };\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n *\n * @abstract\n */\nvar Injector = /** @class */ (function () {\n    function Injector() {\n    }\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     */\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    Injector.create = /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    };\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new NullInjector();\n    /** @nocollapse */ Injector.ngInjectableDef = defineInjectable({\n        providedIn: /** @type {?} */ ('any'),\n        factory: function () { return inject(INJECTOR); },\n    });\n    return Injector;\n}());\nexport { Injector };\nif (false) {\n    /** @type {?} */\n    Injector.THROW_IF_NOT_FOUND;\n    /** @type {?} */\n    Injector.NULL;\n    /** @type {?} */\n    Injector.ngInjectableDef;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     * @abstract\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?} The instance from the injector if defined, otherwise the `notFoundValue`.\n     */\n    Injector.prototype.get = function (token, notFoundValue, flags) { };\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue) { };\n}\n/** @type {?} */\nvar IDENT = function (value) {\n    return value;\n};\nvar ɵ0 = IDENT;\n/** @type {?} */\nvar EMPTY = /** @type {?} */ ([]);\n/** @type {?} */\nvar CIRCULAR = IDENT;\n/** @type {?} */\nvar MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nvar ɵ1 = MULTI_PROVIDER_FN;\n/** @type {?} */\nvar GET_PROPERTY_NAME = /** @type {?} */ ({});\n/** @type {?} */\nexport var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: GET_PROPERTY_NAME });\n/** @type {?} */\nvar NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nvar NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @enum {number} */\nvar OptionFlags = {\n    Optional: 1,\n    CheckSelf: 2,\n    CheckParent: 4,\n    Default: 6,\n};\n/** @type {?} */\nvar NULL_INJECTOR = Injector.NULL;\n/** @type {?} */\nvar NEW_LINE = /\\n/gm;\n/** @type {?} */\nvar NO_NEW_LINE = 'ɵ';\nvar StaticInjector = /** @class */ (function () {\n    function StaticInjector(providers, parent, source) {\n        if (parent === void 0) { parent = NULL_INJECTOR; }\n        if (source === void 0) { source = null; }\n        this.parent = parent;\n        this.source = source;\n        /** @type {?} */\n        var records = this._records = new Map();\n        records.set(Injector, /** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        records.set(INJECTOR, /** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    StaticInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (flags === void 0) { flags = 0 /* Default */; }\n        /** @type {?} */\n        var record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            /** @type {?} */\n            var tokenPath = e[NG_TEMP_TOKEN_PATH];\n            if (token[SOURCE]) {\n                tokenPath.unshift(token[SOURCE]);\n            }\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\n            e[NG_TOKEN_PATH] = tokenPath;\n            e[NG_TEMP_TOKEN_PATH] = null;\n            throw e;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    StaticInjector.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var tokens = /** @type {?} */ ([]);\n        /** @type {?} */\n        var records = this._records;\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n    };\n    return StaticInjector;\n}());\nexport { StaticInjector };\nif (false) {\n    /** @type {?} */\n    StaticInjector.prototype.parent;\n    /** @type {?} */\n    StaticInjector.prototype.source;\n    /** @type {?} */\n    StaticInjector.prototype._records;\n}\n/** @typedef {?} */\nvar SupportedProvider;\n/**\n * @record\n */\nfunction Record() { }\n/** @type {?} */\nRecord.prototype.fn;\n/** @type {?} */\nRecord.prototype.useNew;\n/** @type {?} */\nRecord.prototype.deps;\n/** @type {?} */\nRecord.prototype.value;\n/**\n * @record\n */\nfunction DependencyRecord() { }\n/** @type {?} */\nDependencyRecord.prototype.token;\n/** @type {?} */\nDependencyRecord.prototype.options;\n/** @typedef {?} */\nvar TokenPath;\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    /** @type {?} */\n    var deps = computeDeps(provider);\n    /** @type {?} */\n    var fn = IDENT;\n    /** @type {?} */\n    var value = EMPTY;\n    /** @type {?} */\n    var useNew = false;\n    /** @type {?} */\n    var provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = (/** @type {?} */ (provider)).useValue;\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        fn = (/** @type {?} */ (provider)).useFactory;\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        // Just use IDENT\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        useNew = true;\n        fn = resolveForwardRef((/** @type {?} */ (provider)).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (var i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            /** @type {?} */\n            var token = resolveForwardRef(provider.provide);\n            /** @type {?} */\n            var resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                /** @type {?} */\n                var multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = /** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    }));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n            }\n            /** @type {?} */\n            var record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        /** @type {?} */\n        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    var _a;\n    /** @type {?} */\n    var value;\n    if (record && !(flags & 4 /* SkipSelf */)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            /** @type {?} */\n            var obj = undefined;\n            /** @type {?} */\n            var useNew = record.useNew;\n            /** @type {?} */\n            var fn = record.fn;\n            /** @type {?} */\n            var depRecords = record.deps;\n            /** @type {?} */\n            var deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (var i = 0; i < depRecords.length; i++) {\n                    /** @type {?} */\n                    var depRecord = depRecords[i];\n                    /** @type {?} */\n                    var options = depRecord.options;\n                    /** @type {?} */\n                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, childRecord, records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, 0 /* Default */));\n                }\n            }\n            record.value = value = useNew ? new ((_a = (/** @type {?} */ (fn))).bind.apply(_a, [void 0].concat(deps)))() : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & 2 /* Self */)) {\n        value = parent.get(token, notFoundValue, 0 /* Default */);\n    }\n    return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    /** @type {?} */\n    var deps = EMPTY;\n    /** @type {?} */\n    var providerDeps = (/** @type {?} */ (provider)).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (var i = 0; i < providerDeps.length; i++) {\n            /** @type {?} */\n            var options = 6 /* Default */;\n            /** @type {?} */\n            var token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (var j = 0, annotations = token; j < annotations.length; j++) {\n                    /** @type {?} */\n                    var annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = (/** @type {?} */ (annotation)).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token: token, options: options });\n        }\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        /** @type {?} */\n        var token = resolveForwardRef((/** @type {?} */ (provider)).useExisting);\n        deps = [{ token: token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, source) {\n    if (source === void 0) { source = null; }\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    /** @type {?} */\n    var context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        /** @type {?} */\n        var parts = /** @type {?} */ ([]);\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                /** @type {?} */\n                var value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = \"{\" + parts.join(', ') + \"}\";\n    }\n    return \"StaticInjectorError\" + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj));\n}\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @return {?}\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (var key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === GET_PROPERTY_NAME) {\n            return key;\n        }\n    }\n    throw Error('!prop');\n}\n/** @enum {number} */\nvar InjectFlags = {\n    Default: 0,\n    /**\n       * Specifies that an injector should retrieve a dependency from any injector until reaching the\n       * host element of the current component. (Only used with Element Injector)\n       */\n    Host: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional: 8,\n};\nexport { InjectFlags };\n/** *\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n  @type {?} */\nvar _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nexport function setCurrentInjector(injector) {\n    /** @type {?} */\n    var former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function inject(token, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    if (_currentInjector === undefined) {\n        throw new Error(\"inject() must be called from an injection context\");\n    }\n    else if (_currentInjector === null) {\n        /** @type {?} */\n        var injectableDef = (/** @type {?} */ (token)).ngInjectableDef;\n        if (injectableDef && injectableDef.providedIn == 'root') {\n            return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                injectableDef.value;\n        }\n        if (flags & 8 /* Optional */)\n            return null;\n        throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n    }\n    else {\n        return _currentInjector.get(token, flags & 8 /* Optional */ ? null : undefined, flags);\n    }\n}\n/**\n * @param {?} types\n * @return {?}\n */\nexport function injectArgs(types) {\n    /** @type {?} */\n    var args = [];\n    for (var i = 0; i < types.length; i++) {\n        /** @type {?} */\n        var arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            /** @type {?} */\n            var type = undefined;\n            /** @type {?} */\n            var flags = 0 /* Default */;\n            for (var j = 0; j < arg.length; j++) {\n                /** @type {?} */\n                var meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= 8 /* Optional */;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= 4 /* SkipSelf */;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= 2 /* Self */;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject(/** @type {?} */ ((type)), flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\nexport { ɵ0, ɵ1 };\n//# sourceMappingURL=injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponnent{\n * }\n *\n * // Calling `renderComponent` will fail because `MyComponent`'s `\\@Compenent.templateUrl`\n * // needs to be resolved because `renderComponent` is synchronous process.\n * // renderComponent(MyComponent);\n *\n * // Calling `resolveComponentResources` will resolve `\\@Compenent.templateUrl` into\n * // `\\@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n * // Use browser's `fetch` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible to returning a `Promise` of the resolved\n * URL. Browser's `fetch` method is a good default implementation.\n * @return {?}\n */\nexport function resolveComponentResources(resourceResolver) {\n    /** @type {?} */\n    var urlFetches = [];\n    /** @type {?} */\n    var urlMap = new Map();\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function cachedResourceResolve(url) {\n        /** @type {?} */\n        var promise = urlMap.get(url);\n        if (!promise) {\n            /** @type {?} */\n            var resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n            urlFetches.push(promise);\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach(function (component) {\n        if (component.templateUrl) {\n            cachedResourceResolve(component.templateUrl).then(function (template) {\n                component.template = template;\n                component.templateUrl = undefined;\n            });\n        }\n        /** @type {?} */\n        var styleUrls = component.styleUrls;\n        /** @type {?} */\n        var styles = component.styles || (component.styles = []);\n        /** @type {?} */\n        var styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach(function (styleUrl, index) {\n            styles.push(''); // pre-allocate array.\n            cachedResourceResolve(styleUrl).then(function (style) {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            });\n        });\n    });\n    componentResourceResolutionQueue.clear();\n    return Promise.all(urlFetches).then(function () { return null; });\n}\n/** @type {?} */\nvar componentResourceResolutionQueue = new Set();\n/**\n * @param {?} metadata\n * @return {?}\n */\nexport function maybeQueueResolutionOfComponentResources(metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.add(metadata);\n    }\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function componentNeedsResolution(component) {\n    return component.templateUrl || component.styleUrls && component.styleUrls.length;\n}\n/**\n * @return {?}\n */\nexport function clearResolutionOfComponentResourcesQueue() {\n    componentResourceResolutionQueue.clear();\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\n//# sourceMappingURL=resource_loading.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ViewEncapsulation = {\n    /**\n       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n       * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n       * selectors.\n       *\n       * This is the default option.\n       */\n    Emulated: 0,\n    /**\n       * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n       * Use the native encapsulation mechanism of the renderer.\n       *\n       * For the DOM this means using the deprecated [Shadow DOM\n       * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       */\n    Native: 1,\n    /**\n       * Don't provide any template or style encapsulation.\n       */\n    None: 2,\n    /**\n       * Use Shadow DOM to encapsulate styles.\n       *\n       * For the DOM this means using modern [Shadow\n       * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       *\n       * ### Example\n       * {@example core/ts/metadata/encapsulation.ts region='longform'}\n       */\n    ShadowDom: 3,\n};\nexport { ViewEncapsulation };\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\n/**\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertNumber(actual, msg) {\n    if (typeof actual != 'number') {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertSame(actual, expected, msg) {\n    if (actual !== expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertNotDefined(actual, msg) {\n    if (actual != null) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nexport function assertComponentType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.'; }\n    if (!actual.ngComponentDef) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nexport function assertNgModuleType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.'; }\n    if (!actual.ngModuleDef) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} msg\n * @return {?}\n */\nfunction throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(\"ASSERTION ERROR: \" + msg);\n}\n//# sourceMappingURL=assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual } from './assert';\nimport { DIRECTIVES, FLAGS } from './interfaces/view';\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param {?} index The index of the directive in LViewData[DIRECTIVES]\n * @param {?} onInit\n * @param {?} doCheck\n * @param {?} tView The current TView\n * @return {?}\n */\nexport function queueInitHooks(index, onInit, doCheck, tView) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    if (onInit) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n    }\n    if (doCheck) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n    }\n}\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n * @param {?} flags\n * @param {?} tView\n * @return {?}\n */\nexport function queueLifecycleHooks(flags, tView) {\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        var start = flags >> 15 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var count = flags & 4095 /* DirectiveCountMask */;\n        /** @type {?} */\n        var end = start + count;\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ ((tView.directives))[i];\n            queueContentHooks(def, tView, i);\n            queueViewHooks(def, tView, i);\n            queueDestroyHooks(def, tView, i);\n        }\n    }\n}\n/**\n * Queues afterContentInit and afterContentChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueContentHooks(def, tView, i) {\n    if (def.afterContentInit) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n    }\n    if (def.afterContentChecked) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n    }\n}\n/**\n * Queues afterViewInit and afterViewChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueViewHooks(def, tView, i) {\n    if (def.afterViewInit) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n    }\n    if (def.afterViewChecked) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n    }\n}\n/**\n * Queues onDestroy hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueDestroyHooks(def, tView, i) {\n    if (def.onDestroy != null) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n    }\n}\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeInitHooks(currentView, tView, creationMode) {\n    if (currentView[FLAGS] & 16 /* RunInit */) {\n        executeHooks(/** @type {?} */ ((currentView[DIRECTIVES])), tView.initHooks, tView.checkHooks, creationMode);\n        currentView[FLAGS] &= ~16 /* RunInit */;\n    }\n}\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param {?} data\n * @param {?} allHooks\n * @param {?} checkHooks\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeHooks(data, allHooks, checkHooks, creationMode) {\n    /** @type {?} */\n    var hooksToCall = creationMode ? allHooks : checkHooks;\n    if (hooksToCall) {\n        callHooks(data, hooksToCall);\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * creation mode.\n *\n * @param {?} data\n * @param {?} arr The array in which the hooks are found\n * @return {?}\n */\nexport function callHooks(data, arr) {\n    for (var i = 0; i < arr.length; i += 2) {\n        (/** @type {?} */ (arr[i + 1])).call(data[/** @type {?} */ (arr[i])]);\n    }\n}\n//# sourceMappingURL=hooks.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar __global = typeof window != 'undefined' && window || typeof global != 'undefined' && global ||\n    typeof self != 'undefined' && self;\n/**\n * @return {?}\n */\nexport function ngDevModeResetPerfCounters() {\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for clousre.\n    return __global['ngDevMode'] = {\n        firstTemplatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererCreateComment: 0,\n    };\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for clousre.\n    __global['ngDevMode'] = ngDevModeResetPerfCounters();\n}\n//# sourceMappingURL=ng_dev_mode.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { HEADER_OFFSET } from './interfaces/view';\n/** @type {?} */\nexport var MONKEY_PATCH_KEY_NAME = '__ng_data__';\n/**\n * The internal element context which is specific to a given DOM node\n * @record\n */\nexport function ElementContext() { }\n/**\n * The component\\'s view data\n * @type {?}\n */\nElementContext.prototype.lViewData;\n/**\n * The index of the element within the view data array\n * @type {?}\n */\nElementContext.prototype.index;\n/**\n * The instance of the DOM node\n * @type {?}\n */\nElementContext.prototype.native;\n/**\n * Returns the matching `ElementContext` data for a given DOM node.\n *\n * This function will examine the provided DOM element's monkey-patched property to figure out the\n * associated index and view data (`LViewData`).\n *\n * If the monkey-patched value is the `LViewData` instance then the element context for that\n * element will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s monkey-patch value.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned).\n * @param {?} element\n * @return {?}\n */\nexport function getElementContext(element) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((/** @type {?} */ (element))[MONKEY_PATCH_KEY_NAME]);\n    if (context) {\n        if (Array.isArray(context)) {\n            /** @type {?} */\n            var lViewData = /** @type {?} */ (context);\n            /** @type {?} */\n            var index = findMatchingElement(element, lViewData);\n            context = { index: index, native: element, lViewData: lViewData };\n            attachLViewDataToNode(element, context);\n        }\n    }\n    else {\n        /** @type {?} */\n        var parent_1 = /** @type {?} */ (element);\n        while (parent_1 = parent_1.parentNode) {\n            /** @type {?} */\n            var parentContext = /** @type {?} */ ((/** @type {?} */ (parent_1))[MONKEY_PATCH_KEY_NAME]);\n            if (parentContext) {\n                /** @type {?} */\n                var lViewData = Array.isArray(parentContext) ? (/** @type {?} */ (parentContext)) : parentContext.lViewData;\n                /** @type {?} */\n                var index = findMatchingElement(element, lViewData);\n                if (index >= 0) {\n                    context = { index: index, native: element, lViewData: lViewData };\n                    attachLViewDataToNode(element, context);\n                    break;\n                }\n            }\n        }\n    }\n    return (/** @type {?} */ (context)) || null;\n}\n/**\n * Locates the element within the given LViewData and returns the matching index\n * @param {?} element\n * @param {?} lViewData\n * @return {?}\n */\nfunction findMatchingElement(element, lViewData) {\n    for (var i = HEADER_OFFSET; i < lViewData.length; i++) {\n        /** @type {?} */\n        var result = lViewData[i];\n        if (result) {\n            // special case for styling since when [class] and [style] bindings\n            // are used they will wrap the element into a StylingContext array\n            if (Array.isArray(result)) {\n                result = result[0 /* ElementPosition */];\n            }\n            if (result.native === element)\n                return i;\n        }\n    }\n    return -1;\n}\n/**\n * Assigns the given data to a DOM element using monkey-patching\n * @param {?} node\n * @param {?} data\n * @return {?}\n */\nexport function attachLViewDataToNode(node, data) {\n    node[MONKEY_PATCH_KEY_NAME] = data;\n}\n//# sourceMappingURL=element_discovery.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nexport { RendererStyleFlags3 };\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/** @typedef {?} */\nvar Renderer3;\nexport { Renderer3 };\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n *\n * @record\n */\nexport function ObjectOrientedRenderer3() { }\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createComment;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createElement;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createElementNS;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createTextNode;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.querySelector;\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nexport function isProceduralRenderer(renderer) {\n    return !!((/** @type {?} */ (renderer)).listen);\n}\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n * @record\n */\nexport function ProceduralRenderer3() { }\n/** @type {?} */\nProceduralRenderer3.prototype.destroy;\n/** @type {?} */\nProceduralRenderer3.prototype.createComment;\n/** @type {?} */\nProceduralRenderer3.prototype.createElement;\n/** @type {?} */\nProceduralRenderer3.prototype.createText;\n/**\n * This property is allowed to be null / undefined,\n * in which case the view engine won't call it.\n * This is used as a performance optimization for production mode.\n * @type {?|undefined}\n */\nProceduralRenderer3.prototype.destroyNode;\n/** @type {?} */\nProceduralRenderer3.prototype.appendChild;\n/** @type {?} */\nProceduralRenderer3.prototype.insertBefore;\n/** @type {?} */\nProceduralRenderer3.prototype.removeChild;\n/** @type {?} */\nProceduralRenderer3.prototype.selectRootElement;\n/** @type {?} */\nProceduralRenderer3.prototype.setAttribute;\n/** @type {?} */\nProceduralRenderer3.prototype.removeAttribute;\n/** @type {?} */\nProceduralRenderer3.prototype.addClass;\n/** @type {?} */\nProceduralRenderer3.prototype.removeClass;\n/** @type {?} */\nProceduralRenderer3.prototype.setStyle;\n/** @type {?} */\nProceduralRenderer3.prototype.removeStyle;\n/** @type {?} */\nProceduralRenderer3.prototype.setProperty;\n/** @type {?} */\nProceduralRenderer3.prototype.setValue;\n/** @type {?} */\nProceduralRenderer3.prototype.listen;\n/**\n * @record\n */\nexport function RendererFactory3() { }\n/** @type {?} */\nRendererFactory3.prototype.createRenderer;\n/** @type {?|undefined} */\nRendererFactory3.prototype.begin;\n/** @type {?|undefined} */\nRendererFactory3.prototype.end;\n/** @type {?} */\nexport var domRendererFactory3 = {\n    createRenderer: function (hostElement, rendererType) { return document; }\n};\n/**\n * Subset of API needed for appending elements and text nodes.\n * @record\n */\nexport function RNode() { }\n/** @type {?} */\nRNode.prototype.removeChild;\n/**\n * Insert a child node.\n *\n * Used exclusively for adding View root nodes into ViewAnchor location.\n * @type {?}\n */\nRNode.prototype.insertBefore;\n/**\n * Append a child node.\n *\n * Used exclusively for building up DOM which are static (ie not View roots)\n * @type {?}\n */\nRNode.prototype.appendChild;\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n * @record\n */\nexport function RElement() { }\n/** @type {?} */\nRElement.prototype.style;\n/** @type {?} */\nRElement.prototype.classList;\n/** @type {?} */\nRElement.prototype.className;\n/** @type {?} */\nRElement.prototype.setAttribute;\n/** @type {?} */\nRElement.prototype.removeAttribute;\n/** @type {?} */\nRElement.prototype.setAttributeNS;\n/** @type {?} */\nRElement.prototype.addEventListener;\n/** @type {?} */\nRElement.prototype.removeEventListener;\n/** @type {?|undefined} */\nRElement.prototype.setProperty;\n/**\n * @record\n */\nexport function RCssStyleDeclaration() { }\n/** @type {?} */\nRCssStyleDeclaration.prototype.removeProperty;\n/** @type {?} */\nRCssStyleDeclaration.prototype.setProperty;\n/**\n * @record\n */\nexport function RDomTokenList() { }\n/** @type {?} */\nRDomTokenList.prototype.add;\n/** @type {?} */\nRDomTokenList.prototype.remove;\n/**\n * @record\n */\nexport function RText() { }\n/** @type {?} */\nRText.prototype.textContent;\n/**\n * @record\n */\nexport function RComment() { }\n/** @type {?} */\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=renderer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined, assertEqual } from './assert';\n/**\n * @param {?} node\n * @param {?} type\n * @return {?}\n */\nexport function assertNodeType(node, type) {\n    assertDefined(node, 'should be called with a node');\n    assertEqual(node.tNode.type, type, \"should be a \" + typeName(type));\n}\n/**\n * @param {?} node\n * @param {...?} types\n * @return {?}\n */\nexport function assertNodeOfPossibleTypes(node) {\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        types[_i - 1] = arguments[_i];\n    }\n    assertDefined(node, 'should be called with a node');\n    /** @type {?} */\n    var found = types.some(function (type) { return node.tNode.type === type; });\n    assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', ') + \" but got \" + typeName(node.tNode.type));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    if (type == 4 /* ElementContainer */)\n        return 'ElementContainer';\n    return '<unknown>';\n}\n//# sourceMappingURL=node_assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getSymbolIterator, looseIdentical } from '../util';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a, b) {\n    /** @type {?} */\n    var isListLikeIterableA = isListLikeIterable(a);\n    /** @type {?} */\n    var isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        /** @type {?} */\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        /** @type {?} */\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nvar /**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nWrappedValue = /** @class */ (function () {\n    function WrappedValue(value) {\n        this.wrapped = value;\n    }\n    /** Creates a wrapped value. */\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.wrap = /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return new WrappedValue(value); };\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.unwrap = /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n    /** Returns true if `value` is a wrapped value. */\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.isWrapped = /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return value instanceof WrappedValue; };\n    return WrappedValue;\n}());\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nexport { WrappedValue };\nif (false) {\n    /**\n     * @deprecated from 5.3, use `unwrap()` instead - will switch to protected\n     * @type {?}\n     */\n    WrappedValue.prototype.wrapped;\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n */\nvar /**\n * Represents a basic change from a previous to a new value.\n *\n */\nSimpleChange = /** @class */ (function () {\n    function SimpleChange(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    SimpleChange.prototype.isFirstChange = /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    function () { return this.firstChange; };\n    return SimpleChange;\n}());\n/**\n * Represents a basic change from a previous to a new value.\n *\n */\nexport { SimpleChange };\nif (false) {\n    /** @type {?} */\n    SimpleChange.prototype.previousValue;\n    /** @type {?} */\n    SimpleChange.prototype.currentValue;\n    /** @type {?} */\n    SimpleChange.prototype.firstChange;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nexport function areIterablesEqual(a, b, comparator) {\n    /** @type {?} */\n    var iterator1 = a[getSymbolIterator()]();\n    /** @type {?} */\n    var iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        /** @type {?} */\n        var item1 = iterator1.next();\n        /** @type {?} */\n        var item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        /** @type {?} */\n        var iterator = obj[getSymbolIterator()]();\n        /** @type {?} */\n        var item = void 0;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nexport function isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n//# sourceMappingURL=change_detection_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { devModeEqual } from '../change_detection/change_detection_util';\nimport { assertLessThan } from './assert';\nimport { HEADER_OFFSET } from './interfaces/view';\n/**\n * Returns wether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @param {?} checkNoChangesMode\n * @return {?}\n */\nexport function isDifferent(a, b, checkNoChangesMode) {\n    if (ngDevMode && checkNoChangesMode) {\n        return !devModeEqual(a, b);\n    }\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function stringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    return '' + value;\n}\n/**\n *  Function that throws a \"not implemented\" error so it's clear certain\n *  behaviors/methods aren't yet ready.\n *\n * @return {?} Not implemented error\n */\nexport function notImplemented() {\n    return new Error('NotImplemented');\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nexport function flatten(list) {\n    /** @type {?} */\n    var result = [];\n    /** @type {?} */\n    var i = 0;\n    while (i < list.length) {\n        /** @type {?} */\n        var item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n/**\n * Retrieves a value from any `LViewData`.\n * @template T\n * @param {?} index\n * @param {?} arr\n * @return {?}\n */\nexport function loadInternal(index, arr) {\n    ngDevMode && assertDataInRangeInternal(index + HEADER_OFFSET, arr);\n    return arr[index + HEADER_OFFSET];\n}\n/**\n * @param {?} index\n * @param {?} arr\n * @return {?}\n */\nexport function assertDataInRangeInternal(index, arr) {\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n/**\n * Retrieves an element value from the provided `viewData`.\n *\n * Elements that are read may be wrapped in a style context,\n * therefore reading the value may involve unwrapping that.\n * @param {?} index\n * @param {?} arr\n * @return {?}\n */\nexport function loadElementInternal(index, arr) {\n    /** @type {?} */\n    var value = loadInternal(index, arr);\n    return readElementValue(value);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function readElementValue(value) {\n    return /** @type {?} */ ((Array.isArray(value) ? (/** @type {?} */ ((value)))[0] : value));\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined } from './assert';\nimport { attachLViewDataToNode } from './element_discovery';\nimport { callHooks } from './hooks';\nimport { RENDER_PARENT, VIEWS, unusedValueExportToPlacateAjd as unused1 } from './interfaces/container';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/projection';\nimport { isProceduralRenderer, unusedValueExportToPlacateAjd as unused4 } from './interfaces/renderer';\nimport { CLEANUP, CONTAINER_INDEX, DIRECTIVES, FLAGS, HEADER_OFFSET, HOST_NODE, NEXT, PARENT, QUERIES, RENDERER, TVIEW, unusedValueExportToPlacateAjd as unused5 } from './interfaces/view';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { readElementValue, stringify } from './util';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n/**\n * Retrieves the sibling node for the given node.\n * @param {?} node\n * @return {?}\n */\nexport function getNextLNode(node) {\n    // View nodes don't have TNodes, so their next must be retrieved through their LView.\n    if (node.tNode.type === 2 /* View */) {\n        /** @type {?} */\n        var viewData = /** @type {?} */ (node.data);\n        return viewData[NEXT] ? (/** @type {?} */ (viewData[NEXT]))[HOST_NODE] : null;\n    }\n    return node.tNode.next ? node.view[node.tNode.next.index] : null;\n}\n/**\n * Retrieves the first child of a given node\n * @param {?} node\n * @return {?}\n */\nexport function getChildLNode(node) {\n    if (node.tNode.child) {\n        /** @type {?} */\n        var viewData = node.tNode.type === 2 /* View */ ? /** @type {?} */ (node.data) : node.view;\n        return readElementValue(viewData[node.tNode.child.index]);\n    }\n    return null;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function getParentLNode(node) {\n    if (node.tNode.index === -1 && node.tNode.type === 2 /* View */) {\n        /** @type {?} */\n        var containerHostIndex = (/** @type {?} */ (node.data))[CONTAINER_INDEX];\n        return containerHostIndex === -1 ? null : node.view[containerHostIndex].dynamicLContainerNode;\n    }\n    /** @type {?} */\n    var parent = node.tNode.parent;\n    return readElementValue(parent ? node.view[parent.index] : node.view[HOST_NODE]);\n}\n/**\n * Retrieves render parent LElementNode for a given view.\n * Might be null if a view is not yet attatched to any container.\n * @param {?} viewNode\n * @return {?}\n */\nfunction getRenderParent(viewNode) {\n    /** @type {?} */\n    var container = getParentLNode(viewNode);\n    return container ? container.data[RENDER_PARENT] : null;\n}\n/** @enum {number} */\nvar WalkLNodeTreeAction = {\n    /** node insert in the native environment */\n    Insert: 0,\n    /** node detach from the native environment */\n    Detach: 1,\n    /** node destruction using the renderer's API */\n    Destroy: 2,\n};\n/** *\n * Stack used to keep track of projection nodes in walkLNodeTree.\n *\n * This is deliberately created outside of walkLNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n  @type {?} */\nvar projectionNodeStack = [];\n/**\n * Walks a tree of LNodes, applying a transformation on the LElement nodes, either only on the first\n * one found, or on all of them.\n *\n * @param {?} startingNode the node from which the walk is started.\n * @param {?} rootNode the root node considered. This prevents walking past that node.\n * @param {?} action identifies the action to be performed on the LElement nodes.\n * @param {?} renderer the current renderer.\n * @param {?=} renderParentNode Optional the render parent node to be set in all LContainerNodes found,\n * required for action modes Insert and Destroy.\n * @param {?=} beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n * @return {?}\n */\nfunction walkLNodeTree(startingNode, rootNode, action, renderer, renderParentNode, beforeNode) {\n    /** @type {?} */\n    var node = startingNode;\n    /** @type {?} */\n    var projectionNodeIndex = -1;\n    while (node) {\n        /** @type {?} */\n        var nextNode = null;\n        /** @type {?} */\n        var parent_1 = renderParentNode ? renderParentNode.native : null;\n        /** @type {?} */\n        var nodeType = node.tNode.type;\n        if (nodeType === 3 /* Element */) {\n            // Execute the action\n            executeNodeAction(action, renderer, parent_1, /** @type {?} */ ((node.native)), beforeNode);\n            if (node.dynamicLContainerNode) {\n                executeNodeAction(action, renderer, parent_1, /** @type {?} */ ((node.dynamicLContainerNode.native)), beforeNode);\n            }\n        }\n        else if (nodeType === 0 /* Container */) {\n            executeNodeAction(action, renderer, parent_1, /** @type {?} */ ((node.native)), beforeNode);\n            /** @type {?} */\n            var lContainerNode = (/** @type {?} */ (node));\n            /** @type {?} */\n            var childContainerData = lContainerNode.dynamicLContainerNode ?\n                lContainerNode.dynamicLContainerNode.data :\n                lContainerNode.data;\n            if (renderParentNode) {\n                childContainerData[RENDER_PARENT] = renderParentNode;\n            }\n            nextNode =\n                childContainerData[VIEWS].length ? getChildLNode(childContainerData[VIEWS][0]) : null;\n            if (nextNode) {\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainerNode.dynamicLContainerNode ?\n                    lContainerNode.dynamicLContainerNode.native :\n                    lContainerNode.native;\n            }\n        }\n        else if (nodeType === 1 /* Projection */) {\n            /** @type {?} */\n            var componentHost = findComponentHost(node.view);\n            /** @type {?} */\n            var head = (/** @type {?} */ (componentHost.tNode.projection))[/** @type {?} */ (node.tNode.projection)];\n            projectionNodeStack[++projectionNodeIndex] = /** @type {?} */ (node);\n            nextNode = head ? /** @type {?} */ (((/** @type {?} */ (componentHost.data))[PARENT]))[head.index] : null;\n        }\n        else {\n            // Otherwise look at the first child\n            nextNode = getChildLNode(/** @type {?} */ (node));\n        }\n        if (nextNode === null) {\n            nextNode = getNextLNode(node);\n            // this last node was projected, we need to get back down to its projection node\n            if (nextNode === null && (node.tNode.flags & 8192 /* isProjected */)) {\n                nextNode = getNextLNode(/** @type {?} */ (projectionNodeStack[projectionNodeIndex--]));\n            }\n            /**\n                   * Find the next node in the LNode tree, taking into account the place where a node is\n                   * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n                   *\n                   * If there is no sibling node, then it goes to the next sibling of the parent node...\n                   * until it reaches rootNode (at which point null is returned).\n                   */\n            while (node && !nextNode) {\n                node = getParentLNode(node);\n                if (node === null || node === rootNode)\n                    return null;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (!node.tNode.next && nodeType === 0 /* Container */) {\n                    beforeNode = node.native;\n                }\n                nextNode = getNextLNode(node);\n            }\n        }\n        node = nextNode;\n    }\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lViewData LViewData for which we want a host element node\n * @return {?} The host node\n */\nexport function findComponentHost(lViewData) {\n    /** @type {?} */\n    var viewRootLNode = lViewData[HOST_NODE];\n    while (viewRootLNode.tNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lViewData[PARENT], 'lViewData.parent');\n        lViewData = /** @type {?} */ ((lViewData[PARENT]));\n        viewRootLNode = lViewData[HOST_NODE];\n    }\n    ngDevMode && assertNodeType(viewRootLNode, 3 /* Element */);\n    ngDevMode && assertDefined(viewRootLNode.data, 'node.data');\n    return /** @type {?} */ (viewRootLNode);\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} node\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeNodeAction(action, renderer, parent, node, beforeNode) {\n    if (action === 0 /* Insert */) {\n        isProceduralRenderer(/** @type {?} */ ((renderer))) ?\n            (/** @type {?} */ (renderer)).insertBefore(/** @type {?} */ ((parent)), node, /** @type {?} */ (beforeNode)) : /** @type {?} */ ((parent)).insertBefore(node, /** @type {?} */ (beforeNode), true);\n    }\n    else if (action === 1 /* Detach */) {\n        isProceduralRenderer(/** @type {?} */ ((renderer))) ?\n            (/** @type {?} */ (renderer)).removeChild(/** @type {?} */ ((parent)), node) : /** @type {?} */ ((parent)).removeChild(node);\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++; /** @type {?} */\n        (((/** @type {?} */ (renderer)).destroyNode))(node);\n    }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nexport function createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(stringify(value)) :\n        renderer.createTextNode(stringify(value));\n}\n/**\n * @param {?} container\n * @param {?} rootNode\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nexport function addRemoveViewFromContainer(container, rootNode, insertMode, beforeNode) {\n    ngDevMode && assertNodeType(container, 0 /* Container */);\n    ngDevMode && assertNodeType(rootNode, 2 /* View */);\n    /** @type {?} */\n    var parentNode = container.data[RENDER_PARENT];\n    /** @type {?} */\n    var parent = parentNode ? parentNode.native : null;\n    if (parent) {\n        /** @type {?} */\n        var node = getChildLNode(rootNode);\n        /** @type {?} */\n        var renderer = container.view[RENDERER];\n        walkLNodeTree(node, rootNode, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, parentNode, beforeNode);\n    }\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nexport function destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    if (rootView[TVIEW].childIndex === -1) {\n        return cleanUpView(rootView);\n    }\n    /** @type {?} */\n    var viewOrContainer = getLViewChild(rootView);\n    while (viewOrContainer) {\n        /** @type {?} */\n        var next = null;\n        if (viewOrContainer.length >= HEADER_OFFSET) {\n            /** @type {?} */\n            var view = /** @type {?} */ (viewOrContainer);\n            if (view[TVIEW].childIndex > -1)\n                next = getLViewChild(view);\n        }\n        else {\n            /** @type {?} */\n            var container = /** @type {?} */ (viewOrContainer);\n            if (container[VIEWS].length)\n                next = container[VIEWS][0].data;\n        }\n        if (next == null) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (viewOrContainer && !/** @type {?} */ ((viewOrContainer))[NEXT] && viewOrContainer !== rootView) {\n                cleanUpView(viewOrContainer);\n                viewOrContainer = getParentState(viewOrContainer, rootView);\n            }\n            cleanUpView(viewOrContainer || rootView);\n            next = viewOrContainer && /** @type {?} */ ((viewOrContainer))[NEXT];\n        }\n        viewOrContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} container The container into which the view should be inserted\n * @param {?} viewNode The view to insert\n * @param {?} index The index at which to insert the view\n * @return {?} The inserted view\n */\nexport function insertView(container, viewNode, index) {\n    /** @type {?} */\n    var state = container.data;\n    /** @type {?} */\n    var views = state[VIEWS];\n    /** @type {?} */\n    var lView = /** @type {?} */ (viewNode.data);\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1].data[NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index].data;\n        views.splice(index, 0, viewNode);\n    }\n    else {\n        views.push(viewNode);\n        lView[NEXT] = null;\n    }\n    // Dynamically inserted views need a reference to their parent container'S host so it's\n    // possible to jump from a view to its container's next when walking the node tree.\n    if (viewNode.tNode.index === -1) {\n        lView[CONTAINER_INDEX] = /** @type {?} */ ((container.tNode.parent)).index;\n        (/** @type {?} */ (viewNode)).view = container.view;\n    }\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        /** @type {?} */ ((lView[QUERIES])).insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 8 /* Attached */;\n    return viewNode;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} container The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @return {?} The detached view\n */\nexport function detachView(container, removeIndex) {\n    /** @type {?} */\n    var views = container.data[VIEWS];\n    /** @type {?} */\n    var viewNode = views[removeIndex];\n    if (removeIndex > 0) {\n        views[removeIndex - 1].data[NEXT] = /** @type {?} */ (viewNode.data[NEXT]);\n    }\n    views.splice(removeIndex, 1);\n    if (!container.tNode.detached) {\n        addRemoveViewFromContainer(container, viewNode, false);\n    }\n    /** @type {?} */\n    var removedLView = viewNode.data;\n    if (removedLView[QUERIES]) {\n        /** @type {?} */ ((removedLView[QUERIES])).removeView();\n    }\n    removedLView[CONTAINER_INDEX] = -1;\n    (/** @type {?} */ (viewNode)).view = null;\n    // Unsets the attached flag\n    viewNode.data[FLAGS] &= ~8 /* Attached */;\n    return viewNode;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} container The container from which to remove a view\n * @param {?} removeIndex The index of the view to remove\n * @return {?} The removed view\n */\nexport function removeView(container, removeIndex) {\n    /** @type {?} */\n    var viewNode = container.data[VIEWS][removeIndex];\n    detachView(container, removeIndex);\n    destroyLView(viewNode.data);\n    return viewNode;\n}\n/**\n * Gets the child of the given LViewData\n * @param {?} viewData\n * @return {?}\n */\nexport function getLViewChild(viewData) {\n    if (viewData[TVIEW].childIndex === -1)\n        return null;\n    /** @type {?} */\n    var hostNode = viewData[viewData[TVIEW].childIndex];\n    return hostNode.data ? hostNode.data : (/** @type {?} */ (hostNode.dynamicLContainerNode)).data;\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} view The view to be destroyed.\n * @return {?}\n */\nexport function destroyLView(view) {\n    /** @type {?} */\n    var renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n        walkLNodeTree(view[HOST_NODE], view[HOST_NODE], 2 /* Destroy */, renderer);\n    }\n    destroyViewTree(view);\n    // Sets the destroyed flag\n    view[FLAGS] |= 32 /* Destroyed */;\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} state The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nexport function getParentState(state, rootView) {\n    /** @type {?} */\n    var node;\n    if ((node = /** @type {?} */ (((/** @type {?} */ (state))))[HOST_NODE]) && node.tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return /** @type {?} */ (((getParentLNode(node))).data);\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return state[PARENT] === rootView ? null : state[PARENT];\n    }\n}\n/**\n * Removes all listeners and call all onDestroys in a given view.\n *\n * @param {?} viewOrContainer\n * @return {?}\n */\nfunction cleanUpView(viewOrContainer) {\n    if ((/** @type {?} */ (viewOrContainer))[TVIEW]) {\n        /** @type {?} */\n        var view = /** @type {?} */ (viewOrContainer);\n        removeListeners(view);\n        executeOnDestroys(view);\n        executePipeOnDestroys(view);\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (view[TVIEW].id === -1 && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            (/** @type {?} */ (view[RENDERER])).destroy();\n        }\n    }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} viewData\n * @return {?}\n */\nfunction removeListeners(viewData) {\n    /** @type {?} */\n    var cleanup = /** @type {?} */ ((viewData[TVIEW].cleanup));\n    if (cleanup != null) {\n        for (var i = 0; i < cleanup.length - 1; i += 2) {\n            if (typeof cleanup[i] === 'string') {\n                /** @type {?} */\n                var native = readElementValue(viewData[cleanup[i + 1]]).native;\n                /** @type {?} */\n                var listener = /** @type {?} */ ((viewData[CLEANUP]))[cleanup[i + 2]];\n                native.removeEventListener(cleanup[i], listener, cleanup[i + 3]);\n                i += 2;\n            }\n            else if (typeof cleanup[i] === 'number') {\n                /** @type {?} */\n                var cleanupFn = /** @type {?} */ ((viewData[CLEANUP]))[cleanup[i]];\n                cleanupFn();\n            }\n            else {\n                /** @type {?} */\n                var context = /** @type {?} */ ((viewData[CLEANUP]))[cleanup[i + 1]];\n                cleanup[i].call(context);\n            }\n        }\n        viewData[CLEANUP] = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    /** @type {?} */\n    var tView = view[TVIEW];\n    /** @type {?} */\n    var destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        callHooks(/** @type {?} */ ((view[DIRECTIVES])), destroyHooks);\n    }\n}\n/**\n * Calls pipe destroy hooks for this view\n * @param {?} viewData\n * @return {?}\n */\nfunction executePipeOnDestroys(viewData) {\n    /** @type {?} */\n    var pipeDestroyHooks = viewData[TVIEW] && viewData[TVIEW].pipeDestroyHooks;\n    if (pipeDestroyHooks) {\n        callHooks(/** @type {?} */ ((viewData)), pipeDestroyHooks);\n    }\n}\n/**\n * @param {?} parent\n * @param {?} currentView\n * @return {?}\n */\nfunction canInsertNativeChildOfElement(parent, currentView) {\n    if (parent.view !== currentView) {\n        // If the Parent view is not the same as current view than we are inserting across\n        // Views. This happens when we insert a root element of the component view into\n        // the component host element and it should always be eager.\n        return true;\n    }\n    // Parent elements can be a component which may have projection.\n    if (parent.data === null) {\n        // Parent is a regular non-component element. We should eagerly insert into it\n        // since we know that this relationship will never be broken.\n        return true;\n    }\n    // Parent is a Component. Component's content nodes are not inserted immediately\n    // because they will be projected, and so doing insert at this point would be wasteful.\n    // Since the projection would than move it to its final destination.\n    return false;\n}\n/**\n * We might delay insertion of children for a given view if it is disconnected.\n * This might happen for 2 main reason:\n * - view is not inserted into any container (view was created but not iserted yet)\n * - view is inserted into a container but the container itself is not inserted into the DOM\n * (container might be part of projection or child of a view that is not inserted yet).\n *\n * In other words we can insert children of a given view this view was inserted into a container and\n * the container itself has it render parent determined.\n * @param {?} parent\n * @return {?}\n */\nfunction canInsertNativeChildOfView(parent) {\n    ngDevMode && assertNodeType(parent, 2 /* View */);\n    /** @type {?} */\n    var grandParentContainer = /** @type {?} */ (getParentLNode(parent));\n    if (grandParentContainer == null) {\n        // The `View` is not inserted into a `Container` we have to delay insertion.\n        return false;\n    }\n    ngDevMode && assertNodeType(grandParentContainer, 0 /* Container */);\n    if (grandParentContainer.data[RENDER_PARENT] == null) {\n        // The parent `Container` itself is disconnected. So we have to delay.\n        return false;\n    }\n    // The parent `Container` is in inserted state, so we can eagerly insert into\n    // this location.\n    return true;\n}\n/**\n * Returns whether a native element can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is mare for projection but has not been inserted\n *   into destination.\n *\n *\n * @param {?} parent The parent where the child will be inserted into.\n * @param {?} currentView Current LView being processed.\n * @return {?} boolean Whether the child should be inserted now (or delayed until later).\n */\nexport function canInsertNativeNode(parent, currentView) {\n    // We can only insert into a Component or View. Any other type should be an Error.\n    ngDevMode && assertNodeOfPossibleTypes(parent, 3 /* Element */, 4 /* ElementContainer */, 2 /* View */);\n    if (parent.tNode.type === 3 /* Element */) {\n        // Parent is a regular element or a component\n        return canInsertNativeChildOfElement(/** @type {?} */ (parent), currentView);\n    }\n    else if (parent.tNode.type === 4 /* ElementContainer */) {\n        /** @type {?} */\n        var grandParent = getParentLNode(parent);\n        while (grandParent !== null && grandParent.tNode.type === 4 /* ElementContainer */) {\n            grandParent = getParentLNode(grandParent);\n        }\n        if (grandParent === null) {\n            return false;\n        }\n        else if (grandParent.tNode.type === 3 /* Element */) {\n            return canInsertNativeChildOfElement(/** @type {?} */ (grandParent), currentView);\n        }\n        else {\n            return canInsertNativeChildOfView(/** @type {?} */ (grandParent));\n        }\n    }\n    else {\n        // Parent is a View.\n        return canInsertNativeChildOfView(/** @type {?} */ (parent));\n    }\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?} parent The parent to which to append the child\n * @param {?} child The child that should be appended\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nexport function appendChild(parent, child, currentView) {\n    if (child !== null && canInsertNativeNode(parent, currentView)) {\n        /** @type {?} */\n        var renderer = currentView[RENDERER];\n        if (parent.tNode.type === 2 /* View */) {\n            /** @type {?} */\n            var container = /** @type {?} */ (getParentLNode(parent));\n            /** @type {?} */\n            var renderParent = container.data[RENDER_PARENT];\n            /** @type {?} */\n            var views = container.data[VIEWS];\n            /** @type {?} */\n            var index = views.indexOf(/** @type {?} */ (parent));\n            /** @type {?} */\n            var beforeNode = index + 1 < views.length ? (/** @type {?} */ ((getChildLNode(views[index + 1])))).native : container.native;\n            nativeInsertBefore(renderer, /** @type {?} */ ((renderParent)).native, child, beforeNode);\n        }\n        else if (parent.tNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            var beforeNode = parent.native;\n            /** @type {?} */\n            var grandParent = getParentLNode(/** @type {?} */ (parent));\n            while (grandParent.tNode.type === 4 /* ElementContainer */) {\n                grandParent = getParentLNode(/** @type {?} */ (grandParent));\n            }\n            if (grandParent.tNode.type === 2 /* View */) {\n                /** @type {?} */\n                var renderParent = getRenderParent(/** @type {?} */ (grandParent));\n                nativeInsertBefore(renderer, /** @type {?} */ ((renderParent)).native, child, beforeNode);\n            }\n            else {\n                nativeInsertBefore(renderer, (/** @type {?} */ (grandParent)).native, child, beforeNode);\n            }\n        }\n        else {\n            isProceduralRenderer(renderer) ? renderer.appendChild(/** @type {?} */ (((parent.native))), child) : /** @type {?} */ ((parent.native)).appendChild(child);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Removes the `child` element of the `parent` from the DOM.\n *\n * @param {?} parent The parent from which to remove the child\n * @param {?} child The child that should be removed\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was removed\n */\nexport function removeChild(parent, child, currentView) {\n    if (child !== null && canInsertNativeNode(parent, currentView)) {\n        /** @type {?} */\n        var renderer = currentView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.removeChild(/** @type {?} */ (parent.native), child) : /** @type {?} */ ((parent.native)).removeChild(child);\n        return true;\n    }\n    return false;\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} node The node to process\n * @param {?} currentParent The last parent element to be processed\n * @param {?} currentView Current LView\n * @param {?} renderParent\n * @param {?} parentView\n * @return {?}\n */\nexport function appendProjectedNode(node, currentParent, currentView, renderParent, parentView) {\n    appendChild(currentParent, node.native, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachLViewDataToNode(node.native, parentView);\n    if (node.tNode.type === 0 /* Container */) {\n        /** @type {?} */\n        var lContainer = (/** @type {?} */ (node)).data;\n        lContainer[RENDER_PARENT] = renderParent;\n        /** @type {?} */\n        var views = lContainer[VIEWS];\n        for (var i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(/** @type {?} */ (node), views[i], true, node.native);\n        }\n    }\n    else if (node.tNode.type === 4 /* ElementContainer */) {\n        /** @type {?} */\n        var ngContainerChild = getChildLNode(/** @type {?} */ (node));\n        /** @type {?} */\n        var parentView_1 = currentView[HOST_NODE].view;\n        while (ngContainerChild) {\n            appendProjectedNode(/** @type {?} */ (ngContainerChild), currentParent, currentView, renderParent, parentView_1);\n            ngContainerChild = getNextLNode(ngContainerChild);\n        }\n    }\n    if (node.dynamicLContainerNode) {\n        node.dynamicLContainerNode.data[RENDER_PARENT] = renderParent;\n        appendChild(currentParent, node.dynamicLContainerNode.native, currentView);\n    }\n}\n//# sourceMappingURL=node_manipulation.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { assertDefined, assertNotEqual } from './assert';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/node';\nimport { NG_PROJECT_AS_ATTR_NAME, unusedValueExportToPlacateAjd as unused2 } from './interfaces/projection';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2;\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    /** @type {?} */\n    var nodeClassesLen = nodeClassAttrVal.length;\n    /** @type {?} */\n    var matchIndex = /** @type {?} */ ((nodeClassAttrVal)).indexOf(cssClassToMatch);\n    /** @type {?} */\n    var matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && /** @type {?} */ ((nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && /** @type {?} */ ((nodeClassAttrVal))[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector\n * @return {?} true if node matches the selector.\n */\nexport function isNodeMatchingSelector(tNode, selector) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    /** @type {?} */\n    var mode = 4 /* ELEMENT */;\n    /** @type {?} */\n    var nodeAttrs = /** @type {?} */ ((tNode.attrs));\n    /** @type {?} */\n    var selectOnlyMarkerIdx = nodeAttrs ? nodeAttrs.indexOf(1 /* SelectOnly */) : -1;\n    /** @type {?} */\n    var skipToNextSelector = false;\n    for (var i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        var current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(/** @type {?} */ (current))) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = (/** @type {?} */ (current)) | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && current !== tNode.tagName) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            /** @type {?} */\n            var attrName = mode & 8 /* CLASS */ ? 'class' : current;\n            /** @type {?} */\n            var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            /** @type {?} */\n            var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            if (selectorAttrValue !== '') {\n                /** @type {?} */\n                var nodeAttrValue = void 0;\n                /** @type {?} */\n                var maybeAttrName = nodeAttrs[attrIndexInNode];\n                if (selectOnlyMarkerIdx > -1 && attrIndexInNode > selectOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(maybeAttrName, 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = /** @type {?} */ (nodeAttrs[attrIndexInNode + 1]);\n                }\n                if (mode & 8 /* CLASS */ &&\n                    !isCssClassMatching(/** @type {?} */ (nodeAttrValue), /** @type {?} */ (selectorAttrValue)) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\n/**\n * Examines an attributes definition array from a node to find the index of the\n * attribute with the specified name.\n *\n * NOTE: Will not find namespaced attributes.\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs) {\n    if (attrs === null)\n        return -1;\n    /** @type {?} */\n    var selectOnlyMode = false;\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var maybeAttrName = attrs[i];\n        if (maybeAttrName === name) {\n            return i;\n        }\n        else if (maybeAttrName === 0 /* NamespaceURI */) {\n            // NOTE(benlesh): will not find namespaced attributes. This is by design.\n            i += 4;\n        }\n        else {\n            if (maybeAttrName === 1 /* SelectOnly */) {\n                selectOnlyMode = true;\n            }\n            i += selectOnlyMode ? 1 : 2;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @return {?}\n */\nexport function isNodeMatchingSelectorList(tNode, selector) {\n    for (var i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function getProjectAsAttrValue(tNode) {\n    /** @type {?} */\n    var nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        /** @type {?} */\n        var ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return /** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]);\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n * @param {?} tNode\n * @param {?} selectors\n * @param {?} textSelectors\n * @return {?}\n */\nexport function matchingSelectorIndex(tNode, selectors, textSelectors) {\n    /** @type {?} */\n    var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (var i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null && isNodeMatchingSelectorList(tNode, selectors[i])) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\n//# sourceMappingURL=node_selector_matcher.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RendererStyleFlags3, isProceduralRenderer } from './interfaces/renderer';\n/**\n * The styling context acts as a styling manifest (shaped as an array) for determining which\n * styling properties have been assigned via the provided `updateStylingMap`, `updateStyleProp`\n * and `updateClassProp` functions. There are also two initialization functions\n * `allocStylingContext` and `createStylingContextTemplate` which are used to initialize\n * and/or clone the context.\n *\n * The context is an array where the first two cells are used for static data (initial styling)\n * and dirty flags / index offsets). The remaining set of cells is used for multi (map) and single\n * (prop) style values.\n *\n * each value from here onwards is mapped as so:\n * [i] = mutation/type flag for the style/class value\n * [i + 1] = prop string (or null incase it has been removed)\n * [i + 2] = value string (or null incase it has been removed)\n *\n * There are three types of styling types stored in this context:\n *   initial: any styles that are passed in once the context is created\n *            (these are stored in the first cell of the array and the first\n *             value of this array is always `null` even if no initial styling exists.\n *             the `null` value is there so that any new styles have a parent to point\n *             to. This way we can always assume that there is a parent.)\n *\n *   single: any styles that are updated using `updateStyleProp` or `updateClassProp` (fixed set)\n *\n *   multi: any styles that are updated using `updateStylingMap` (dynamic set)\n *\n * Note that context is only used to collect style information. Only when `renderStyling`\n * is called is when the styling payload will be rendered (or built as a key/value map).\n *\n * When the context is created, depending on what initial styling values are passed in, the\n * context itself will be pre-filled with slots based on the initial style properties. Say\n * for example we have a series of initial styles that look like so:\n *\n *   style=\"width:100px; height:200px;\"\n *   class=\"foo\"\n *\n * Then the initial state of the context (once initialized) will look like so:\n *\n * ```\n * context = [\n *   element,\n *   styleSanitizer | null,\n *   [null, '100px', '200px', true],  // property names are not needed since they have already been\n * written to DOM.\n *\n *   configMasterVal,\n *   1, // this instructs how many `style` values there are so that class index values can be\n * offsetted\n *   'last class string applied',\n *\n *   // 6\n *   'width',\n *   pointers(1, 15);  // Point to static `width`: `100px` and multi `width`.\n *   null,\n *\n *   // 9\n *   'height',\n *   pointers(2, 18); // Point to static `height`: `200px` and multi `height`.\n *   null,\n *\n *   // 12\n *   'foo',\n *   pointers(1, 21);  // Point to static `foo`: `true` and multi `foo`.\n *   null,\n *\n *   // 15\n *   'width',\n *   pointers(1, 6);  // Point to static `width`: `100px` and single `width`.\n *   null,\n *\n *   // 18\n *   'height',\n *   pointers(2, 9);  // Point to static `height`: `200px` and single `height`.\n *   null,\n *\n *   // 21\n *   'foo',\n *   pointers(3, 12);  // Point to static `foo`: `true` and single `foo`.\n *   null,\n * ]\n *\n * function pointers(staticIndex: number, dynamicIndex: number) {\n *   // combine the two indices into a single word.\n *   return (staticIndex << StylingFlags.BitCountSize) |\n *     (dynamicIndex << (StylingIndex.BitCountSize + StylingFlags.BitCountSize));\n * }\n * ```\n *\n * The values are duplicated so that space is set aside for both multi ([style] and [class])\n * and single ([style.prop] or [class.named]) values. The respective config values\n * (configValA, configValB, etc...) are a combination of the StylingFlags with two index\n * values: the `initialIndex` (which points to the index location of the style value in\n * the initial styles array in slot 0) and the `dynamicIndex` (which points to the\n * matching single/multi index position in the context array for the same prop).\n *\n * This means that every time `updateStyleProp` or `updateClassProp` are called then they\n * must be called using an index value (not a property string) which references the index\n * value of the initial style prop/class when the context was created. This also means that\n * `updateStyleProp` or `updateClassProp` cannot be called with a new property (only\n * `updateStylingMap` can include new CSS properties that will be added to the context).\n * @record\n */\nexport function StylingContext() { }\n/**\n * The initial styles is populated whether or not there are any initial styles passed into\n * the context during allocation. The 0th value must be null so that index values of `0` within\n * the context flags can always point to a null value safely when nothing is set.\n *\n * All other entries in this array are of `string` value and correspond to the values that\n * were extracted from the `style=\"\"` attribute in the HTML code for the provided template.\n * @record\n */\nexport function InitialStyles() { }\n/** @enum {number} */\nvar StylingFlags = {\n    // Implies no configurations\n    None: 0,\n    // Whether or not the entry or context itself is dirty\n    Dirty: 1,\n    // Whether or not this is a class-based assignment\n    Class: 2,\n    // Whether or not a sanitizer was applied to this property\n    Sanitize: 4,\n    // The max amount of bits used to represent these configuration values\n    BitCountSize: 3,\n    // There are only three bits here\n    BitMask: 7,\n};\nexport { StylingFlags };\n/** @enum {number} */\nvar StylingIndex = {\n    // Position of where the initial styles are stored in the styling context\n    ElementPosition: 0,\n    // Position of where the style sanitizer is stored within the styling context\n    StyleSanitizerPosition: 1,\n    // Position of where the initial styles are stored in the styling context\n    InitialStylesPosition: 2,\n    // Index of location where the start of single properties are stored. (`updateStyleProp`)\n    MasterFlagPosition: 3,\n    // Index of location where the class index offset value is located\n    ClassOffsetPosition: 4,\n    // Position of where the last string-based CSS class value was stored\n    CachedCssClassString: 5,\n    // Location of single (prop) value entries are stored within the context\n    SingleStylesStartPosition: 6,\n    // Multi and single entries are stored in `StylingContext` as: Flag; PropertyName;  PropertyValue\n    FlagsOffset: 0,\n    PropertyOffset: 1,\n    ValueOffset: 2,\n    // Size of each multi or single entry (flag + prop + value)\n    Size: 3,\n    // Each flag has a binary digit length of this value\n    BitCountSize: 14,\n    // (32 - 3) / 2 = ~14\n    // The binary digit value as a mask\n    BitMask: 16383 // 14 bits\n    ,\n};\nexport { StylingIndex };\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n * @param {?} lElement\n * @param {?} templateStyleContext\n * @return {?}\n */\nexport function allocStylingContext(lElement, templateStyleContext) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((templateStyleContext.slice()));\n    context[0 /* ElementPosition */] = lElement;\n    return context;\n}\n/**\n * Creates a styling context template where styling information is stored.\n * Any styles that are later referenced using `updateStyleProp` must be\n * passed in within this function. Initial values for those styles are to\n * be declared after all initial style properties are declared (this change in\n * mode between declarations and initial styles is made possible using a special\n * enum value found in `definition.ts`).\n *\n * @param {?=} initialClassDeclarations a list of class declarations and initial class values\n *    that are used later within the styling context.\n *\n *    -> ['foo', 'bar', SPECIAL_ENUM_VAL, 'foo', true]\n *       This implies that `foo` and `bar` will be later styled and that the `foo`\n *       class will be applied to the element as an initial class since it's true\n * @param {?=} initialStyleDeclarations a list of style declarations and initial style values\n *    that are used later within the styling context.\n *\n *    -> ['width', 'height', SPECIAL_ENUM_VAL, 'width', '100px']\n *       This implies that `width` and `height` will be later styled and that the `width`\n *       property has an initial value of `100px`.\n *\n * @param {?=} styleSanitizer\n * @return {?}\n */\nexport function createStylingContextTemplate(initialClassDeclarations, initialStyleDeclarations, styleSanitizer) {\n    /** @type {?} */\n    var initialStylingValues = [null];\n    /** @type {?} */\n    var context = [null, styleSanitizer || null, initialStylingValues, 0, 0, null];\n    /** @type {?} */\n    var stylesLookup = {};\n    /** @type {?} */\n    var classesLookup = {};\n    /** @type {?} */\n    var totalStyleDeclarations = 0;\n    if (initialStyleDeclarations) {\n        /** @type {?} */\n        var hasPassedDeclarations = false;\n        for (var i = 0; i < initialStyleDeclarations.length; i++) {\n            /** @type {?} */\n            var v = /** @type {?} */ (initialStyleDeclarations[i]);\n            // this flag value marks where the declarations end the initial values begin\n            if (v === 1 /* VALUES_MODE */) {\n                hasPassedDeclarations = true;\n            }\n            else {\n                /** @type {?} */\n                var prop = /** @type {?} */ (v);\n                if (hasPassedDeclarations) {\n                    /** @type {?} */\n                    var value = /** @type {?} */ (initialStyleDeclarations[++i]);\n                    initialStylingValues.push(value);\n                    stylesLookup[prop] = initialStylingValues.length - 1;\n                }\n                else {\n                    totalStyleDeclarations++;\n                    stylesLookup[prop] = 0;\n                }\n            }\n        }\n    }\n    // make where the class offsets begin\n    context[4 /* ClassOffsetPosition */] = totalStyleDeclarations;\n    if (initialClassDeclarations) {\n        /** @type {?} */\n        var hasPassedDeclarations = false;\n        for (var i = 0; i < initialClassDeclarations.length; i++) {\n            /** @type {?} */\n            var v = /** @type {?} */ (initialClassDeclarations[i]);\n            // this flag value marks where the declarations end the initial values begin\n            if (v === 1 /* VALUES_MODE */) {\n                hasPassedDeclarations = true;\n            }\n            else {\n                /** @type {?} */\n                var className = /** @type {?} */ (v);\n                if (hasPassedDeclarations) {\n                    /** @type {?} */\n                    var value = /** @type {?} */ (initialClassDeclarations[++i]);\n                    initialStylingValues.push(value);\n                    classesLookup[className] = initialStylingValues.length - 1;\n                }\n                else {\n                    classesLookup[className] = 0;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    var styleProps = Object.keys(stylesLookup);\n    /** @type {?} */\n    var classNames = Object.keys(classesLookup);\n    /** @type {?} */\n    var classNamesIndexStart = styleProps.length;\n    /** @type {?} */\n    var totalProps = styleProps.length + classNames.length;\n    /** @type {?} */\n    var maxLength = totalProps * 3 /* Size */ * 2 + 6 /* SingleStylesStartPosition */;\n    // we need to fill the array from the start so that we can access\n    // both the multi and the single array positions in the same loop block\n    for (var i = 6 /* SingleStylesStartPosition */; i < maxLength; i++) {\n        context.push(null);\n    }\n    /** @type {?} */\n    var singleStart = 6 /* SingleStylesStartPosition */;\n    /** @type {?} */\n    var multiStart = totalProps * 3 /* Size */ + 6 /* SingleStylesStartPosition */;\n    // fill single and multi-level styles\n    for (var i = 0; i < totalProps; i++) {\n        /** @type {?} */\n        var isClassBased_1 = i >= classNamesIndexStart;\n        /** @type {?} */\n        var prop = isClassBased_1 ? classNames[i - classNamesIndexStart] : styleProps[i];\n        /** @type {?} */\n        var indexForInitial = isClassBased_1 ? classesLookup[prop] : stylesLookup[prop];\n        /** @type {?} */\n        var initialValue = initialStylingValues[indexForInitial];\n        /** @type {?} */\n        var indexForMulti = i * 3 /* Size */ + multiStart;\n        /** @type {?} */\n        var indexForSingle = i * 3 /* Size */ + singleStart;\n        /** @type {?} */\n        var initialFlag = prepareInitialFlag(prop, isClassBased_1, styleSanitizer || null);\n        setFlag(context, indexForSingle, pointers(initialFlag, indexForInitial, indexForMulti));\n        setProp(context, indexForSingle, prop);\n        setValue(context, indexForSingle, null);\n        /** @type {?} */\n        var flagForMulti = initialFlag | (initialValue !== null ? 1 /* Dirty */ : 0 /* None */);\n        setFlag(context, indexForMulti, pointers(flagForMulti, indexForInitial, indexForSingle));\n        setProp(context, indexForMulti, prop);\n        setValue(context, indexForMulti, null);\n    }\n    // there is no initial value flag for the master index since it doesn't\n    // reference an initial style value\n    setFlag(context, 3 /* MasterFlagPosition */, pointers(0, 0, multiStart));\n    setContextDirty(context, initialStylingValues.length > 1);\n    return context;\n}\n/** @type {?} */\nvar EMPTY_ARR = [];\n/** @type {?} */\nvar EMPTY_OBJ = {};\n/**\n * Sets and resolves all `multi` styling on an `StylingContext` so that they can be\n * applied to the element once `renderStyling` is called.\n *\n * All missing styles/class (any values that are not provided in the new `styles`\n * or `classes` params) will resolve to `null` within their respective positions\n * in the context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style values.\n * @param {?} classes The key/value map of CSS class names that will be used for the update.\n * @param {?=} styles The key/value map of CSS styles that will be used for the update.\n * @return {?}\n */\nexport function updateStylingMap(context, classes, styles) {\n    /** @type {?} */\n    var classNames = EMPTY_ARR;\n    /** @type {?} */\n    var applyAllClasses = false;\n    /** @type {?} */\n    var ignoreAllClassUpdates = false;\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (typeof classes == 'string') {\n        /** @type {?} */\n        var cachedClassString = /** @type {?} */ (context[5 /* CachedCssClassString */]);\n        if (cachedClassString && cachedClassString === classes) {\n            ignoreAllClassUpdates = true;\n        }\n        else {\n            context[5 /* CachedCssClassString */] = classes;\n            classNames = classes.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n    }\n    else {\n        classNames = classes ? Object.keys(classes) : EMPTY_ARR;\n        context[5 /* CachedCssClassString */] = null;\n    }\n    classes = /** @type {?} */ ((classes || EMPTY_OBJ));\n    /** @type {?} */\n    var styleProps = styles ? Object.keys(styles) : EMPTY_ARR;\n    styles = styles || EMPTY_OBJ;\n    /** @type {?} */\n    var classesStartIndex = styleProps.length;\n    /** @type {?} */\n    var multiStartIndex = getMultiStartIndex(context);\n    /** @type {?} */\n    var dirty = false;\n    /** @type {?} */\n    var ctxIndex = multiStartIndex;\n    /** @type {?} */\n    var propIndex = 0;\n    /** @type {?} */\n    var propLimit = styleProps.length + classNames.length;\n    // the main loop here will try and figure out how the shape of the provided\n    // styles differ with respect to the context. Later if the context/styles/classes\n    // are off-balance then they will be dealt in another loop after this one\n    while (ctxIndex < context.length && propIndex < propLimit) {\n        /** @type {?} */\n        var isClassBased_2 = propIndex >= classesStartIndex;\n        // when there is a cache-hit for a string-based class then we should\n        // avoid doing any work diffing any of the changes\n        if (!ignoreAllClassUpdates || !isClassBased_2) {\n            /** @type {?} */\n            var adjustedPropIndex = isClassBased_2 ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            var newProp = isClassBased_2 ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            var newValue = isClassBased_2 ? (applyAllClasses ? true : classes[newProp]) : styles[newProp];\n            /** @type {?} */\n            var prop = getProp(context, ctxIndex);\n            if (prop === newProp) {\n                /** @type {?} */\n                var value = getValue(context, ctxIndex);\n                /** @type {?} */\n                var flag = getPointers(context, ctxIndex);\n                if (hasValueChanged(flag, value, newValue)) {\n                    setValue(context, ctxIndex, newValue);\n                    /** @type {?} */\n                    var initialValue = getInitialValue(context, flag);\n                    // there is no point in setting this to dirty if the previously\n                    // rendered value was being referenced by the initial style (or null)\n                    if (initialValue !== newValue) {\n                        setDirty(context, ctxIndex, true);\n                        dirty = true;\n                    }\n                }\n            }\n            else {\n                /** @type {?} */\n                var indexOfEntry = findEntryPositionByProp(context, newProp, ctxIndex);\n                if (indexOfEntry > 0) {\n                    /** @type {?} */\n                    var valueToCompare = getValue(context, indexOfEntry);\n                    /** @type {?} */\n                    var flagToCompare = getPointers(context, indexOfEntry);\n                    swapMultiContextEntries(context, ctxIndex, indexOfEntry);\n                    if (valueToCompare !== newValue) {\n                        /** @type {?} */\n                        var initialValue = getInitialValue(context, flagToCompare);\n                        setValue(context, ctxIndex, newValue);\n                        if (initialValue !== newValue) {\n                            setDirty(context, ctxIndex, true);\n                            dirty = true;\n                        }\n                    }\n                }\n                else {\n                    /** @type {?} */\n                    var newFlag = prepareInitialFlag(newProp, isClassBased_2, getStyleSanitizer(context));\n                    insertNewMultiProperty(context, ctxIndex, isClassBased_2, newProp, newFlag, newValue);\n                    dirty = true;\n                }\n            }\n        }\n        ctxIndex += 3 /* Size */;\n        propIndex++;\n    }\n    // this means that there are left-over values in the context that\n    // were not included in the provided styles/classes and in this\n    // case the  goal is to \"remove\" them from the context (by nullifying)\n    while (ctxIndex < context.length) {\n        /** @type {?} */\n        var flag = getPointers(context, ctxIndex);\n        /** @type {?} */\n        var isClassBased_3 = (flag & 2 /* Class */) === 2 /* Class */;\n        if (ignoreAllClassUpdates && isClassBased_3)\n            break;\n        /** @type {?} */\n        var value = getValue(context, ctxIndex);\n        /** @type {?} */\n        var doRemoveValue = valueExists(value, isClassBased_3);\n        if (doRemoveValue) {\n            setDirty(context, ctxIndex, true);\n            setValue(context, ctxIndex, null);\n            dirty = true;\n        }\n        ctxIndex += 3 /* Size */;\n    }\n    /** @type {?} */\n    var sanitizer = getStyleSanitizer(context);\n    while (propIndex < propLimit) {\n        /** @type {?} */\n        var isClassBased_4 = propIndex >= classesStartIndex;\n        if (ignoreAllClassUpdates && isClassBased_4)\n            break;\n        /** @type {?} */\n        var adjustedPropIndex = isClassBased_4 ? propIndex - classesStartIndex : propIndex;\n        /** @type {?} */\n        var prop = isClassBased_4 ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n        /** @type {?} */\n        var value = isClassBased_4 ? (applyAllClasses ? true : classes[prop]) : styles[prop];\n        /** @type {?} */\n        var flag = prepareInitialFlag(prop, isClassBased_4, sanitizer) | 1 /* Dirty */;\n        context.push(flag, prop, value);\n        propIndex++;\n        dirty = true;\n    }\n    if (dirty) {\n        setContextDirty(context, true);\n    }\n}\n/**\n * Sets and resolves a single styling property/value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style value.\n * @param {?} index The index of the property which is being updated.\n * @param {?} value The CSS style value that will be assigned\n * @return {?}\n */\nexport function updateStyleProp(context, index, value) {\n    /** @type {?} */\n    var singleIndex = 6 /* SingleStylesStartPosition */ + index * 3 /* Size */;\n    /** @type {?} */\n    var currValue = getValue(context, singleIndex);\n    /** @type {?} */\n    var currFlag = getPointers(context, singleIndex);\n    // didn't change ... nothing to make a note of\n    if (hasValueChanged(currFlag, currValue, value)) {\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value);\n        /** @type {?} */\n        var indexForMulti = getMultiOrSingleIndex(currFlag);\n        /** @type {?} */\n        var valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || valueForMulti !== value) {\n            /** @type {?} */\n            var multiDirty = false;\n            /** @type {?} */\n            var singleDirty = true;\n            /** @type {?} */\n            var isClassBased_5 = (currFlag & 2 /* Class */) === 2 /* Class */;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value, isClassBased_5) && valueExists(valueForMulti, isClassBased_5)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setContextDirty(context, true);\n        }\n    }\n}\n/**\n * This method will toggle the referenced CSS class (by the provided index)\n * within the given context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided class value.\n * @param {?} index The index of the CSS class which is being updated.\n * @param {?} addOrRemove Whether or not to add or remove the CSS class\n * @return {?}\n */\nexport function updateClassProp(context, index, addOrRemove) {\n    /** @type {?} */\n    var adjustedIndex = index + context[4 /* ClassOffsetPosition */];\n    updateStyleProp(context, adjustedIndex, addOrRemove);\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param {?} context The styling context that will be used to determine\n *      what styles will be rendered\n * @param {?} renderer the renderer that will be used to apply the styling\n * @param {?=} styleStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} classStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @return {?}\n */\nexport function renderStyling(context, renderer, styleStore, classStore) {\n    if (isContextDirty(context)) {\n        /** @type {?} */\n        var native = /** @type {?} */ ((context[0 /* ElementPosition */])).native;\n        /** @type {?} */\n        var multiStartIndex = getMultiStartIndex(context);\n        /** @type {?} */\n        var styleSanitizer = getStyleSanitizer(context);\n        for (var i = 6 /* SingleStylesStartPosition */; i < context.length; i += 3 /* Size */) {\n            // there is no point in rendering styles that have not changed on screen\n            if (isDirty(context, i)) {\n                /** @type {?} */\n                var prop = getProp(context, i);\n                /** @type {?} */\n                var value = getValue(context, i);\n                /** @type {?} */\n                var flag = getPointers(context, i);\n                /** @type {?} */\n                var isClassBased_6 = flag & 2 /* Class */ ? true : false;\n                /** @type {?} */\n                var isInSingleRegion = i < multiStartIndex;\n                /** @type {?} */\n                var valueToApply = value;\n                // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                // this check implies that a single value was removed and we\n                // should now defer to a multi value and use that (if set).\n                if (isInSingleRegion && !valueExists(valueToApply, isClassBased_6)) {\n                    /** @type {?} */\n                    var multiIndex = getMultiOrSingleIndex(flag);\n                    valueToApply = getValue(context, multiIndex);\n                }\n                // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                // the initial value will always be a string or null,\n                // therefore we can safely adopt it incase there's nothing else\n                // note that this should always be a falsy check since `false` is used\n                // for both class and style comparisons (styles can't be false and false\n                // classes are turned off and should therefore defer to their initial values)\n                if (!valueExists(valueToApply, isClassBased_6)) {\n                    valueToApply = getInitialValue(context, flag);\n                }\n                if (isClassBased_6) {\n                    setClass(native, prop, valueToApply ? true : false, renderer, classStore);\n                }\n                else {\n                    /** @type {?} */\n                    var sanitizer = (flag & 4 /* Sanitize */) ? styleSanitizer : null;\n                    setStyle(native, prop, /** @type {?} */ (valueToApply), renderer, sanitizer, styleStore);\n                }\n                setDirty(context, i, false);\n            }\n        }\n        setContextDirty(context, false);\n    }\n}\n/**\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} prop the CSS style property that will be rendered\n * @param {?} value the CSS style value that will be rendered\n * @param {?} renderer\n * @param {?} sanitizer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @return {?}\n */\nfunction setStyle(native, prop, value, renderer, sanitizer, store) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store) {\n        store[prop] = value;\n    }\n    else if (value) {\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native['style'].setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native['style'].removeProperty(prop);\n    }\n}\n/**\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} className\n * @param {?} add\n * @param {?} renderer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @return {?}\n */\nfunction setClass(native, className, add, renderer, store) {\n    if (store) {\n        store[className] = add;\n    }\n    else if (add) {\n        ngDevMode && ngDevMode.rendererAddClass++;\n        isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n            native['classList'].add(className);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveClass++;\n        isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n            native['classList'].remove(className);\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setDirty(context, index, isDirtyYes) {\n    /** @type {?} */\n    var adjustedIndex = index >= 6 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        (/** @type {?} */ (context[adjustedIndex])) |= 1 /* Dirty */;\n    }\n    else {\n        (/** @type {?} */ (context[adjustedIndex])) &= ~1 /* Dirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isDirty(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 6 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 1 /* Dirty */) == 1 /* Dirty */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isClassBased(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 6 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 2 /* Class */) == 2 /* Class */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizable(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 6 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\n/**\n * @param {?} configFlag\n * @param {?} staticIndex\n * @param {?} dynamicIndex\n * @return {?}\n */\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 7 /* BitMask */) | (staticIndex << 3 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 3 /* BitCountSize */));\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialValue(context, flag) {\n    /** @type {?} */\n    var index = getInitialIndex(flag);\n    return /** @type {?} */ (context[2 /* InitialStylesPosition */][index]);\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialIndex(flag) {\n    return (flag >> 3 /* BitCountSize */) & 16383 /* BitMask */;\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getMultiOrSingleIndex(flag) {\n    /** @type {?} */\n    var index = (flag >> (14 /* BitCountSize */ + 3 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 6 /* SingleStylesStartPosition */ ? index : -1;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStartIndex(context) {\n    return /** @type {?} */ (getMultiOrSingleIndex(context[3 /* MasterFlagPosition */]));\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getStyleSanitizer(context) {\n    return context[1 /* StyleSanitizerPosition */];\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @return {?}\n */\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} flag\n * @return {?}\n */\nfunction setFlag(context, index, flag) {\n    /** @type {?} */\n    var adjustedIndex = index === 3 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPointers(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index === 3 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return /** @type {?} */ (context[adjustedIndex]);\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getValue(context, index) {\n    return /** @type {?} */ (context[index + 2 /* ValueOffset */]);\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getProp(context, index) {\n    return /** @type {?} */ (context[index + 1 /* PropertyOffset */]);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nexport function isContextDirty(context) {\n    return isDirty(context, 3 /* MasterFlagPosition */);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nexport function setContextDirty(context, isDirtyYes) {\n    setDirty(context, 3 /* MasterFlagPosition */, isDirtyYes);\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?=} startIndex\n * @return {?}\n */\nfunction findEntryPositionByProp(context, prop, startIndex) {\n    for (var i = (startIndex || 0) + 1 /* PropertyOffset */; i < context.length; i += 3 /* Size */) {\n        /** @type {?} */\n        var thisProp = context[i];\n        if (thisProp == prop) {\n            return i - 1 /* PropertyOffset */;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} context\n * @param {?} indexA\n * @param {?} indexB\n * @return {?}\n */\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    /** @type {?} */\n    var tmpValue = getValue(context, indexA);\n    /** @type {?} */\n    var tmpProp = getProp(context, indexA);\n    /** @type {?} */\n    var tmpFlag = getPointers(context, indexA);\n    /** @type {?} */\n    var flagA = tmpFlag;\n    /** @type {?} */\n    var flagB = getPointers(context, indexB);\n    /** @type {?} */\n    var singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        /** @type {?} */\n        var _flag = getPointers(context, singleIndexA);\n        /** @type {?} */\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    /** @type {?} */\n    var singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        /** @type {?} */\n        var _flag = getPointers(context, singleIndexB);\n        /** @type {?} */\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n}\n/**\n * @param {?} context\n * @param {?} indexStartPosition\n * @return {?}\n */\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (var i = indexStartPosition; i < context.length; i += 3 /* Size */) {\n        /** @type {?} */\n        var multiFlag = getPointers(context, i);\n        /** @type {?} */\n        var singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            /** @type {?} */\n            var singleFlag = getPointers(context, singleIndex);\n            /** @type {?} */\n            var initialIndexForSingle = getInitialIndex(singleFlag);\n            /** @type {?} */\n            var flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBased(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            /** @type {?} */\n            var updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} classBased\n * @param {?} name\n * @param {?} flag\n * @param {?} value\n * @return {?}\n */\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value) {\n    /** @type {?} */\n    var doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 3 /* Size */);\n    }\n}\n/**\n * @param {?} value\n * @param {?=} isClassBased\n * @return {?}\n */\nfunction valueExists(value, isClassBased) {\n    if (isClassBased) {\n        return value ? true : false;\n    }\n    return value !== null;\n}\n/**\n * @param {?} name\n * @param {?} isClassBased\n * @param {?=} sanitizer\n * @return {?}\n */\nfunction prepareInitialFlag(name, isClassBased, sanitizer) {\n    if (isClassBased) {\n        return 2 /* Class */;\n    }\n    else if (sanitizer && sanitizer(name)) {\n        return 4 /* Sanitize */;\n    }\n    return 0 /* None */;\n}\n/**\n * @param {?} flag\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(flag, a, b) {\n    /** @type {?} */\n    var isClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    var hasValues = a && b;\n    /** @type {?} */\n    var usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return (/** @type {?} */ (a)).toString() !== (/** @type {?} */ (b)).toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\n//# sourceMappingURL=styling.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { assertDefined, assertEqual, assertLessThan, assertNotEqual } from './assert';\nimport { attachLViewDataToNode } from './element_discovery';\nimport { throwCyclicDependencyError, throwErrorIfNoChangesMode, throwMultipleComponentError } from './errors';\nimport { executeHooks, executeInitHooks, queueInitHooks, queueLifecycleHooks } from './hooks';\nimport { ACTIVE_INDEX, RENDER_PARENT, VIEWS } from './interfaces/container';\nimport { NG_PROJECT_AS_ATTR_NAME } from './interfaces/projection';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { BINDING_INDEX, CLEANUP, CONTAINER_INDEX, CONTENT_QUERIES, CONTEXT, DECLARATION_VIEW, DIRECTIVES, FLAGS, HEADER_OFFSET, HOST_NODE, INJECTOR, NEXT, PARENT, QUERIES, RENDERER, SANITIZER, TAIL, TVIEW } from './interfaces/view';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { appendChild, appendProjectedNode, canInsertNativeNode, createTextNode, findComponentHost, getLViewChild, getParentLNode, insertView, removeView } from './node_manipulation';\nimport { isNodeMatchingSelectorList, matchingSelectorIndex } from './node_selector_matcher';\nimport { allocStylingContext, createStylingContextTemplate, renderStyling as renderElementStyles, updateClassProp as updateElementClassProp, updateStyleProp as updateElementStyleProp, updateStylingMap } from './styling';\nimport { assertDataInRangeInternal, isDifferent, loadElementInternal, loadInternal, stringify } from './util';\n/** *\n * Directive (D) sets a property on all component instances using this constant as a key and the\n * component's host node (LElement) as the value. This is used in methods like detectChanges to\n * facilitate jumping from an instance to the host node.\n  @type {?} */\nexport var NG_HOST_SYMBOL = '__ngHostLNode__';\n/** *\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n  @type {?} */\nvar _CLEAN_PROMISE = Promise.resolve(null);\n/** @typedef {?} */\nvar SanitizerFn;\nexport { SanitizerFn };\n/** *\n * TView.data needs to fill the same number of slots as the LViewData header\n * so the indices of nodes are consistent between LViewData and TView.data.\n *\n * It's much faster to keep a blueprint of the pre-filled array and slice it\n * than it is to create a new array and fill it each time a TView is created.\n  @type {?} */\nvar HEADER_FILLER = new Array(HEADER_OFFSET).fill(null);\n/** *\n * Token set in currentMatches while dependencies are being resolved.\n *\n * If we visit a directive that has a value set to CIRCULAR, we know we've\n * already seen it, and thus have a circular dependency.\n  @type {?} */\nexport var CIRCULAR = '__CIRCULAR__';\n/** *\n * This property gets set before entering a template.\n *\n * This renderer can be one of two varieties of Renderer3:\n *\n * - ObjectedOrientedRenderer3\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload\n * size).\n *\n * - ProceduralRenderer3\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the facade\n * that enables element manipulation. This also facilitates backwards compatibility with\n * Renderer2.\n  @type {?} */\nvar renderer;\n/**\n * @return {?}\n */\nexport function getRenderer() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return renderer;\n}\n/** @type {?} */\nvar rendererFactory;\n/**\n * @return {?}\n */\nexport function getRendererFactory() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return rendererFactory;\n}\n/**\n * @return {?}\n */\nexport function getCurrentSanitizer() {\n    return viewData && viewData[SANITIZER];\n}\n/** *\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LViewData` to only those elements.\n  @type {?} */\nvar elementDepthCount;\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n * @return {?}\n */\nexport function getCurrentView() {\n    return /** @type {?} */ ((viewData));\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n * @return {?}\n */\nexport function restoreView(viewToRestore) {\n    contextViewData = /** @type {?} */ ((viewToRestore));\n}\n/** *\n * Used to set the parent property when nodes are created.\n  @type {?} */\nvar previousOrParentNode;\n/**\n * @return {?}\n */\nexport function getPreviousOrParentNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentNode;\n}\n/** *\n * If `isParent` is:\n *  - `true`: then `previousOrParentNode` points to a parent node.\n *  - `false`: then `previousOrParentNode` points to previous node (sibling).\n  @type {?} */\nvar isParent;\n/** @type {?} */\nvar tView;\n/** @type {?} */\nvar currentQueries;\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (inb this previousOrParentNode points to a node on which we\n * create content queries).\n * @param {?} QueryType\n * @return {?}\n */\nexport function getOrCreateCurrentQueries(QueryType) {\n    /** @type {?} */\n    var tNode = previousOrParentNode.tNode;\n    // if this is the first content query on a node, any existing LQueries needs to be cloned\n    // in subsequent template passes, the cloning occurs before directive instantiation.\n    if (previousOrParentNode.data !== viewData && !isContentQueryHost(tNode)) {\n        currentQueries && (currentQueries = currentQueries.clone());\n        tNode.flags |= 16384 /* hasContentQuery */;\n    }\n    return currentQueries || (currentQueries = new QueryType(null, null, null));\n}\n/** *\n * This property gets set before entering a template.\n  @type {?} */\nvar creationMode;\n/**\n * @return {?}\n */\nexport function getCreationMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return creationMode;\n}\n/** *\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n  @type {?} */\nvar viewData;\n/**\n * Internal function that returns the current LViewData instance.\n *\n * The getCurrentView() instruction should be used for anything public.\n * @return {?}\n */\nexport function _getViewData() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return viewData;\n}\n/** *\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n  @type {?} */\nvar contextViewData = /** @type {?} */ ((null));\n/** *\n * An array of directive instances in the current view.\n *\n * These must be stored separately from LNodes because their presence is\n * unknown at compile-time and thus space cannot be reserved in data[].\n  @type {?} */\nvar directives;\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n/** *\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n  @type {?} */\nvar checkNoChangesMode = false;\n/** *\n * Whether or not this is the first time the current view has been processed.\n  @type {?} */\nvar firstTemplatePass = true;\n/** *\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.hostBindingStartIndex + any hostVars before the given dir.\n  @type {?} */\nvar bindingRootIndex = -1;\n/**\n * @return {?}\n */\nexport function getBindingRoot() {\n    return bindingRootIndex;\n}\n/** @enum {number} */\nvar BindingDirection = {\n    Input: 0,\n    Output: 1,\n};\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} host Element to which the View is a child of\n * @return {?} the previous state;\n */\nexport function enterView(newView, host) {\n    /** @type {?} */\n    var oldView = viewData;\n    directives = newView && newView[DIRECTIVES];\n    tView = newView && newView[TVIEW];\n    creationMode = newView && (newView[FLAGS] & 1 /* CreationMode */) === 1 /* CreationMode */;\n    firstTemplatePass = newView && tView.firstTemplatePass;\n    bindingRootIndex = newView && tView.bindingStartIndex;\n    renderer = newView && newView[RENDERER];\n    if (host != null) {\n        previousOrParentNode = host;\n        isParent = true;\n    }\n    viewData = contextViewData = newView;\n    oldView && (oldView[QUERIES] = currentQueries);\n    currentQueries = newView && newView[QUERIES];\n    return oldView;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @param {?=} creationOnly An optional boolean to indicate that the view was processed in creation mode\n * only, i.e. the first update will be done later. Only possible for dynamically created views.\n * @return {?}\n */\nexport function leaveView(newView, creationOnly) {\n    if (!creationOnly) {\n        if (!checkNoChangesMode) {\n            executeHooks(/** @type {?} */ ((directives)), tView.viewHooks, tView.viewCheckHooks, creationMode);\n        }\n        // Views are clean and in update mode after being checked, so these bits are cleared\n        viewData[FLAGS] &= ~(1 /* CreationMode */ | 4 /* Dirty */);\n    }\n    viewData[FLAGS] |= 16 /* RunInit */;\n    viewData[BINDING_INDEX] = tView.bindingStartIndex;\n    enterView(newView, null);\n}\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @return {?}\n */\nfunction refreshDescendantViews() {\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = firstTemplatePass = false;\n    if (!checkNoChangesMode) {\n        executeInitHooks(viewData, tView, creationMode);\n    }\n    refreshDynamicEmbeddedViews(viewData);\n    // Content query results must be refreshed before content hooks are called.\n    refreshContentQueries(tView);\n    if (!checkNoChangesMode) {\n        executeHooks(/** @type {?} */ ((directives)), tView.contentHooks, tView.contentCheckHooks, creationMode);\n    }\n    setHostBindings(tView.hostBindings);\n    refreshChildComponents(tView.components);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} bindings\n * @return {?}\n */\nexport function setHostBindings(bindings) {\n    if (bindings != null) {\n        bindingRootIndex = viewData[BINDING_INDEX] = tView.hostBindingStartIndex;\n        /** @type {?} */\n        var defs = /** @type {?} */ ((tView.directives));\n        for (var i = 0; i < bindings.length; i += 2) {\n            /** @type {?} */\n            var dirIndex = bindings[i];\n            /** @type {?} */\n            var def = /** @type {?} */ (defs[dirIndex]); /** @type {?} */\n            ((def.hostBindings))(dirIndex, bindings[i + 1]);\n            bindingRootIndex = viewData[BINDING_INDEX] = bindingRootIndex + def.hostVars;\n        }\n    }\n}\n/**\n * Refreshes content queries for all directives in the given view.\n * @param {?} tView\n * @return {?}\n */\nfunction refreshContentQueries(tView) {\n    if (tView.contentQueries != null) {\n        for (var i = 0; i < tView.contentQueries.length; i += 2) {\n            /** @type {?} */\n            var directiveDefIdx = tView.contentQueries[i];\n            /** @type {?} */\n            var directiveDef = /** @type {?} */ ((tView.directives))[directiveDefIdx]; /** @type {?} */\n            ((directiveDef.contentQueriesRefresh))(directiveDefIdx, tView.contentQueries[i + 1]);\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @return {?}\n */\nfunction refreshChildComponents(components) {\n    if (components != null) {\n        for (var i = 0; i < components.length; i++) {\n            componentRefresh(components[i]);\n        }\n    }\n}\n/**\n * @return {?}\n */\nexport function executeInitAndContentHooks() {\n    if (!checkNoChangesMode) {\n        executeInitHooks(viewData, tView, creationMode);\n        executeHooks(/** @type {?} */ ((directives)), tView.contentHooks, tView.contentCheckHooks, creationMode);\n    }\n}\n/**\n * @template T\n * @param {?} renderer\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?=} sanitizer\n * @return {?}\n */\nexport function createLViewData(renderer, tView, context, flags, sanitizer) {\n    /** @type {?} */\n    var instance = /** @type {?} */ (tView.blueprint.slice());\n    instance[PARENT] = viewData;\n    instance[FLAGS] = flags | 1 /* CreationMode */ | 8 /* Attached */ | 16 /* RunInit */;\n    instance[CONTEXT] = context;\n    instance[INJECTOR] = viewData ? viewData[INJECTOR] : null;\n    instance[RENDERER] = renderer;\n    instance[SANITIZER] = sanitizer || null;\n    return instance;\n}\n/**\n * Creation of LNode object is extracted to a separate function so we always create LNode object\n * with the same shape\n * (same properties assigned in the same order).\n * @param {?} type\n * @param {?} currentView\n * @param {?} parent\n * @param {?} native\n * @param {?} state\n * @return {?}\n */\nexport function createLNodeObject(type, currentView, parent, native, state) {\n    return {\n        native: /** @type {?} */ (native),\n        view: currentView,\n        nodeInjector: parent ? parent.nodeInjector : null,\n        data: state,\n        tNode: /** @type {?} */ ((null)),\n        dynamicLContainerNode: null\n    };\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @param {?} attrs\n * @param {?=} state\n * @return {?}\n */\nexport function createLNode(index, type, native, name, attrs, state) {\n    /** @type {?} */\n    var parent = isParent ? previousOrParentNode :\n        previousOrParentNode && /** @type {?} */ (((getParentLNode(previousOrParentNode))));\n    /** @type {?} */\n    var tParent = parent && parent.view === viewData ? /** @type {?} */ (parent.tNode) : null;\n    /** @type {?} */\n    var isState = state != null;\n    /** @type {?} */\n    var node = createLNodeObject(type, viewData, parent, native, isState ? /** @type {?} */ (state) : null);\n    if (index === -1 || type === 2 /* View */) {\n        // View nodes are not stored in data because they can be added / removed at runtime (which\n        // would cause indices to change). Their TNodes are instead stored in TView.node.\n        node.tNode = (state ? (/** @type {?} */ (state))[TVIEW].node : null) ||\n            createTNode(type, index, null, null, tParent, null);\n    }\n    else {\n        /** @type {?} */\n        var adjustedIndex = index + HEADER_OFFSET;\n        /** @type {?} */\n        var tData = tView.data;\n        ngDevMode && assertLessThan(adjustedIndex, viewData.length, \"Slot should have been initialized with null\");\n        viewData[adjustedIndex] = node;\n        if (tData[adjustedIndex] == null) {\n            /** @type {?} */\n            var tNode = tData[adjustedIndex] =\n                createTNode(type, adjustedIndex, name, attrs, tParent, null);\n            if (!isParent && previousOrParentNode) {\n                /** @type {?} */\n                var previousTNode = previousOrParentNode.tNode;\n                previousTNode.next = tNode;\n                if (previousTNode.dynamicContainerNode)\n                    previousTNode.dynamicContainerNode.next = tNode;\n            }\n        }\n        node.tNode = /** @type {?} */ (tData[adjustedIndex]);\n        // Now link ourselves into the tree.\n        if (isParent) {\n            if (previousOrParentNode.tNode.child == null && previousOrParentNode.view === viewData ||\n                previousOrParentNode.tNode.type === 2 /* View */) {\n                // We are in the same view, which means we are adding content node to the parent View.\n                previousOrParentNode.tNode.child = node.tNode;\n            }\n        }\n    }\n    // View nodes and host elements need to set their host node (components set host nodes later)\n    if ((type & 2 /* ViewOrElement */) === 2 /* ViewOrElement */ && isState) {\n        /** @type {?} */\n        var lViewData = /** @type {?} */ (state);\n        ngDevMode &&\n            assertEqual(lViewData[HOST_NODE], null, 'lViewData[HOST_NODE] should not have been initialized');\n        lViewData[HOST_NODE] = node;\n        if (firstTemplatePass)\n            lViewData[TVIEW].node = node.tNode;\n    }\n    previousOrParentNode = node;\n    isParent = true;\n    return node;\n}\n/**\n * When LNodes are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n * @param {?} view\n * @return {?}\n */\nexport function adjustBlueprintForNewNode(view) {\n    /** @type {?} */\n    var tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        tView.hostBindingStartIndex++;\n        tView.blueprint.push(null);\n        view.push(null);\n    }\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nexport function resetComponentState() {\n    isParent = false;\n    previousOrParentNode = /** @type {?} */ ((null));\n    elementDepthCount = 0;\n}\n/**\n *\n * @template T\n * @param {?} hostNode Existing node to render into.\n * @param {?} templateFn Template function with the instructions.\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} context to pass into the template.\n * @param {?} providedRendererFactory renderer factory to use\n * @param {?} host The host element node to use\n * @param {?=} directives Directive defs that should be used for matching\n * @param {?=} pipes Pipe defs that should be used for matching\n * @param {?=} sanitizer\n * @return {?}\n */\nexport function renderTemplate(hostNode, templateFn, consts, vars, context, providedRendererFactory, host, directives, pipes, sanitizer) {\n    if (host == null) {\n        resetComponentState();\n        rendererFactory = providedRendererFactory;\n        /** @type {?} */\n        var tView_1 = getOrCreateTView(templateFn, consts, vars, directives || null, pipes || null, null);\n        host = createLNode(-1, 3 /* Element */, hostNode, null, null, createLViewData(providedRendererFactory.createRenderer(null, null), tView_1, {}, 2 /* CheckAlways */, sanitizer));\n    }\n    /** @type {?} */\n    var hostView = /** @type {?} */ ((host.data));\n    ngDevMode && assertDefined(hostView, 'Host node should have an LView defined in host.data.');\n    renderComponentOrTemplate(host, hostView, context, templateFn);\n    return host;\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} renderer\n * @param {?=} queries\n * @return {?}\n */\nexport function createEmbeddedViewNode(tView, context, declarationView, renderer, queries) {\n    /** @type {?} */\n    var _isParent = isParent;\n    /** @type {?} */\n    var _previousOrParentNode = previousOrParentNode;\n    isParent = true;\n    previousOrParentNode = /** @type {?} */ ((null));\n    /** @type {?} */\n    var lView = createLViewData(renderer, tView, context, 2 /* CheckAlways */, getCurrentSanitizer());\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    /** @type {?} */\n    var viewNode = createLNode(-1, 2 /* View */, null, null, null, lView);\n    isParent = _isParent;\n    previousOrParentNode = _previousOrParentNode;\n    return viewNode;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewNode\n * @param {?} tView\n * @param {?} context\n * @param {?} rf\n * @return {?}\n */\nexport function renderEmbeddedTemplate(viewNode, tView, context, rf) {\n    /** @type {?} */\n    var _isParent = isParent;\n    /** @type {?} */\n    var _previousOrParentNode = previousOrParentNode;\n    /** @type {?} */\n    var oldView;\n    if (/** @type {?} */ ((viewNode.data))[PARENT] == null && /** @type {?} */ ((viewNode.data))[CONTEXT] && !tView.template) {\n        // This is a root view inside the view tree\n        tickRootContext(/** @type {?} */ (((viewNode.data))[CONTEXT]));\n    }\n    else {\n        try {\n            isParent = true;\n            previousOrParentNode = /** @type {?} */ ((null));\n            oldView = enterView(/** @type {?} */ ((viewNode.data)), viewNode);\n            namespaceHTML(); /** @type {?} */\n            ((tView.template))(rf, context);\n            if (rf & 2 /* Update */) {\n                refreshDescendantViews();\n            }\n            else {\n                /** @type {?} */ ((viewNode.data))[TVIEW].firstTemplatePass = firstTemplatePass = false;\n            }\n        }\n        finally {\n            /** @type {?} */\n            var isCreationOnly = (rf & 1 /* Create */) === 1 /* Create */;\n            leaveView(/** @type {?} */ ((oldView)), isCreationOnly);\n            isParent = _isParent;\n            previousOrParentNode = _previousOrParentNode;\n        }\n    }\n    return viewNode;\n}\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n */\nexport function nextContext(level) {\n    if (level === void 0) { level = 1; }\n    contextViewData = walkUpViews(level, /** @type {?} */ ((contextViewData)));\n    return /** @type {?} */ (contextViewData[CONTEXT]);\n}\n/**\n * @template T\n * @param {?} node\n * @param {?} hostView\n * @param {?} componentOrContext\n * @param {?=} templateFn\n * @return {?}\n */\nexport function renderComponentOrTemplate(node, hostView, componentOrContext, templateFn) {\n    /** @type {?} */\n    var oldView = enterView(hostView, node);\n    try {\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (templateFn) {\n            namespaceHTML();\n            templateFn(getRenderFlags(hostView), /** @type {?} */ ((componentOrContext)));\n            refreshDescendantViews();\n        }\n        else {\n            executeInitAndContentHooks();\n            // Element was stored at 0 in data and directive was stored at 0 in directives\n            // in renderComponent()\n            setHostBindings(tView.hostBindings);\n            componentRefresh(HEADER_OFFSET);\n        }\n    }\n    finally {\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. By default, the update block is run with the\n * creation block when the view is in creation mode. Otherwise, the update block is run\n * alone.\n *\n * Dynamically created views do NOT use this configuration (update block and create block are\n * always run separately).\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return view[FLAGS] & 1 /* CreationMode */ ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/** @type {?} */\nvar _currentNamespace = null;\n/**\n * @return {?}\n */\nexport function namespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg/';\n}\n/**\n * @return {?}\n */\nexport function namespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * @return {?}\n */\nexport function namespaceHTML() {\n    _currentNamespace = null;\n}\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nexport function element(index, name, attrs, localRefs) {\n    elementStart(index, name, attrs, localRefs);\n    elementEnd();\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param {?} index Index of the element in the LViewData array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n * @return {?}\n */\nexport function elementContainerStart(index, attrs, localRefs) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    var native = renderer.createComment(ngDevMode ? 'ng-container' : '');\n    ngDevMode && assertDataInRange(index - 1);\n    /** @type {?} */\n    var node = createLNode(index, 4 /* ElementContainer */, native, null, attrs || null, null);\n    appendChild(getParentLNode(node), native, viewData);\n    createDirectivesAndLocals(node, localRefs);\n}\n/**\n * Mark the end of the <ng-container>.\n * @return {?}\n */\nexport function elementContainerEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertHasParent();\n        previousOrParentNode = /** @type {?} */ (getParentLNode(previousOrParentNode));\n    }\n    ngDevMode && assertNodeType(previousOrParentNode, 4 /* ElementContainer */);\n    currentQueries && (currentQueries = currentQueries.addNode(previousOrParentNode));\n    queueLifecycleHooks(previousOrParentNode.tNode.flags, tView);\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the LViewData array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nexport function elementStart(index, name, attrs, localRefs) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    /** @type {?} */\n    var native = elementCreate(name);\n    ngDevMode && assertDataInRange(index - 1);\n    /** @type {?} */\n    var node = createLNode(index, 3 /* Element */, /** @type {?} */ ((native)), name, attrs || null, null);\n    if (attrs) {\n        setUpAttributes(native, attrs);\n    }\n    appendChild(getParentLNode(node), native, viewData);\n    createDirectivesAndLocals(node, localRefs);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (elementDepthCount === 0) {\n        attachLViewDataToNode(native, viewData);\n    }\n    elementDepthCount++;\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nexport function elementCreate(name, overriddenRenderer) {\n    /** @type {?} */\n    var native;\n    /** @type {?} */\n    var rendererToUse = overriddenRenderer || renderer;\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, _currentNamespace);\n    }\n    else {\n        if (_currentNamespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(_currentNamespace, name);\n        }\n    }\n    return native;\n}\n/**\n * @param {?} lNode\n * @return {?}\n */\nfunction nativeNodeLocalRefExtractor(lNode) {\n    return lNode.native;\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} lNode LNode for which directive and locals should be created\n * @param {?} localRefs Local refs of the node in question\n * @param {?=} localRefExtractor mapping function that extracts local ref value from LNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(lNode, localRefs, localRefExtractor) {\n    if (localRefExtractor === void 0) { localRefExtractor = nativeNodeLocalRefExtractor; }\n    if (firstTemplatePass) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        cacheMatchingDirectivesForNode(lNode.tNode, tView, localRefs || null);\n    }\n    else {\n        instantiateDirectivesDirectly();\n    }\n    saveResolvedLocalsInData(lNode, localRefExtractor);\n}\n/**\n * On first template pass, we match each node against available directive selectors and save\n * the resulting defs in the correct instantiation order for subsequent change detection runs\n * (so dependencies are always created before the directives that inject them).\n * @param {?} tNode\n * @param {?} tView\n * @param {?} localRefs\n * @return {?}\n */\nfunction cacheMatchingDirectivesForNode(tNode, tView, localRefs) {\n    /** @type {?} */\n    var exportsMap = localRefs ? { '': -1 } : null;\n    /** @type {?} */\n    var matches = tView.currentMatches = findDirectiveMatches(tNode);\n    if (matches) {\n        for (var i = 0; i < matches.length; i += 2) {\n            /** @type {?} */\n            var def = /** @type {?} */ (matches[i]);\n            /** @type {?} */\n            var valueIndex = i + 1;\n            resolveDirective(def, valueIndex, matches, tView);\n            saveNameToExportMap(/** @type {?} */ (matches[valueIndex]), def, exportsMap);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Matches the current node against all available selectors.\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tNode) {\n    /** @type {?} */\n    var registry = tView.directiveRegistry;\n    /** @type {?} */\n    var matches = null;\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            var def = registry[i];\n            if (isNodeMatchingSelectorList(tNode, /** @type {?} */ ((def.selectors)))) {\n                if ((/** @type {?} */ (def)).template) {\n                    if (tNode.flags & 4096 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 4096 /* isComponent */;\n                }\n                if (def.diPublic)\n                    def.diPublic(def);\n                (matches || (matches = [])).push(def, null);\n            }\n        }\n    }\n    return /** @type {?} */ (matches);\n}\n/**\n * @param {?} def\n * @param {?} valueIndex\n * @param {?} matches\n * @param {?} tView\n * @return {?}\n */\nexport function resolveDirective(def, valueIndex, matches, tView) {\n    if (matches[valueIndex] === null) {\n        matches[valueIndex] = CIRCULAR;\n        /** @type {?} */\n        var instance = def.factory();\n        (tView.directives || (tView.directives = [])).push(def);\n        return directiveCreate(matches[valueIndex] = /** @type {?} */ ((tView.directives)).length - 1, instance, def);\n    }\n    else if (matches[valueIndex] === CIRCULAR) {\n        // If we revisit this directive before it's resolved, we know it's circular\n        throwCyclicDependencyError(def.type);\n    }\n    return null;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @return {?}\n */\nfunction queueComponentIndexForCheck() {\n    if (firstTemplatePass) {\n        (tView.components || (tView.components = [])).push(previousOrParentNode.tNode.index);\n    }\n}\n/**\n * Stores index of directive and host element so it will be queued for binding refresh during CD.\n * @param {?} dirIndex\n * @param {?} hostVars\n * @return {?}\n */\nexport function queueHostBindingForCheck(dirIndex, hostVars) {\n    // Must subtract the header offset because hostBindings functions are generated with\n    // instructions that expect element indices that are NOT adjusted (e.g. elementProperty).\n    ngDevMode &&\n        assertEqual(firstTemplatePass, true, 'Should only be called in first template pass.');\n    for (var i = 0; i < hostVars; i++) {\n        tView.blueprint.push(NO_CHANGE);\n        viewData.push(NO_CHANGE);\n    }\n    (tView.hostBindings || (tView.hostBindings = [])).push(dirIndex, previousOrParentNode.tNode.index - HEADER_OFFSET);\n}\n/**\n * Sets the context for a ChangeDetectorRef to the given instance.\n * @param {?} injector\n * @param {?} instance\n * @param {?} view\n * @return {?}\n */\nexport function initChangeDetectorIfExisting(injector, instance, view) {\n    if (injector && injector.changeDetectorRef != null) {\n        (/** @type {?} */ (injector.changeDetectorRef))._setComponentContext(view, instance);\n    }\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isContentQueryHost(tNode) {\n    return (tNode.flags & 16384 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isComponent(tNode) {\n    return (tNode.flags & 4096 /* isComponent */) === 4096 /* isComponent */;\n}\n/**\n * This function instantiates the given directives.\n * @return {?}\n */\nfunction instantiateDirectivesDirectly() {\n    ngDevMode && assertEqual(firstTemplatePass, false, \"Directives should only be instantiated directly after first template pass\");\n    /** @type {?} */\n    var tNode = previousOrParentNode.tNode;\n    /** @type {?} */\n    var count = tNode.flags & 4095 /* DirectiveCountMask */;\n    if (isContentQueryHost(tNode) && currentQueries) {\n        currentQueries = currentQueries.clone();\n    }\n    if (count > 0) {\n        /** @type {?} */\n        var start = tNode.flags >> 15 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var end = start + count;\n        /** @type {?} */\n        var tDirectives = /** @type {?} */ ((tView.directives));\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var def = tDirectives[i];\n            directiveCreate(i, def.factory(), def);\n        }\n    }\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        /** @type {?} */\n        var localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (var i = 0; i < localRefs.length; i += 2) {\n            /** @type {?} */\n            var index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs)\n            exportsMap[def.exportAs] = index;\n        if ((/** @type {?} */ (def)).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LViewData in the same order as they are loaded in the template with load().\n * @param {?} lNode\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(lNode, localRefExtractor) {\n    /** @type {?} */\n    var localNames = lNode.tNode.localNames;\n    if (localNames) {\n        /** @type {?} */\n        var localIndex = lNode.tNode.index + 1;\n        for (var i = 0; i < localNames.length; i += 2) {\n            /** @type {?} */\n            var index = /** @type {?} */ (localNames[i + 1]);\n            /** @type {?} */\n            var value = index === -1 ? localRefExtractor(lNode) : /** @type {?} */ ((directives))[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} templateFn The template from which to get static data\n * @param {?} consts The number of nodes, local refs, and pipes in this view\n * @param {?} vars The number of bindings and pure function bindings in this view\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @param {?} viewQuery\n * @return {?} TView\n */\nfunction getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData = /** @type {?} */ (createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery)));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery\n * @return {?}\n */\nexport function createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery) {\n    ngDevMode && ngDevMode.tView++;\n    /** @type {?} */\n    var bindingStartIndex = HEADER_OFFSET + consts;\n    /** @type {?} */\n    var initialViewLength = bindingStartIndex + vars;\n    /** @type {?} */\n    var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[TVIEW] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: /** @type {?} */ ((null)),\n        data: HEADER_FILLER.slice(),\n        // Fill in to match HEADER_OFFSET in LViewData\n        childIndex: -1,\n        // Children set in addToViewTree(), if any\n        bindingStartIndex: bindingStartIndex,\n        hostBindingStartIndex: initialViewLength,\n        directives: null,\n        firstTemplatePass: true,\n        initHooks: null,\n        checkHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        pipeDestroyHooks: null,\n        cleanup: null,\n        hostBindings: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        currentMatches: null\n    };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    /** @type {?} */\n    var blueprint = /** @type {?} */ (new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex));\n    blueprint[CONTAINER_INDEX] = -1;\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\n/**\n * @param {?} native\n * @param {?} attrs\n * @return {?}\n */\nfunction setUpAttributes(native, attrs) {\n    /** @type {?} */\n    var isProc = isProceduralRenderer(renderer);\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var attrName = attrs[i];\n        if (attrName === 1 /* SelectOnly */)\n            break;\n        if (attrName === NG_PROJECT_AS_ATTR_NAME) {\n            i += 2;\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            if (attrName === 0 /* NamespaceURI */) {\n                /** @type {?} */\n                var namespaceURI = /** @type {?} */ (attrs[i + 1]);\n                /** @type {?} */\n                var attrName_1 = /** @type {?} */ (attrs[i + 2]);\n                /** @type {?} */\n                var attrVal = /** @type {?} */ (attrs[i + 3]);\n                isProc ?\n                    (/** @type {?} */ (renderer))\n                        .setAttribute(native, attrName_1, attrVal, namespaceURI) :\n                    native.setAttributeNS(namespaceURI, attrName_1, attrVal);\n                i += 4;\n            }\n            else {\n                /** @type {?} */\n                var attrVal = attrs[i + 1];\n                isProc ?\n                    (/** @type {?} */ (renderer))\n                        .setAttribute(native, /** @type {?} */ (attrName), /** @type {?} */ (attrVal)) :\n                    native.setAttribute(/** @type {?} */ (attrName), /** @type {?} */ (attrVal));\n                i += 2;\n            }\n        }\n    }\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nexport function createError(text, token) {\n    return new Error(\"Renderer: \" + text + \" [\" + stringify(token) + \"]\");\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nexport function locateHostElement(factory, elementOrSelector) {\n    ngDevMode && assertDataInRange(-1);\n    rendererFactory = factory;\n    /** @type {?} */\n    var defaultRenderer = factory.createRenderer(null, null);\n    /** @type {?} */\n    var rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Creates the host LNode.\n *\n * @param {?} tag\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n *\n * @param {?=} sanitizer\n * @return {?} LElementNode created\n */\nexport function hostElement(tag, rNode, def, sanitizer) {\n    resetComponentState();\n    /** @type {?} */\n    var node = createLNode(0, 3 /* Element */, rNode, null, null, createLViewData(renderer, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery), null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */, sanitizer));\n    if (firstTemplatePass) {\n        node.tNode.flags = 4096 /* isComponent */;\n        if (def.diPublic)\n            def.diPublic(def);\n        tView.directives = [def];\n    }\n    return node;\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener.\n * @return {?}\n */\nexport function listener(eventName, listenerFn, useCapture) {\n    if (useCapture === void 0) { useCapture = false; }\n    ngDevMode &&\n        assertNodeOfPossibleTypes(previousOrParentNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    /** @type {?} */\n    var node = previousOrParentNode;\n    // add native event listener - applicable to elements only\n    if (previousOrParentNode.tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        var native = /** @type {?} */ (node.native);\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            /** @type {?} */\n            var wrappedListener = wrapListenerWithDirtyLogic(viewData, listenerFn);\n            /** @type {?} */\n            var cleanupFn = renderer.listen(native, eventName, wrappedListener);\n            storeCleanupFn(viewData, cleanupFn);\n        }\n        else {\n            /** @type {?} */\n            var wrappedListener = wrapListenerWithDirtyAndDefault(viewData, listenerFn);\n            native.addEventListener(eventName, wrappedListener, useCapture);\n            /** @type {?} */\n            var cleanupInstances = getCleanup(viewData);\n            cleanupInstances.push(wrappedListener);\n            if (firstTemplatePass) {\n                getTViewCleanup(viewData).push(eventName, node.tNode.index, /** @type {?} */ ((cleanupInstances)).length - 1, useCapture);\n            }\n        }\n    }\n    /** @type {?} */\n    var tNode = node.tNode;\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(node.tNode.flags, 1 /* Output */);\n    }\n    /** @type {?} */\n    var outputs = tNode.outputs;\n    /** @type {?} */\n    var outputData;\n    if (outputs && (outputData = outputs[eventName])) {\n        createOutput(outputData, listenerFn);\n    }\n}\n/**\n * Iterates through the outputs associated with a particular event name and subscribes to\n * each output.\n * @param {?} outputs\n * @param {?} listener\n * @return {?}\n */\nfunction createOutput(outputs, listener) {\n    for (var i = 0; i < outputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (outputs[i]), /** @type {?} */ ((directives)));\n        /** @type {?} */\n        var subscription = /** @type {?} */ ((directives))[/** @type {?} */ (outputs[i])][outputs[i + 1]].subscribe(listener);\n        storeCleanupWithContext(viewData, subscription, subscription.unsubscribe);\n    }\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} view\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupWithContext(view, context, cleanupFn) {\n    if (!view)\n        view = viewData;\n    getCleanup(view).push(context);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push(cleanupFn, /** @type {?} */ ((view[CLEANUP])).length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push(/** @type {?} */ ((view[CLEANUP])).length - 1, null);\n    }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nexport function elementEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertHasParent();\n        previousOrParentNode = /** @type {?} */ (getParentLNode(previousOrParentNode));\n    }\n    ngDevMode && assertNodeType(previousOrParentNode, 3 /* Element */);\n    currentQueries && (currentQueries = currentQueries.addNode(previousOrParentNode));\n    queueLifecycleHooks(previousOrParentNode.tNode.flags, tView);\n    elementDepthCount--;\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementAttribute(index, name, value, sanitizer) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        var element_1 = loadElement(index);\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element_1.native, name) :\n                element_1.native.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            /** @type {?} */\n            var strValue = sanitizer == null ? stringify(value) : sanitizer(value);\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element_1.native, name, strValue) :\n                element_1.native.setAttribute(name, strValue);\n        }\n    }\n}\n/**\n * Update a property on an Element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementProperty(index, propName, value, sanitizer) {\n    if (value === NO_CHANGE)\n        return;\n    /** @type {?} */\n    var node = /** @type {?} */ (loadElement(index));\n    /** @type {?} */\n    var tNode = node.tNode;\n    // if tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked\n    if (tNode && tNode.inputs === undefined) {\n        // mark inputs as checked\n        tNode.inputs = generatePropertyAliases(node.tNode.flags, 0 /* Input */);\n    }\n    /** @type {?} */\n    var inputData = tNode && tNode.inputs;\n    /** @type {?} */\n    var dataValue;\n    if (inputData && (dataValue = inputData[propName])) {\n        setInputsForProperty(dataValue, value);\n        markDirtyIfOnPush(node);\n    }\n    else {\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? (/** @type {?} */ (sanitizer(value))) : value;\n        /** @type {?} */\n        var native = node.native;\n        ngDevMode && ngDevMode.rendererSetProperty++;\n        isProceduralRenderer(renderer) ? renderer.setProperty(native, propName, value) :\n            (native.setProperty ? native.setProperty(propName, value) :\n                (/** @type {?} */ (native))[propName] = value);\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @param {?} parent The parent of this node\n * @param {?} tViews Any TViews attached to this node\n * @return {?} the TNode object\n */\nexport function createTNode(type, adjustedIndex, tagName, attrs, parent, tViews) {\n    ngDevMode && ngDevMode.tNode++;\n    return {\n        type: type,\n        index: adjustedIndex,\n        flags: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: tViews,\n        next: null,\n        child: null,\n        parent: parent,\n        dynamicContainerNode: null,\n        detached: null,\n        stylingTemplate: null,\n        projection: null\n    };\n}\n/**\n * Given a list of directive indices and minified input names, sets the\n * input properties on the corresponding directives.\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setInputsForProperty(inputs, value) {\n    for (var i = 0; i < inputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (inputs[i]), /** @type {?} */ ((directives))); /** @type {?} */\n        ((directives))[/** @type {?} */ (inputs[i])][inputs[i + 1]] = value;\n    }\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNodeFlags\n * @param {?} direction\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNodeFlags, direction) {\n    /** @type {?} */\n    var count = tNodeFlags & 4095 /* DirectiveCountMask */;\n    /** @type {?} */\n    var propStore = null;\n    if (count > 0) {\n        /** @type {?} */\n        var start = tNodeFlags >> 15 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var end = start + count;\n        /** @type {?} */\n        var isInput = direction === 0 /* Input */;\n        /** @type {?} */\n        var defs = /** @type {?} */ ((tView.directives));\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var directiveDef = /** @type {?} */ (defs[i]);\n            /** @type {?} */\n            var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (var publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    /** @type {?} */\n                    var internalName = propertyAliasMap[publicName];\n                    /** @type {?} */\n                    var hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, internalName) :\n                        (propStore[publicName] = [i, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Add or remove a class in a `classList` on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} stylingIndex\n * @param {?} value A value indicating if a given class should be added or removed.\n * @return {?}\n */\nexport function elementClassProp(index, stylingIndex, value) {\n    updateElementClassProp(getStylingContext(index), stylingIndex, value ? true : false);\n}\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to apply all styling\n * (e.g. `style=\"...\"`) values to the element. This is also where the provided index\n * value is allocated for the styling details for its corresponding element (the element\n * index is the previous index value from this one).\n *\n * (Note this function calls `elementStylingApply` immediately when called.)\n *\n *\n * @template T\n * @param {?=} classDeclarations A key/value array of CSS classes that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any classes placed on the element by multiple (`[class]`) or singular (`[class.named]`)\n *   bindings. If a class binding changes its value to a falsy value then the matching initial\n *   class value that are passed in here will be applied to the element (if matched).\n * @param {?=} styleDeclarations A key/value array of CSS styles that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any styles placed on the element by multiple (`[style]`) or singular (`[style.prop]`)\n *   bindings. If a style binding changes its value to null then the initial styling\n *   values that are passed in here will be applied to the element (if matched).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used (if provided)\n *   to sanitize the any CSS property values that are applied to the element (during rendering).\n * @return {?}\n */\nexport function elementStyling(classDeclarations, styleDeclarations, styleSanitizer) {\n    /** @type {?} */\n    var tNode = previousOrParentNode.tNode;\n    if (!tNode.stylingTemplate) {\n        // initialize the styling template.\n        tNode.stylingTemplate =\n            createStylingContextTemplate(classDeclarations, styleDeclarations, styleSanitizer);\n    }\n    if (styleDeclarations && styleDeclarations.length ||\n        classDeclarations && classDeclarations.length) {\n        elementStylingApply(tNode.index - HEADER_OFFSET);\n    }\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param {?} index Index of the style allocation. See: `elementStyling`.\n * @return {?}\n */\nfunction getStylingContext(index) {\n    /** @type {?} */\n    var stylingContext = load(index);\n    if (!Array.isArray(stylingContext)) {\n        /** @type {?} */\n        var lElement = /** @type {?} */ ((stylingContext));\n        /** @type {?} */\n        var tNode = lElement.tNode;\n        ngDevMode &&\n            assertDefined(tNode.stylingTemplate, 'getStylingContext() called before elementStyling()');\n        stylingContext = viewData[index + HEADER_OFFSET] =\n            allocStylingContext(lElement, /** @type {?} */ ((tNode.stylingTemplate)));\n    }\n    return stylingContext;\n}\n/**\n * Apply all styling values to the element which have been queued by any styling instructions.\n *\n * This instruction is meant to be run once one or more `elementStyle` and/or `elementStyleProp`\n * have been issued against the element. This function will also determine if any styles have\n * changed and will then skip the operation if there is nothing new to render.\n *\n * Once called then all queued styles will be flushed.\n *\n * @template T\n * @param {?} index Index of the element's styling storage that will be rendered.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @return {?}\n */\nexport function elementStylingApply(index) {\n    renderElementStyles(getStylingContext(index), renderer);\n}\n/**\n * Queue a given style to be rendered on an Element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @template T\n * @param {?} index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param {?} styleIndex Index of the style property on this element. (Monotonically increasing.)\n * @param {?} value New value to write (null to remove).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @return {?}\n */\nexport function elementStyleProp(index, styleIndex, value, suffix) {\n    /** @type {?} */\n    var valueToAdd = null;\n    if (value) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            valueToAdd = stringify(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            valueToAdd = /** @type {?} */ ((value));\n        }\n    }\n    updateElementStyleProp(getStylingContext(index), styleIndex, valueToAdd);\n}\n/**\n * Queue a key/value map of styles to be rendered on an Element.\n *\n * This instruction is meant to handle the `[style]=\"exp\"` usage. When styles are applied to\n * the Element they will then be placed with respect to any styles set with `elementStyleProp`.\n * If any styles are set to `null` then they will be removed from the element (unless the same\n * style properties have been assigned to the element during creation using `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @template T\n * @param {?} index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param {?} classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @return {?}\n */\nexport function elementStylingMap(index, classes, styles) {\n    updateStylingMap(getStylingContext(index), classes, styles);\n}\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n * @return {?}\n */\nexport function text(index, value) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    /** @type {?} */\n    var textNode = createTextNode(value, renderer);\n    /** @type {?} */\n    var node = createLNode(index, 3 /* Element */, textNode, null, null);\n    // Text nodes are self closing.\n    isParent = false;\n    appendChild(getParentLNode(node), textNode, viewData);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nexport function textBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        ngDevMode && assertDataInRange(index + HEADER_OFFSET);\n        /** @type {?} */\n        var existingNode = /** @type {?} */ ((loadElement(index)));\n        ngDevMode && assertDefined(existingNode, 'LNode should exist');\n        ngDevMode && assertDefined(existingNode.native, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        isProceduralRenderer(renderer) ? renderer.setValue(existingNode.native, stringify(value)) :\n            existingNode.native.textContent = stringify(value);\n    }\n}\n/**\n * Create a directive and their associated content queries.\n *\n * NOTE: directives can be created in order other than the index order. They can also\n *       be retrieved before they are created in which case the value will be null.\n *\n * @template T\n * @param {?} directiveDefIdx\n * @param {?} directive The directive instance.\n * @param {?} directiveDef DirectiveDef object which contains information about the template.\n * @return {?}\n */\nexport function directiveCreate(directiveDefIdx, directive, directiveDef) {\n    /** @type {?} */\n    var instance = baseDirectiveCreate(directiveDefIdx, directive, directiveDef);\n    ngDevMode && assertDefined(previousOrParentNode.tNode, 'previousOrParentNode.tNode');\n    /** @type {?} */\n    var tNode = previousOrParentNode.tNode;\n    /** @type {?} */\n    var isComponent = (/** @type {?} */ (directiveDef)).template;\n    if (isComponent) {\n        addComponentLogic(directiveDefIdx, directive, /** @type {?} */ (directiveDef));\n    }\n    if (firstTemplatePass) {\n        // Init hooks are queued now so ngOnInit is called in host components before\n        // any projected components.\n        queueInitHooks(directiveDefIdx, directiveDef.onInit, directiveDef.doCheck, tView);\n        if (directiveDef.hostBindings)\n            queueHostBindingForCheck(directiveDefIdx, directiveDef.hostVars);\n    }\n    if (tNode && tNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, instance, directiveDef.inputs, tNode);\n    }\n    if (directiveDef.contentQueries) {\n        directiveDef.contentQueries();\n    }\n    return instance;\n}\n/**\n * @template T\n * @param {?} directiveIndex\n * @param {?} instance\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(directiveIndex, instance, def) {\n    /** @type {?} */\n    var tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery);\n    /** @type {?} */\n    var componentView = addToViewTree(viewData, /** @type {?} */ (previousOrParentNode.tNode.index), createLViewData(rendererFactory.createRenderer(/** @type {?} */ (previousOrParentNode.native), def), tView, instance, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */, getCurrentSanitizer()));\n    // We need to set the host node/data here because when the component LNode was created,\n    // we didn't yet know it was a component (just an element).\n    (/** @type {?} */ (previousOrParentNode)).data = componentView;\n    (/** @type {?} */ (componentView))[HOST_NODE] = /** @type {?} */ (previousOrParentNode);\n    initChangeDetectorIfExisting(previousOrParentNode.nodeInjector, instance, componentView);\n    if (firstTemplatePass)\n        queueComponentIndexForCheck();\n}\n/**\n * A lighter version of directiveCreate() that is used for the root component\n *\n * This version does not contain features that we don't already support at root in\n * current Angular. Example: local refs and inputs on root component.\n * @template T\n * @param {?} index\n * @param {?} directive\n * @param {?} directiveDef\n * @return {?}\n */\nexport function baseDirectiveCreate(index, directive, directiveDef) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent();\n    Object.defineProperty(directive, NG_HOST_SYMBOL, { enumerable: false, value: previousOrParentNode });\n    if (directives == null)\n        viewData[DIRECTIVES] = directives = [];\n    ngDevMode && assertDataNext(index, directives);\n    directives[index] = directive;\n    if (firstTemplatePass) {\n        /** @type {?} */\n        var flags = previousOrParentNode.tNode.flags;\n        if ((flags & 4095 /* DirectiveCountMask */) === 0) {\n            // When the first directive is created:\n            // - save the index,\n            // - set the number of directives to 1\n            previousOrParentNode.tNode.flags =\n                index << 15 /* DirectiveStartingIndexShift */ | flags & 4096 /* isComponent */ | 1;\n        }\n        else {\n            // Only need to bump the size when subsequent directives are created\n            ngDevMode && assertNotEqual(flags & 4095 /* DirectiveCountMask */, 4095 /* DirectiveCountMask */, 'Reached the max number of directives');\n            previousOrParentNode.tNode.flags++;\n        }\n    }\n    else {\n        /** @type {?} */\n        var diPublic = /** @type {?} */ ((directiveDef)).diPublic;\n        if (diPublic)\n            diPublic(/** @type {?} */ ((directiveDef)));\n    }\n    if (/** @type {?} */ ((directiveDef)).attributes != null && previousOrParentNode.tNode.type == 3 /* Element */) {\n        setUpAttributes((/** @type {?} */ (previousOrParentNode)).native, /** @type {?} */ (((directiveDef)).attributes));\n    }\n    return directive;\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\n    /** @type {?} */\n    var initialInputData = /** @type {?} */ (tNode.initialInputs);\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\n    }\n    /** @type {?} */\n    var initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        for (var i = 0; i < initialInputs.length; i += 2) {\n            (/** @type {?} */ (instance))[initialInputs[i]] = initialInputs[i + 1];\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    /** @type {?} */\n    var initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    /** @type {?} */\n    var attrs = /** @type {?} */ ((tNode.attrs));\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var attrName = attrs[i];\n        if (attrName === 1 /* SelectOnly */)\n            break;\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        /** @type {?} */\n        var minifiedInputName = inputs[attrName];\n        /** @type {?} */\n        var attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            /** @type {?} */\n            var inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(minifiedInputName, /** @type {?} */ (attrValue));\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} parentLNode the LNode in which the container's content will be rendered\n * @param {?} currentView The parent view of the LContainer\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nexport function createLContainer(parentLNode, currentView, isForViewContainerRef) {\n    ngDevMode && assertDefined(parentLNode, 'containers should have a parent');\n    /** @type {?} */\n    var renderParent = canInsertNativeNode(parentLNode, currentView) ? /** @type {?} */ (parentLNode) :\n        null;\n    if (renderParent && renderParent.tNode.type === 2 /* View */) {\n        renderParent = /** @type {?} */ ((getParentLNode(/** @type {?} */ (renderParent)))).data[RENDER_PARENT];\n    }\n    return [\n        isForViewContainerRef ? null : 0,\n        currentView,\n        null,\n        null,\n        // queries\n        [],\n        /** @type {?} */ (renderParent)\n    ];\n}\n/**\n * Creates an LContainerNode for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @return {?}\n */\nexport function template(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    /** @type {?} */\n    var node = containerInternal(index, tagName || null, attrs || null, localRefs || null);\n    if (firstTemplatePass) {\n        node.tNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    createDirectivesAndLocals(node, localRefs, localRefExtractor);\n    currentQueries && (currentQueries = currentQueries.addNode(node));\n    queueLifecycleHooks(node.tNode.flags, tView);\n    isParent = false;\n}\n/**\n * Creates an LContainerNode for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function container(index) {\n    /** @type {?} */\n    var node = containerInternal(index, null, null, null);\n    firstTemplatePass && (node.tNode.tViews = []);\n    isParent = false;\n}\n/**\n * @param {?} index\n * @param {?} tagName\n * @param {?} attrs\n * @param {?} localRefs\n * @return {?}\n */\nfunction containerInternal(index, tagName, attrs, localRefs) {\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'container nodes should be created before any bindings');\n    /** @type {?} */\n    var currentParent = isParent ? previousOrParentNode : /** @type {?} */ ((getParentLNode(previousOrParentNode)));\n    /** @type {?} */\n    var lContainer = createLContainer(currentParent, viewData);\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    var comment = renderer.createComment(ngDevMode ? 'container' : '');\n    /** @type {?} */\n    var node = createLNode(index, 0 /* Container */, comment, tagName, attrs, lContainer);\n    appendChild(getParentLNode(node), comment, viewData);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(viewData, index + HEADER_OFFSET, node.data);\n    if (currentQueries) {\n        // prepare place for matching nodes from views inserted into a given container\n        lContainer[QUERIES] = currentQueries.container();\n    }\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\n    return node;\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function containerRefreshStart(index) {\n    previousOrParentNode = /** @type {?} */ (loadElement(index));\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\n    isParent = true;\n    (/** @type {?} */ (previousOrParentNode)).data[ACTIVE_INDEX] = 0;\n    if (!checkNoChangesMode) {\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\n        // before they are called in embedded views (for backwards compatibility).\n        executeInitHooks(viewData, tView, creationMode);\n    }\n}\n/**\n * Marks the end of the LContainerNode.\n *\n * Marking the end of LContainerNode is the time when to child Views get inserted or removed.\n * @return {?}\n */\nexport function containerRefreshEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\n        ngDevMode && assertHasParent();\n        previousOrParentNode = /** @type {?} */ ((getParentLNode(previousOrParentNode)));\n    }\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\n    /** @type {?} */\n    var container = /** @type {?} */ (previousOrParentNode);\n    ngDevMode && assertNodeType(container, 0 /* Container */);\n    /** @type {?} */\n    var nextIndex = /** @type {?} */ ((container.data[ACTIVE_INDEX]));\n    // remove extra views at the end of the container\n    while (nextIndex < container.data[VIEWS].length) {\n        removeView(container, nextIndex);\n    }\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n * @param {?} lViewData\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lViewData) {\n    for (var current = getLViewChild(lViewData); current !== null; current = current[NEXT]) {\n        // Note: current can be an LViewData or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LViewData\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === null) {\n            /** @type {?} */\n            var container_1 = /** @type {?} */ (current);\n            for (var i = 0; i < container_1[VIEWS].length; i++) {\n                /** @type {?} */\n                var lViewNode = container_1[VIEWS][i];\n                /** @type {?} */\n                var dynamicViewData = lViewNode.data;\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(lViewNode, dynamicViewData[TVIEW], /** @type {?} */ ((dynamicViewData[CONTEXT])), 2 /* Update */);\n            }\n        }\n    }\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} containerNode where to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(containerNode, startIdx, viewBlockId) {\n    /** @type {?} */\n    var views = containerNode.data[VIEWS];\n    for (var i = startIdx; i < views.length; i++) {\n        /** @type {?} */\n        var viewAtPositionId = views[i].data[TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(containerNode, i);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the search here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n */\nexport function embeddedViewStart(viewBlockId, consts, vars) {\n    /** @type {?} */\n    var container = /** @type {?} */ ((isParent ? previousOrParentNode : getParentLNode(previousOrParentNode)));\n    ngDevMode && assertNodeType(container, 0 /* Container */);\n    /** @type {?} */\n    var lContainer = container.data;\n    /** @type {?} */\n    var viewNode = scanForView(container, /** @type {?} */ ((lContainer[ACTIVE_INDEX])), viewBlockId);\n    if (viewNode) {\n        previousOrParentNode = viewNode;\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\n        isParent = true;\n        enterView(viewNode.data, viewNode);\n    }\n    else {\n        /** @type {?} */\n        var newView = createLViewData(renderer, getOrCreateEmbeddedTView(viewBlockId, consts, vars, container), null, 2 /* CheckAlways */, getCurrentSanitizer());\n        if (lContainer[QUERIES]) {\n            newView[QUERIES] = /** @type {?} */ ((lContainer[QUERIES])).createView();\n        }\n        enterView(newView, viewNode = createLNode(viewBlockId, 2 /* View */, null, null, null, newView));\n    }\n    if (container) {\n        if (creationMode) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(container, viewNode, /** @type {?} */ ((lContainer[ACTIVE_INDEX])));\n        } /** @type {?} */\n        ((lContainer[ACTIVE_INDEX]))++;\n    }\n    return getRenderFlags(viewNode.data);\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent The parent container in which to look for the view's static data\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    /** @type {?} */\n    var containerTViews = /** @type {?} */ ((/** @type {?} */ (((parent)).tNode)).tViews);\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nexport function embeddedViewEnd() {\n    refreshDescendantViews();\n    isParent = false;\n    previousOrParentNode = /** @type {?} */ (viewData[HOST_NODE]);\n    leaveView(/** @type {?} */ ((viewData[PARENT])));\n    ngDevMode && assertEqual(isParent, false, 'isParent');\n    ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\n}\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @template T\n * @param {?} adjustedElementIndex  Element index in LViewData[] (adjusted for HEADER_OFFSET)\n * @return {?}\n */\nexport function componentRefresh(adjustedElementIndex) {\n    ngDevMode && assertDataInRange(adjustedElementIndex);\n    /** @type {?} */\n    var element = /** @type {?} */ (viewData[adjustedElementIndex]);\n    ngDevMode && assertNodeType(element, 3 /* Element */);\n    ngDevMode &&\n        assertDefined(element.data, \"Component's host node should have an LViewData attached.\");\n    /** @type {?} */\n    var hostView = /** @type {?} */ ((element.data));\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttached(hostView) && hostView[FLAGS] & (2 /* CheckAlways */ | 4 /* Dirty */)) {\n        detectChangesInternal(hostView, element, hostView[CONTEXT]);\n    }\n}\n/**\n * Returns a boolean for whether the view is attached\n * @param {?} view\n * @return {?}\n */\nexport function viewAttached(view) {\n    return (view[FLAGS] & 8 /* Attached */) === 8 /* Attached */;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nexport function projectionDef(selectors, textSelectors) {\n    /** @type {?} */\n    var componentNode = findComponentHost(viewData);\n    if (!componentNode.tNode.projection) {\n        /** @type {?} */\n        var noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n        /** @type {?} */\n        var pData = componentNode.tNode.projection =\n            new Array(noOfNodeBuckets).fill(null);\n        /** @type {?} */\n        var tails = pData.slice();\n        /** @type {?} */\n        var componentChild = componentNode.tNode.child;\n        while (componentChild !== null) {\n            /** @type {?} */\n            var bucketIndex = selectors ? matchingSelectorIndex(componentChild, selectors, /** @type {?} */ ((textSelectors))) : 0;\n            /** @type {?} */\n            var nextNode = componentChild.next;\n            if (tails[bucketIndex]) {\n                /** @type {?} */ ((tails[bucketIndex])).next = componentChild;\n            }\n            else {\n                pData[bucketIndex] = componentChild;\n                componentChild.next = null;\n            }\n            tails[bucketIndex] = componentChild;\n            componentChild = nextNode;\n        }\n    }\n}\n/** *\n * Stack used to keep track of projection nodes in projection() instruction.\n *\n * This is deliberately created outside of projection() to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n  @type {?} */\nvar projectionNodeStack = [];\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nexport function projection(nodeIndex, selectorIndex, attrs) {\n    if (selectorIndex === void 0) { selectorIndex = 0; }\n    /** @type {?} */\n    var node = createLNode(nodeIndex, 1 /* Projection */, null, null, attrs || null, null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (node.tNode.projection === null)\n        node.tNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    isParent = false;\n    /** @type {?} */\n    var parent = getParentLNode(node);\n    if (canInsertNativeNode(parent, viewData)) {\n        /** @type {?} */\n        var componentNode = findComponentHost(viewData);\n        /** @type {?} */\n        var nodeToProject = (/** @type {?} */ (componentNode.tNode.projection))[selectorIndex];\n        /** @type {?} */\n        var projectedView = componentNode.view;\n        /** @type {?} */\n        var projectionNodeIndex = -1;\n        /** @type {?} */\n        var grandparent = void 0;\n        /** @type {?} */\n        var renderParent = parent.tNode.type === 2 /* View */ ?\n            (grandparent = /** @type {?} */ (getParentLNode(parent))) &&\n                /** @type {?} */ ((grandparent.data[RENDER_PARENT])) : /** @type {?} */ (parent);\n        /** @type {?} */\n        var parentView = viewData[HOST_NODE].view;\n        while (nodeToProject) {\n            if (nodeToProject.type === 1 /* Projection */) {\n                /** @type {?} */\n                var currentComponentHost = findComponentHost(projectedView);\n                /** @type {?} */\n                var firstProjectedNode = (/** @type {?} */ (currentComponentHost.tNode.projection))[/** @type {?} */ (nodeToProject.projection)];\n                if (firstProjectedNode) {\n                    projectionNodeStack[++projectionNodeIndex] = projectedView[nodeToProject.index];\n                    nodeToProject = firstProjectedNode;\n                    projectedView = currentComponentHost.view;\n                    continue;\n                }\n            }\n            else {\n                /** @type {?} */\n                var lNode = projectedView[nodeToProject.index];\n                lNode.tNode.flags |= 8192 /* isProjected */;\n                appendProjectedNode(/** @type {?} */ (lNode), parent, viewData, renderParent, parentView);\n            }\n            // If we are finished with a list of re-projected nodes, we need to get\n            // back to the root projection node that was re-projected.\n            if (nodeToProject.next === null && projectedView !== componentNode.view) {\n                /** @type {?} */\n                var lNode = projectionNodeStack[projectionNodeIndex--];\n                nodeToProject = lNode.tNode;\n                projectedView = lNode.view;\n            }\n            nodeToProject = nodeToProject.next;\n        }\n    }\n}\n/**\n * Adds LViewData or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} currentView The view where LViewData or LContainer should be added\n * @param {?} adjustedHostIndex Index of the view's host node in LViewData[], adjusted for header\n * @param {?} state The LViewData or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nexport function addToViewTree(currentView, adjustedHostIndex, state) {\n    if (currentView[TAIL]) {\n        /** @type {?} */ ((currentView[TAIL]))[NEXT] = state;\n    }\n    else if (firstTemplatePass) {\n        tView.childIndex = adjustedHostIndex;\n    }\n    currentView[TAIL] = state;\n    return state;\n}\n/**\n * If node is an OnPush component, marks its LViewData dirty.\n * @param {?} node\n * @return {?}\n */\nexport function markDirtyIfOnPush(node) {\n    // Because data flows down the component tree, ancestors do not need to be marked dirty\n    if (node.data && !(node.data[FLAGS] & 2 /* CheckAlways */)) {\n        node.data[FLAGS] |= 4 /* Dirty */;\n    }\n}\n/**\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\n * whenever the event fires. Necessary to support OnPush components.\n * @param {?} view\n * @param {?} listenerFn\n * @return {?}\n */\nexport function wrapListenerWithDirtyLogic(view, listenerFn) {\n    return function (e) {\n        markViewDirty(view);\n        return listenerFn(e);\n    };\n}\n/**\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\n * whenever the event fires. Also wraps with preventDefault behavior.\n * @param {?} view\n * @param {?} listenerFn\n * @return {?}\n */\nexport function wrapListenerWithDirtyAndDefault(view, listenerFn) {\n    return function wrapListenerIn_markViewDirty(e) {\n        markViewDirty(view);\n        if (listenerFn(e) === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n    };\n}\n/**\n * Marks current view and all ancestors dirty\n * @param {?} view\n * @return {?}\n */\nexport function markViewDirty(view) {\n    /** @type {?} */\n    var currentView = view;\n    while (currentView[PARENT] != null) {\n        currentView[FLAGS] |= 4 /* Dirty */;\n        currentView = /** @type {?} */ ((currentView[PARENT]));\n    }\n    currentView[FLAGS] |= 4 /* Dirty */;\n    ngDevMode && assertDefined(currentView[CONTEXT], 'rootContext');\n    scheduleTick(/** @type {?} */ (currentView[CONTEXT]));\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @return {?}\n */\nexport function scheduleTick(rootContext) {\n    if (rootContext.clean == _CLEAN_PROMISE) {\n        /** @type {?} */\n        var res_1 = void 0;\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\n        rootContext.scheduler(function () {\n            tickRootContext(rootContext); /** @type {?} */\n            ((res_1))(null);\n            rootContext.clean = _CLEAN_PROMISE;\n        });\n    }\n}\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function tick(component) {\n    /** @type {?} */\n    var rootView = getRootView(component);\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (rootView[CONTEXT]);\n    tickRootContext(rootContext);\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n    for (var i = 0; i < rootContext.components.length; i++) {\n        /** @type {?} */\n        var rootComponent = rootContext.components[i];\n        /** @type {?} */\n        var hostNode = _getComponentHostLElementNode(rootComponent);\n        ngDevMode && assertDefined(hostNode.data, 'Component host node should be attached to an LView');\n        renderComponentOrTemplate(hostNode, getRootView(rootComponent), rootComponent);\n    }\n}\n/**\n * Retrieve the root view from any component by walking the parent `LViewData` until\n * reaching the root `LViewData`.\n *\n * @param {?} component any component\n * @return {?}\n */\nexport function getRootView(component) {\n    ngDevMode && assertDefined(component, 'component');\n    /** @type {?} */\n    var lElementNode = _getComponentHostLElementNode(component);\n    /** @type {?} */\n    var lViewData = lElementNode.view;\n    while (lViewData[PARENT]) {\n        lViewData = /** @type {?} */ ((lViewData[PARENT]));\n    }\n    return lViewData;\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChanges(component) {\n    /** @type {?} */\n    var hostNode = _getComponentHostLElementNode(component);\n    ngDevMode &&\n        assertDefined(hostNode.data, 'Component host node should be attached to an LViewData instance.');\n    detectChangesInternal(/** @type {?} */ (hostNode.data), hostNode, component);\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lViewData The view which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChangesInRootView(lViewData) {\n    tickRootContext(/** @type {?} */ (lViewData[CONTEXT]));\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function checkNoChanges(component) {\n    checkNoChangesMode = true;\n    try {\n        detectChanges(component);\n    }\n    finally {\n        checkNoChangesMode = false;\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lViewData The view which the change detection should be checked on.\n * @return {?}\n */\nexport function checkNoChangesInRootView(lViewData) {\n    checkNoChangesMode = true;\n    try {\n        detectChangesInRootView(lViewData);\n    }\n    finally {\n        checkNoChangesMode = false;\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} hostNode\n * @param {?} component\n * @return {?}\n */\nexport function detectChangesInternal(hostView, hostNode, component) {\n    /** @type {?} */\n    var oldView = enterView(hostView, hostNode);\n    /** @type {?} */\n    var hostTView = hostView[TVIEW];\n    /** @type {?} */\n    var templateFn = /** @type {?} */ ((hostTView.template));\n    /** @type {?} */\n    var viewQuery = hostTView.viewQuery;\n    try {\n        namespaceHTML();\n        createViewQuery(viewQuery, hostView[FLAGS], component);\n        templateFn(getRenderFlags(hostView), component);\n        refreshDescendantViews();\n        updateViewQuery(viewQuery, component);\n    }\n    finally {\n        leaveView(oldView);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} flags\n * @param {?} component\n * @return {?}\n */\nfunction createViewQuery(viewQuery, flags, component) {\n    if (viewQuery && (flags & 1 /* CreationMode */)) {\n        viewQuery(1 /* Create */, component);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} component\n * @return {?}\n */\nfunction updateViewQuery(viewQuery, component) {\n    if (viewQuery) {\n        viewQuery(2 /* Update */, component);\n    }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * @template T\n * @param {?} component Component to mark as dirty.\n * @return {?}\n */\nexport function markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    /** @type {?} */\n    var lElementNode = _getComponentHostLElementNode(component);\n    markViewDirty(lElementNode.view);\n}\n/** *\n * A special value which designates that a value has not changed.\n  @type {?} */\nexport var NO_CHANGE = /** @type {?} */ ({});\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nexport function bind(value) {\n    return bindingUpdated(viewData[BINDING_INDEX]++, value) ? value : NO_CHANGE;\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nexport function interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    /** @type {?} */\n    var different = false;\n    for (var i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(viewData[BINDING_INDEX]++, values[i]) && (different = true);\n    }\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var content = values[0];\n    for (var i = 1; i < values.length; i += 2) {\n        content += stringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nexport function interpolation1(prefix, v0, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated(viewData[BINDING_INDEX]++, v0);\n    return different ? prefix + stringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated2(viewData[BINDING_INDEX], v0, v1);\n    viewData[BINDING_INDEX] += 2;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated3(viewData[BINDING_INDEX], v0, v1, v2);\n    viewData[BINDING_INDEX] += 3;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    viewData[BINDING_INDEX] += 4;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) +\n            suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated(viewData[BINDING_INDEX] + 4, v4) || different;\n    viewData[BINDING_INDEX] += 5;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated2(viewData[BINDING_INDEX] + 4, v4, v5) || different;\n    viewData[BINDING_INDEX] += 6;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated3(viewData[BINDING_INDEX] + 4, v4, v5, v6) || different;\n    viewData[BINDING_INDEX] += 7;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated4(viewData[BINDING_INDEX] + 4, v4, v5, v6, v7) || different;\n    viewData[BINDING_INDEX] += 8;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + i6 + stringify(v7) + suffix :\n        NO_CHANGE;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nexport function store(index, value) {\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n    }\n    viewData[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n * @return {?}\n */\nexport function reference(index) {\n    return loadInternal(index, contextViewData);\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = /** @type {?} */ ((currentView[DECLARATION_VIEW]));\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Retrieves a value from the `directives` array.\n * @template T\n * @param {?} index\n * @return {?}\n */\nexport function loadDirective(index) {\n    ngDevMode && assertDefined(directives, 'Directives array should be defined if reading a dir.');\n    ngDevMode && assertDataInRange(index, /** @type {?} */ ((directives)));\n    return /** @type {?} */ ((directives))[index];\n}\n/**\n * @template T\n * @param {?} queryListIdx\n * @return {?}\n */\nexport function loadQueryList(queryListIdx) {\n    ngDevMode && assertDefined(viewData[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n    ngDevMode && assertDataInRange(queryListIdx, /** @type {?} */ ((viewData[CONTENT_QUERIES])));\n    return /** @type {?} */ ((viewData[CONTENT_QUERIES]))[queryListIdx];\n}\n/**\n * Retrieves a value from current `viewData`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nexport function load(index) {\n    return loadInternal(index, viewData);\n}\n/**\n * @param {?} index\n * @return {?}\n */\nexport function loadElement(index) {\n    return loadElementInternal(index, viewData);\n}\n/**\n * Gets the current binding value.\n * @param {?} bindingIndex\n * @return {?}\n */\nexport function getBinding(bindingIndex) {\n    ngDevMode && assertDataInRange(viewData[bindingIndex]);\n    ngDevMode &&\n        assertNotEqual(viewData[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return viewData[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function bindingUpdated(bindingIndex, value) {\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode && assertLessThan(bindingIndex, viewData.length, \"Slot should have been initialized to NO_CHANGE\");\n    if (viewData[bindingIndex] === NO_CHANGE) {\n        viewData[bindingIndex] = value;\n    }\n    else if (isDifferent(viewData[bindingIndex], value, checkNoChangesMode)) {\n        throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, viewData[bindingIndex], value);\n        viewData[bindingIndex] = value;\n    }\n    else {\n        return false;\n    }\n    return true;\n}\n/**\n * Updates binding and returns the value.\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function updateBinding(bindingIndex, value) {\n    return viewData[bindingIndex] = value;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nexport function bindingUpdated2(bindingIndex, exp1, exp2) {\n    /** @type {?} */\n    var different = bindingUpdated(bindingIndex, exp1);\n    return bindingUpdated(bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nexport function bindingUpdated3(bindingIndex, exp1, exp2, exp3) {\n    /** @type {?} */\n    var different = bindingUpdated2(bindingIndex, exp1, exp2);\n    return bindingUpdated(bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nexport function bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4) {\n    /** @type {?} */\n    var different = bindingUpdated2(bindingIndex, exp1, exp2);\n    return bindingUpdated2(bindingIndex + 2, exp3, exp4) || different;\n}\n/**\n * @return {?}\n */\nexport function getTView() {\n    return tView;\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n * @template Q\n * @param {?} queryList\n * @return {?}\n */\nexport function registerContentQuery(queryList) {\n    /** @type {?} */\n    var savedContentQueriesLength = (viewData[CONTENT_QUERIES] || (viewData[CONTENT_QUERIES] = [])).push(queryList);\n    if (firstTemplatePass) {\n        /** @type {?} */\n        var currentDirectiveIndex = /** @type {?} */ ((directives)).length - 1;\n        /** @type {?} */\n        var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        /** @type {?} */\n        var lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 2] : -1;\n        if (currentDirectiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(currentDirectiveIndex, savedContentQueriesLength - 1);\n        }\n    }\n}\n/**\n * @return {?}\n */\nexport function assertPreviousIsParent() {\n    assertEqual(isParent, true, 'previousOrParentNode should be a parent');\n}\n/**\n * @return {?}\n */\nfunction assertHasParent() {\n    assertDefined(getParentLNode(previousOrParentNode), 'previousOrParentNode should have a parent');\n}\n/**\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nfunction assertDataInRange(index, arr) {\n    if (arr == null)\n        arr = viewData;\n    assertDataInRangeInternal(index, arr || viewData);\n}\n/**\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nfunction assertDataNext(index, arr) {\n    if (arr == null)\n        arr = viewData;\n    assertEqual(arr.length, index, \"index \" + index + \" expected to be at the end of arr (length \" + arr.length + \")\");\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function _getComponentHostLElementNode(component) {\n    ngDevMode && assertDefined(component, 'expecting component got null');\n    /** @type {?} */\n    var lElementNode = /** @type {?} */ ((/** @type {?} */ (component))[NG_HOST_SYMBOL]);\n    ngDevMode && assertDefined(component, 'object is not a component');\n    return lElementNode;\n}\n/** @type {?} */\nexport var CLEAN_PROMISE = _CLEAN_PROMISE;\n//# sourceMappingURL=instructions.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Called when directives inject each other (creating a circular dependency)\n * @param {?} token\n * @return {?}\n */\nexport function throwCyclicDependencyError(token) {\n    throw new Error(\"Cannot instantiate cyclic dependency! \" + token);\n}\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nexport function throwMultipleComponentError(tNode) {\n    throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} checkNoChangesMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nexport function throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, oldValue, currValue) {\n    if (checkNoChangesMode) {\n        /** @type {?} */\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (creationMode) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        // TODO: include debug context\n        throw new Error(msg);\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertComponentType, assertDefined } from './assert';\nimport { queueInitHooks, queueLifecycleHooks } from './hooks';\nimport { CLEAN_PROMISE, _getComponentHostLElementNode, baseDirectiveCreate, createLViewData, createTView, detectChangesInternal, enterView, executeInitAndContentHooks, getRootView, hostElement, initChangeDetectorIfExisting, leaveView, locateHostElement, setHostBindings, queueHostBindingForCheck, } from './instructions';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { INJECTOR, CONTEXT, TVIEW } from './interfaces/view';\nimport { stringify } from './util';\n/**\n * Options that control how the component should be bootstrapped.\n * @record\n */\nexport function CreateComponentOptions() { }\n/**\n * Which renderer factory to use.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.rendererFactory;\n/**\n * A custom sanitizer instance\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.sanitizer;\n/**\n * Host element on which the component will be bootstrapped. If not specified,\n * the component definition's `tag` is used to query the existing DOM for the\n * element to bootstrap.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.host;\n/**\n * Module injector for the component. If unspecified, the injector will be NULL_INJECTOR.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.injector;\n/**\n * List of features to be applied to the created component. Features are simply\n * functions that decorate a component with a certain behavior.\n *\n * Typically, the features in this list are features that cannot be added to the\n * other features list in the component definition because they rely on other factors.\n *\n * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n * to root components in a tree-shakable way. It cannot be added to the component\n * features list because there's no way of knowing when the component will be used as\n * a root component.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.hostFeatures;\n/**\n * A function which is used to schedule change detection work in the future.\n *\n * When marking components as dirty, it is necessary to schedule the work of\n * change detection in the future. This is done to coalesce multiple\n * {\\@link markDirty} calls into a single changed detection processing.\n *\n * The default value of the scheduler is the `requestAnimationFrame` function.\n *\n * It is also useful to override this function for testing purposes.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.scheduler;\n/** @type {?} */\nexport var NULL_INJECTOR = {\n    get: function (token, notFoundValue) {\n        throw new Error('NullInjector: Not found: ' + stringify(token));\n    }\n};\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nexport function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\n    if (opts === void 0) { opts = {}; }\n    ngDevMode && assertComponentType(componentType);\n    /** @type {?} */\n    var rendererFactory = opts.rendererFactory || domRendererFactory3;\n    /** @type {?} */\n    var sanitizer = opts.sanitizer || null;\n    /** @type {?} */\n    var componentDef = /** @type {?} */ ((/** @type {?} */ (componentType)).ngComponentDef);\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    /** @type {?} */\n    var componentTag = /** @type {?} */ (((/** @type {?} */ ((componentDef.selectors))[0]))[0]);\n    /** @type {?} */\n    var hostNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    /** @type {?} */\n    var rootContext = createRootContext(opts.scheduler || requestAnimationFrame.bind(window));\n    /** @type {?} */\n    var rootView = createLViewData(rendererFactory.createRenderer(hostNode, componentDef), createTView(-1, null, 1, 0, null, null, null), rootContext, componentDef.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */);\n    rootView[INJECTOR] = opts.injector || null;\n    /** @type {?} */\n    var oldView = enterView(rootView, /** @type {?} */ ((null)));\n    /** @type {?} */\n    var elementNode;\n    /** @type {?} */\n    var component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        // Create element node at index 0 in data array\n        elementNode = hostElement(componentTag, hostNode, componentDef, sanitizer);\n        // Create directive instance with factory() and store at index 0 in directives array\n        component = baseDirectiveCreate(0, /** @type {?} */ (componentDef.factory()), componentDef);\n        if (componentDef.hostBindings) {\n            queueHostBindingForCheck(0, componentDef.hostVars);\n        }\n        rootContext.components.push(component);\n        (/** @type {?} */ (elementNode.data))[CONTEXT] = component;\n        initChangeDetectorIfExisting(elementNode.nodeInjector, component, /** @type {?} */ ((elementNode.data)));\n        opts.hostFeatures && opts.hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n        executeInitAndContentHooks();\n        setHostBindings(rootView[TVIEW].hostBindings);\n        detectChangesInternal(/** @type {?} */ (elementNode.data), elementNode, component);\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * @param {?} scheduler\n * @return {?}\n */\nexport function createRootContext(scheduler) {\n    return {\n        components: [],\n        scheduler: scheduler,\n        clean: CLEAN_PROMISE,\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nexport function LifecycleHooksFeature(component, def) {\n    /** @type {?} */\n    var elementNode = _getComponentHostLElementNode(component);\n    /** @type {?} */\n    var tView = elementNode.view[TVIEW];\n    queueInitHooks(0, def.onInit, def.doCheck, tView);\n    queueLifecycleHooks(elementNode.tNode.flags, tView);\n}\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nfunction getRootContext(component) {\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (getRootView(component)[CONTEXT]);\n    ngDevMode && assertDefined(rootContext, 'rootContext');\n    return rootContext;\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @template T\n * @param {?} component Component for which the host element should be retrieved.\n * @return {?}\n */\nexport function getHostElement(component) {\n    return /** @type {?} */ (_getComponentHostLElementNode(component).native);\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param {?} component The component to return the content text for.\n * @return {?}\n */\nexport function getRenderedText(component) {\n    /** @type {?} */\n    var hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component) {\n    return getRootContext(component).clean;\n}\n//# sourceMappingURL=component.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { ViewEncapsulation } from '../metadata/view';\n/** @type {?} */\nvar EMPTY = {};\n/** @type {?} */\nvar EMPTY_ARRAY = [];\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    Object.freeze(EMPTY);\n    Object.freeze(EMPTY_ARRAY);\n}\n/** @type {?} */\nvar _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nexport function defineComponent(componentDefinition) {\n    /** @type {?} */\n    var type = componentDefinition.type;\n    /** @type {?} */\n    var pipeTypes = /** @type {?} */ ((componentDefinition.pipes));\n    /** @type {?} */\n    var directiveTypes = /** @type {?} */ ((componentDefinition.directives));\n    /** @type {?} */\n    var declaredInputs = /** @type {?} */ ({});\n    /** @type {?} */\n    var encapsulation = componentDefinition.encapsulation || ViewEncapsulation.Emulated;\n    /** @type {?} */\n    var styles = componentDefinition.styles || EMPTY_ARRAY;\n    /** @type {?} */\n    var def = {\n        type: type,\n        diPublic: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        hostVars: componentDefinition.hostVars || 0,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || /** @type {?} */ ((null)),\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        contentQueriesRefresh: componentDefinition.contentQueriesRefresh || null,\n        attributes: componentDefinition.attributes || null,\n        inputs: invertObject(componentDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(componentDefinition.outputs),\n        exportAs: componentDefinition.exportAs || null,\n        onInit: type.prototype.ngOnInit || null,\n        doCheck: type.prototype.ngDoCheck || null,\n        afterContentInit: type.prototype.ngAfterContentInit || null,\n        afterContentChecked: type.prototype.ngAfterContentChecked || null,\n        afterViewInit: type.prototype.ngAfterViewInit || null,\n        afterViewChecked: type.prototype.ngAfterViewChecked || null,\n        onDestroy: type.prototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: directiveTypes ?\n            function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef); } :\n            null,\n        pipeDefs: pipeTypes ?\n            function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n            null,\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: componentDefinition.data || EMPTY,\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: encapsulation,\n        providers: EMPTY_ARRAY,\n        viewProviders: EMPTY_ARRAY,\n        id: \"c\" + _renderCompCount++, styles: styles,\n    };\n    /** @type {?} */\n    var feature = componentDefinition.features;\n    feature && feature.forEach(function (fn) { return fn(def); });\n    return /** @type {?} */ (def);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractDirectiveDef(type) {\n    /** @type {?} */\n    var def = type.ngComponentDef || type.ngDirectiveDef;\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n    }\n    return def;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractPipeDef(type) {\n    /** @type {?} */\n    var def = type.ngPipeDef;\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n    }\n    return def;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nexport function defineNgModule(def) {\n    /** @type {?} */\n    var res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY,\n        declarations: def.declarations || EMPTY_ARRAY,\n        imports: def.imports || EMPTY_ARRAY,\n        exports: def.exports || EMPTY_ARRAY,\n        transitiveCompileScopes: null,\n    };\n    return /** @type {?} */ (res);\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName')\n *   propName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   a0: 'propName1',\n *   b1: ['publicName', 'propName2'],\n * }\n * ```\n *\n * becomes\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'publicName': 'b1'\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in:\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'propName2': 'b1'\n * }\n * ```\n *\n * @param {?} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY;\n    /** @type {?} */\n    var newLookup = {};\n    for (var minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            /** @type {?} */\n            var publicName = obj[minifiedKey];\n            /** @type {?} */\n            var declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[declaredName] = minifiedKey);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @template T\n * @param {?} baseDefinition The base definition parameters\n * @return {?}\n */\nexport function defineBase(baseDefinition) {\n    /** @type {?} */\n    var declaredInputs = /** @type {?} */ ({});\n    return {\n        inputs: invertObject(baseDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(baseDefinition.outputs),\n    };\n}\n/** *\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n  @type {?} */\nexport var defineDirective = /** @type {?} */ ((defineComponent));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n * @return {?}\n */\nexport function definePipe(pipeDef) {\n    return /** @type {?} */ ((/** @type {?} */ ({\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    })));\n}\n//# sourceMappingURL=definition.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @param {?} target\n * @return {?}\n */\nexport function getClosureSafeProperty(objWithPropertyToExtract, target) {\n    for (var key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === target) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param {?} target The target to set properties on\n * @param {?} source The source of the property keys and values to set\n * @return {?}\n */\nexport function fillProperties(target, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n//# sourceMappingURL=property.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { fillProperties } from '../../util/property';\n/**\n * Determines if a definition is a {\\@link ComponentDefInternal} or a {\\@link DirectiveDefInternal}\n * @template T\n * @param {?} definition The definition to examine\n * @return {?}\n */\nfunction isComponentDef(definition) {\n    /** @type {?} */\n    var def = /** @type {?} */ (definition);\n    return typeof def.template === 'function';\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param {?} definition The definition that is a SubClass of another directive of component\n * @return {?}\n */\nexport function InheritDefinitionFeature(definition) {\n    /** @type {?} */\n    var superType = getSuperType(definition.type);\n    var _loop_1 = function () {\n        /** @type {?} */\n        var superDef = undefined;\n        if (isComponentDef(definition)) {\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            superDef = superType.ngDirectiveDef;\n        }\n        /** @type {?} */\n        var baseDef = (/** @type {?} */ (superType)).ngBaseDef;\n        if (baseDef) {\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            /** @type {?} */\n            var prevHostBindings_1 = definition.hostBindings;\n            /** @type {?} */\n            var superHostBindings_1 = superDef.hostBindings;\n            if (superHostBindings_1) {\n                if (prevHostBindings_1) {\n                    definition.hostBindings = function (directiveIndex, elementIndex) {\n                        superHostBindings_1(directiveIndex, elementIndex);\n                        prevHostBindings_1(directiveIndex, elementIndex);\n                    };\n                }\n                else {\n                    definition.hostBindings = superHostBindings_1;\n                }\n            }\n            // Merge View Queries\n            if (isComponentDef(definition) && isComponentDef(superDef)) {\n                /** @type {?} */\n                var prevViewQuery_1 = definition.viewQuery;\n                /** @type {?} */\n                var superViewQuery_1 = superDef.viewQuery;\n                if (superViewQuery_1) {\n                    if (prevViewQuery_1) {\n                        definition.viewQuery = function (rf, ctx) {\n                            superViewQuery_1(rf, ctx);\n                            prevViewQuery_1(rf, ctx);\n                        };\n                    }\n                    else {\n                        definition.viewQuery = superViewQuery_1;\n                    }\n                }\n            }\n            /** @type {?} */\n            var prevContentQueries_1 = definition.contentQueries;\n            /** @type {?} */\n            var superContentQueries_1 = superDef.contentQueries;\n            if (superContentQueries_1) {\n                if (prevContentQueries_1) {\n                    definition.contentQueries = function () {\n                        superContentQueries_1();\n                        prevContentQueries_1();\n                    };\n                }\n                else {\n                    definition.contentQueries = superContentQueries_1;\n                }\n            }\n            /** @type {?} */\n            var prevContentQueriesRefresh_1 = definition.contentQueriesRefresh;\n            /** @type {?} */\n            var superContentQueriesRefresh_1 = superDef.contentQueriesRefresh;\n            if (superContentQueriesRefresh_1) {\n                if (prevContentQueriesRefresh_1) {\n                    definition.contentQueriesRefresh = function (directiveIndex, queryIndex) {\n                        superContentQueriesRefresh_1(directiveIndex, queryIndex);\n                        prevContentQueriesRefresh_1(directiveIndex, queryIndex);\n                    };\n                }\n                else {\n                    definition.contentQueriesRefresh = superContentQueriesRefresh_1;\n                }\n            }\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            /** @type {?} */\n            var features = superDef.features;\n            if (features) {\n                for (var _i = 0, features_1 = features; _i < features_1.length; _i++) {\n                    var feature = features_1[_i];\n                    if (feature && feature !== InheritDefinitionFeature) {\n                        (/** @type {?} */ (feature))(definition);\n                    }\n                }\n            }\n            return \"break\";\n        }\n        else {\n            /** @type {?} */\n            var superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.afterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.afterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.afterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.afterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.doCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.onDestroy;\n                definition.onInit = definition.onInit || superPrototype.onInit;\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    };\n    while (superType) {\n        var state_1 = _loop_1();\n        if (state_1 === \"break\")\n            break;\n    }\n}\n//# sourceMappingURL=inherit_definition_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SimpleChange } from '../../change_detection/change_detection_util';\n/** @type {?} */\nvar PRIVATE_PREFIX = '__ngOnChanges_';\n/** @typedef {?} */\nvar OnChangesExpando;\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n * @template T\n * @param {?} definition\n * @return {?}\n */\nexport function NgOnChangesFeature(definition) {\n    /** @type {?} */\n    var declaredToMinifiedInputs = definition.declaredInputs;\n    /** @type {?} */\n    var proto = definition.type.prototype;\n    var _loop_1 = function (declaredName) {\n        if (declaredToMinifiedInputs.hasOwnProperty(declaredName)) {\n            /** @type {?} */\n            var minifiedKey = declaredToMinifiedInputs[declaredName];\n            /** @type {?} */\n            var privateMinKey_1 = PRIVATE_PREFIX + minifiedKey;\n            /** @type {?} */\n            var originalProperty = undefined;\n            /** @type {?} */\n            var checkProto = proto;\n            while (!originalProperty && checkProto &&\n                Object.getPrototypeOf(checkProto) !== Object.getPrototypeOf(Object.prototype)) {\n                originalProperty = Object.getOwnPropertyDescriptor(checkProto, minifiedKey);\n                checkProto = Object.getPrototypeOf(checkProto);\n            }\n            /** @type {?} */\n            var getter = originalProperty && originalProperty.get;\n            /** @type {?} */\n            var setter_1 = originalProperty && originalProperty.set;\n            // create a getter and setter for property\n            Object.defineProperty(proto, minifiedKey, {\n                get: getter ||\n                    (setter_1 ? undefined : function () { return this[privateMinKey_1]; }),\n                set: /**\n                 * @template T\n                 * @this {?}\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) {\n                    /** @type {?} */\n                    var simpleChanges = this[PRIVATE_PREFIX];\n                    if (!simpleChanges) {\n                        simpleChanges = {};\n                        // Place where we will store SimpleChanges if there is a change\n                        Object.defineProperty(this, PRIVATE_PREFIX, { value: simpleChanges, writable: true });\n                    }\n                    /** @type {?} */\n                    var isFirstChange = !this.hasOwnProperty(privateMinKey_1);\n                    /** @type {?} */\n                    var currentChange = simpleChanges[declaredName];\n                    if (currentChange) {\n                        currentChange.currentValue = value;\n                    }\n                    else {\n                        simpleChanges[declaredName] =\n                            new SimpleChange(this[privateMinKey_1], value, isFirstChange);\n                    }\n                    if (isFirstChange) {\n                        // Create a place where the actual value will be stored and make it non-enumerable\n                        Object.defineProperty(this, privateMinKey_1, { value: value, writable: true });\n                    }\n                    else {\n                        this[privateMinKey_1] = value;\n                    }\n                    if (setter_1)\n                        setter_1.call(this, value);\n                },\n                // Make the property configurable in dev mode to allow overriding in tests\n                configurable: !!ngDevMode\n            });\n        }\n    };\n    for (var declaredName in declaredToMinifiedInputs) {\n        _loop_1(declaredName);\n    }\n    // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n    // so the call order is changes-init-check in creation mode. In subsequent\n    // change detection runs, only the check wrapper will be called.\n    if (definition.onInit != null) {\n        definition.onInit = onChangesWrapper(definition.onInit);\n    }\n    definition.doCheck = onChangesWrapper(definition.doCheck);\n}\n/**\n * @param {?} delegateHook\n * @return {?}\n */\nfunction onChangesWrapper(delegateHook) {\n    return function () {\n        /** @type {?} */\n        var simpleChanges = this[PRIVATE_PREFIX];\n        if (simpleChanges != null) {\n            this.ngOnChanges(simpleChanges);\n            this[PRIVATE_PREFIX] = null;\n        }\n        if (delegateHook)\n            delegateHook.apply(this);\n    };\n}\n//# sourceMappingURL=ng_onchanges_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n *\n * @template T\n */\nvar /**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n *\n * @template T\n */\nElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    return ElementRef;\n}());\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n *\n * @template T\n */\nexport { ElementRef };\nif (false) {\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {\\@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     *\n     * @type {?}\n     */\n    ElementRef.prototype.nativeElement;\n}\n//# sourceMappingURL=element_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nvar /**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nRenderComponentType = /** @class */ (function () {\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n    return RenderComponentType;\n}());\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nexport { RenderComponentType };\nif (false) {\n    /** @type {?} */\n    RenderComponentType.prototype.id;\n    /** @type {?} */\n    RenderComponentType.prototype.templateUrl;\n    /** @type {?} */\n    RenderComponentType.prototype.slotCount;\n    /** @type {?} */\n    RenderComponentType.prototype.encapsulation;\n    /** @type {?} */\n    RenderComponentType.prototype.styles;\n    /** @type {?} */\n    RenderComponentType.prototype.animations;\n}\n/**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nvar /**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nRenderDebugInfo = /** @class */ (function () {\n    function RenderDebugInfo() {\n    }\n    return RenderDebugInfo;\n}());\n/**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nexport { RenderDebugInfo };\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.source = function () { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @record\n */\nexport function DirectRenderer() { }\n/** @type {?} */\nDirectRenderer.prototype.remove;\n/** @type {?} */\nDirectRenderer.prototype.appendChild;\n/** @type {?} */\nDirectRenderer.prototype.insertBefore;\n/** @type {?} */\nDirectRenderer.prototype.nextSibling;\n/** @type {?} */\nDirectRenderer.prototype.parentElement;\n/**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nvar /**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nRenderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    return Renderer;\n}());\n/**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nexport { Renderer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @return {?}\n     */\n    Renderer.prototype.createViewRoot = function (hostElement) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} value\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.detachView = function (viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listen = function (renderElement, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listenGlobal = function (target, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} attributeName\n     * @param {?} attributeValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?=} args\n     * @return {?}\n     */\n    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    Renderer.prototype.setText = function (renderNode, text) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n}\n/** @type {?} */\nexport var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nvar /**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nRootRenderer = /** @class */ (function () {\n    function RootRenderer() {\n    }\n    return RootRenderer;\n}());\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nexport { RootRenderer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} componentType\n     * @return {?}\n     */\n    RootRenderer.prototype.renderComponent = function (componentType) { };\n}\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n * \\@experimental\n * @record\n */\nexport function RendererType2() { }\n/**\n * A unique identifying string for the new renderer, used when creating\n * unique styles for encapsulation.\n * @type {?}\n */\nRendererType2.prototype.id;\n/**\n * The view encapsulation type, which determines how styles are applied to\n * DOM elements. One of\n * - `Emulated` (default): Emulate native scoping of styles.\n * - `Native`: Use the native encapsulation mechanism of the renderer.\n * - `ShadowDom`: Use modern [Shadow\n * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n * create a ShadowRoot for component's host element.\n * - `None`: Do not provide any template or style encapsulation.\n * @type {?}\n */\nRendererType2.prototype.encapsulation;\n/**\n * Defines CSS styles to be stored on a renderer instance.\n * @type {?}\n */\nRendererType2.prototype.styles;\n/**\n * Defines arbitrary developer-defined data to be stored on a renderer instance.\n * This is useful for renderers that delegate to other renderers.\n * @type {?}\n */\nRendererType2.prototype.data;\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@experimental\n * @abstract\n */\nRendererFactory2 = /** @class */ (function () {\n    function RendererFactory2() {\n    }\n    return RendererFactory2;\n}());\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@experimental\n * @abstract\n */\nexport { RendererFactory2 };\nif (false) {\n    /**\n     * Creates and initializes a custom renderer for a host DOM element.\n     * @abstract\n     * @param {?} hostElement The element to render.\n     * @param {?} type The base class to implement.\n     * @return {?} The new custom renderer instance.\n     */\n    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };\n    /**\n     * A callback invoked when rendering has begun.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.begin = function () { };\n    /**\n     * A callback invoked when rendering has completed.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.end = function () { };\n    /**\n     * Use with animations test-only mode. Notifies the test when rendering has completed.\n     * @abstract\n     * @return {?} The asynchronous result of the developer-defined function.\n     */\n    RendererFactory2.prototype.whenRenderingDone = function () { };\n}\n/** @enum {number} */\nvar RendererStyleFlags2 = {\n    /**\n       * Marks a style as important.\n       */\n    Important: 1,\n    /**\n       * Marks a style as using dash case naming (this-is-dash-case).\n       */\n    DashCase: 2,\n};\nexport { RendererStyleFlags2 };\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@experimental\n * @abstract\n */\nRenderer2 = /** @class */ (function () {\n    function Renderer2() {\n    }\n    return Renderer2;\n}());\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@experimental\n * @abstract\n */\nexport { Renderer2 };\nif (false) {\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?}\n     */\n    Renderer2.prototype.destroyNode;\n    /**\n     * Use to store arbitrary developer-defined data on a renderer instance,\n     * as an object containing key-value pairs.\n     * This is useful for renderers that delegate to other renderers.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.data = function () { };\n    /**\n     * Implement this callback to destroy the renderer or the host element.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.destroy = function () { };\n    /**\n     * Implement this callback to create an instance of the host element.\n     * @abstract\n     * @param {?} name An identifying name for the new element, unique within the namespace.\n     * @param {?=} namespace The namespace for the new element.\n     * @return {?} The new element.\n     */\n    Renderer2.prototype.createElement = function (name, namespace) { };\n    /**\n     * Implement this callback to add a comment to the DOM of the host element.\n     * @abstract\n     * @param {?} value The comment text.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createComment = function (value) { };\n    /**\n     * Implement this callback to add text to the DOM of the host element.\n     * @abstract\n     * @param {?} value The text string.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createText = function (value) { };\n    /**\n     * Appends a child to a given parent node in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child node.\n     * @return {?}\n     */\n    Renderer2.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * Implement this callback to insert a child node at a given position in a parent node\n     * in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child nodes.\n     * @param {?} refChild The existing child node that should precede the new node.\n     * @return {?}\n     */\n    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * Implement this callback to remove a child node from the host element's DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} oldChild The child node to remove.\n     * @return {?}\n     */\n    Renderer2.prototype.removeChild = function (parent, oldChild) { };\n    /**\n     * Implement this callback to prepare an element to be bootstrapped\n     * as a root element, and return the element instance.\n     * @abstract\n     * @param {?} selectorOrNode The DOM element.\n     * @param {?=} preserveContent Whether the contents of the root element\n     * should be preserved, or cleared upon bootstrap (default behavior).\n     * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n     * content projection via `<slot>` elements.\n     * @return {?} The root element.\n     */\n    Renderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) { };\n    /**\n     * Implement this callback to get the parent of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node The child node to query.\n     * @return {?} The parent node, or null if there is no parent.\n     * For WebWorkers, always returns true.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.parentNode = function (node) { };\n    /**\n     * Implement this callback to get the next sibling node of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node\n     * @return {?} The sibling node, or null if there is no sibling.\n     * For WebWorkers, always returns a value.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.nextSibling = function (node) { };\n    /**\n     * Implement this callback to set an attribute value for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?} value The new value.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * Implement this callback to remove an attribute from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * Implement this callback to add a class to an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.addClass = function (el, name) { };\n    /**\n     * Implement this callback to remove a class from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.removeClass = function (el, name) { };\n    /**\n     * Implement this callback to set a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?} value The new value.\n     * @param {?=} flags Flags for style variations. No flags are set by default.\n     * @return {?}\n     */\n    Renderer2.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * Implement this callback to remove the value from a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?=} flags Flags for style variations to remove, if set. ???\n     * @return {?}\n     */\n    Renderer2.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * Implement this callback to set the value of a property of an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The property name.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setProperty = function (el, name, value) { };\n    /**\n     * Implement this callback to set the value of a node in the host element.\n     * @abstract\n     * @param {?} node The node.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setValue = function (node, value) { };\n    /**\n     * Implement this callback to start an event listener.\n     * @abstract\n     * @param {?} target The context in which to listen for events. Can be\n     * the entire window or document, the body of the document, or a specific\n     * DOM element.\n     * @param {?} eventName The event to listen for.\n     * @param {?} callback A handler function to invoke when the event occurs.\n     * @return {?} An \"unlisten\" function for disposing of this handler.\n     */\n    Renderer2.prototype.listen = function (target, eventName, callback) { };\n}\n//# sourceMappingURL=api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { stringify } from '../util';\nimport { ComponentFactory } from './component_factory';\n/**\n * @param {?} component\n * @return {?}\n */\nexport function noComponentFactoryError(component) {\n    /** @type {?} */\n    var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n    (/** @type {?} */ (error))[ERROR_COMPONENT] = component;\n    return error;\n}\n/** @type {?} */\nvar ERROR_COMPONENT = 'ngComponent';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getComponent(error) {\n    return (/** @type {?} */ (error))[ERROR_COMPONENT];\n}\nvar _NullComponentFactoryResolver = /** @class */ (function () {\n    function _NullComponentFactoryResolver() {\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        throw noComponentFactoryError(component);\n    };\n    return _NullComponentFactoryResolver;\n}());\n/**\n * @abstract\n */\nvar ComponentFactoryResolver = /** @class */ (function () {\n    function ComponentFactoryResolver() {\n    }\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n    return ComponentFactoryResolver;\n}());\nexport { ComponentFactoryResolver };\nif (false) {\n    /** @type {?} */\n    ComponentFactoryResolver.NULL;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n}\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (var i = 0; i < factories.length; i++) {\n            /** @type {?} */\n            var factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        /** @type {?} */\n        var factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    };\n    return CodegenComponentFactoryResolver;\n}());\nexport { CodegenComponentFactoryResolver };\nif (false) {\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._factories;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._parent;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._ngModule;\n}\n/**\n * @template C\n */\nvar /**\n * @template C\n */\nComponentFactoryBoundToModule = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryBoundToModule, _super);\n    function ComponentFactoryBoundToModule(factory, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.factory = factory;\n        _this.ngModule = ngModule;\n        _this.selector = factory.selector;\n        _this.componentType = factory.componentType;\n        _this.ngContentSelectors = factory.ngContentSelectors;\n        _this.inputs = factory.inputs;\n        _this.outputs = factory.outputs;\n        return _this;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactoryBoundToModule.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    };\n    return ComponentFactoryBoundToModule;\n}(ComponentFactory));\n/**\n * @template C\n */\nexport { ComponentFactoryBoundToModule };\nif (false) {\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.selector;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.componentType;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.inputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.outputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.factory;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngModule;\n}\n//# sourceMappingURL=component_factory_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { checkNoChanges, checkNoChangesInRootView, detectChanges, detectChangesInRootView, getRendererFactory, markViewDirty, storeCleanupFn, viewAttached } from './instructions';\nimport { FLAGS } from './interfaces/view';\nimport { destroyLView } from './node_manipulation';\n/**\n * @record\n */\nexport function viewEngine_ChangeDetectorRef_interface() { }\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nViewRef = /** @class */ (function () {\n    function ViewRef(_view, context) {\n        this._view = _view;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * \\@internal\n         */\n        this._lViewNode = null;\n        this.context = /** @type {?} */ ((context));\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} view\n     * @param {?} context\n     * @return {?}\n     */\n    ViewRef.prototype._setComponentContext = /**\n     * \\@internal\n     * @param {?} view\n     * @param {?} context\n     * @return {?}\n     */\n    function (view, context) {\n        this._view = view;\n        this.context = context;\n    };\n    Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return (this._view[FLAGS] & 32 /* Destroyed */) === 32 /* Destroyed */;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._viewContainerRef && viewAttached(this._view)) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._view);\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { storeCleanupFn(this._view, callback); };\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.markForCheck = /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { markViewDirty(this._view); };\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.detach = /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view[FLAGS] &= ~8 /* Attached */; };\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.reattach = /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view[FLAGS] |= 8 /* Attached */; };\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    ViewRef.prototype.detectChanges = /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var rendererFactory = getRendererFactory();\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        detectChanges(this.context);\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n    };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    ViewRef.prototype.checkNoChanges = /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    function () { checkNoChanges(this.context); };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) { this._viewContainerRef = vcRef; };\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () { this._appRef = null; };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) { this._appRef = appRef; };\n    return ViewRef;\n}());\n/**\n * @template T\n */\nexport { ViewRef };\nif (false) {\n    /** @type {?} */\n    ViewRef.prototype._appRef;\n    /** @type {?} */\n    ViewRef.prototype._viewContainerRef;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._lViewNode;\n    /** @type {?} */\n    ViewRef.prototype.context;\n    /** @type {?} */\n    ViewRef.prototype.rootNodes;\n    /** @type {?} */\n    ViewRef.prototype._view;\n}\n/**\n * \\@internal\n * @template T\n */\nvar /**\n * \\@internal\n * @template T\n */\nRootViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(RootViewRef, _super);\n    function RootViewRef(_view) {\n        var _this = _super.call(this, _view, null) || this;\n        _this._view = _view;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RootViewRef.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () { detectChangesInRootView(this._view); };\n    /**\n     * @return {?}\n     */\n    RootViewRef.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { checkNoChangesInRootView(this._view); };\n    return RootViewRef;\n}(ViewRef));\n/**\n * \\@internal\n * @template T\n */\nexport { RootViewRef };\nif (false) {\n    /** @type {?} */\n    RootViewRef.prototype._view;\n}\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { InjectionToken } from '../di/injection_token';\nimport { inject } from '../di/injector';\nimport { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { RendererFactory2 } from '../render/api';\nimport { assertComponentType, assertDefined } from './assert';\nimport { LifecycleHooksFeature, createRootContext } from './component';\nimport { adjustBlueprintForNewNode, baseDirectiveCreate, createLNode, createLViewData, createTView, elementCreate, enterView, hostElement, initChangeDetectorIfExisting, locateHostElement, queueHostBindingForCheck, renderEmbeddedTemplate, setHostBindings } from './instructions';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { CONTEXT, FLAGS, INJECTOR, TVIEW } from './interfaces/view';\nimport { RootViewRef } from './view_ref';\nvar ComponentFactoryResolver = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryResolver, _super);\n    function ComponentFactoryResolver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        ngDevMode && assertComponentType(component);\n        /** @type {?} */\n        var componentDef = (/** @type {?} */ (component)).ngComponentDef;\n        return new ComponentFactory(componentDef);\n    };\n    return ComponentFactoryResolver;\n}(viewEngine_ComponentFactoryResolver));\nexport { ComponentFactoryResolver };\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n    /** @type {?} */\n    var array = [];\n    for (var nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            /** @type {?} */\n            var minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/** *\n * Default {\\@link RootContext} for all components rendered with {\\@link renderComponent}.\n  @type {?} */\nexport var ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: function () { return createRootContext(inject(SCHEDULER)); } });\n/** *\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n  @type {?} */\nexport var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: function () {\n        /** @type {?} */\n        var useRaf = typeof requestAnimationFrame !== 'undefined' && typeof window !== 'undefined';\n        return useRaf ? requestAnimationFrame.bind(window) : setTimeout;\n    },\n});\n/** *\n * A function used to wrap the `RendererFactory2`.\n * Used in tests to change the `RendererFactory2` into a `DebugRendererFactory2`.\n  @type {?} */\nexport var WRAP_RENDERER_FACTORY2 = new InjectionToken('WRAP_RENDERER_FACTORY2');\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nvar /**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nComponentFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory, _super);\n    function ComponentFactory(componentDef) {\n        var _this = _super.call(this) || this;\n        _this.componentDef = componentDef;\n        _this.componentType = componentDef.type;\n        _this.selector = /** @type {?} */ (componentDef.selectors[0][0]);\n        _this.ngContentSelectors = [];\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return toRefArray(this.componentDef.inputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return toRefArray(this.componentDef.outputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        /** @type {?} */\n        var isInternalRootView = rootSelectorOrNode === undefined;\n        /** @type {?} */\n        var rendererFactory;\n        if (ngModule) {\n            /** @type {?} */\n            var wrapper = ngModule.injector.get(WRAP_RENDERER_FACTORY2, function (v) { return v; });\n            rendererFactory = /** @type {?} */ (wrapper(ngModule.injector.get(RendererFactory2)));\n        }\n        else {\n            rendererFactory = domRendererFactory3;\n        }\n        /** @type {?} */\n        var hostNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        /** @type {?} */\n        var componentTag = /** @type {?} */ (((/** @type {?} */ ((this.componentDef.selectors))[0]))[0]);\n        /** @type {?} */\n        var rootContext = ngModule && !isInternalRootView ?\n            ngModule.injector.get(ROOT_CONTEXT) :\n            createRootContext(requestAnimationFrame.bind(window));\n        /** @type {?} */\n        var rootView = createLViewData(rendererFactory.createRenderer(hostNode, this.componentDef), createTView(-1, null, 1, 0, null, null, null), rootContext, this.componentDef.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */);\n        rootView[INJECTOR] = ngModule && ngModule.injector || null;\n        /** @type {?} */\n        var oldView = enterView(rootView, /** @type {?} */ ((null)));\n        /** @type {?} */\n        var component;\n        /** @type {?} */\n        var elementNode;\n        try {\n            if (rendererFactory.begin)\n                rendererFactory.begin();\n            // Create element node at index 0 in data array\n            elementNode = hostElement(componentTag, hostNode, this.componentDef);\n            // Create directive instance with factory() and store at index 0 in directives array\n            component = baseDirectiveCreate(0, this.componentDef.factory(), this.componentDef);\n            if (this.componentDef.hostBindings) {\n                queueHostBindingForCheck(0, this.componentDef.hostVars);\n            }\n            rootContext.components.push(component);\n            initChangeDetectorIfExisting(elementNode.nodeInjector, component, /** @type {?} */ ((elementNode.data)));\n            (/** @type {?} */ (elementNode.data))[CONTEXT] = component;\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            LifecycleHooksFeature(component, this.componentDef);\n            setHostBindings(rootView[TVIEW].hostBindings);\n            // Transform the arrays of native nodes into a LNode structure that can be consumed by the\n            // projection instruction. This is needed to support the reprojection of these nodes.\n            if (projectableNodes) {\n                /** @type {?} */\n                var index = 0;\n                /** @type {?} */\n                var projection = elementNode.tNode.projection = [];\n                for (var i = 0; i < projectableNodes.length; i++) {\n                    /** @type {?} */\n                    var nodeList = projectableNodes[i];\n                    /** @type {?} */\n                    var firstTNode = null;\n                    /** @type {?} */\n                    var previousTNode = null;\n                    for (var j = 0; j < nodeList.length; j++) {\n                        adjustBlueprintForNewNode(rootView);\n                        /** @type {?} */\n                        var lNode = createLNode(++index, 3 /* Element */, /** @type {?} */ (nodeList[j]), null, null);\n                        if (previousTNode) {\n                            previousTNode.next = lNode.tNode;\n                        }\n                        else {\n                            firstTNode = lNode.tNode;\n                        }\n                        previousTNode = lNode.tNode;\n                    }\n                    projection.push(/** @type {?} */ ((firstTNode)));\n                }\n            }\n            // Execute the template in creation mode only, and then turn off the CreationMode flag\n            renderEmbeddedTemplate(elementNode, /** @type {?} */ ((elementNode.data))[TVIEW], component, 1 /* Create */); /** @type {?} */\n            ((elementNode.data))[FLAGS] &= ~1 /* CreationMode */;\n        }\n        finally {\n            enterView(oldView, null);\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n        /** @type {?} */\n        var componentRef = new ComponentRef(this.componentType, component, rootView, injector, /** @type {?} */ ((hostNode)));\n        if (isInternalRootView) {\n            /** @type {?} */ ((\n            // The host element of the internal root view is attached to the component's host view node\n            componentRef.hostView._lViewNode)).tNode.child = elementNode.tNode;\n        }\n        return componentRef;\n    };\n    return ComponentFactory;\n}(viewEngine_ComponentFactory));\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nexport { ComponentFactory };\nif (false) {\n    /** @type {?} */\n    ComponentFactory.prototype.selector;\n    /** @type {?} */\n    ComponentFactory.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactory.prototype.componentDef;\n}\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nvar /**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nComponentRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef, _super);\n    function ComponentRef(componentType, instance, rootView, injector, hostNode) {\n        var _this = _super.call(this) || this;\n        _this.destroyCbs = [];\n        _this.instance = instance;\n        _this.hostView = _this.changeDetectorRef = new RootViewRef(rootView);\n        _this.hostView._lViewNode = createLNode(-1, 2 /* View */, null, null, null, rootView);\n        _this.injector = injector;\n        _this.location = new viewEngine_ElementRef(hostNode);\n        _this.componentType = componentType;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ComponentRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).push(callback);\n    };\n    return ComponentRef;\n}(viewEngine_ComponentRef));\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nexport { ComponentRef };\nif (false) {\n    /** @type {?} */\n    ComponentRef.prototype.destroyCbs;\n    /** @type {?} */\n    ComponentRef.prototype.location;\n    /** @type {?} */\n    ComponentRef.prototype.injector;\n    /** @type {?} */\n    ComponentRef.prototype.instance;\n    /** @type {?} */\n    ComponentRef.prototype.hostView;\n    /** @type {?} */\n    ComponentRef.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef.prototype.componentType;\n}\n//# sourceMappingURL=component_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef as viewEngine_ChangeDetectorRef } from '../change_detection/change_detector_ref';\nimport { NullInjector, inject, setCurrentInjector } from '../di/injector';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { TemplateRef as viewEngine_TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef as viewEngine_ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer2 } from '../render';\nimport { assertDefined, assertGreaterThan, assertLessThan } from './assert';\nimport { ComponentFactoryResolver } from './component_ref';\nimport { addToViewTree, assertPreviousIsParent, createEmbeddedViewNode, createLContainer, createLNodeObject, createTNode, getPreviousOrParentNode, getRenderer, isComponent, renderEmbeddedTemplate, resolveDirective } from './instructions';\nimport { VIEWS } from './interfaces/container';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { DIRECTIVES, HOST_NODE, INJECTOR, QUERIES, RENDERER, TVIEW } from './interfaces/view';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { addRemoveViewFromContainer, appendChild, detachView, getChildLNode, getParentLNode, insertView, removeView } from './node_manipulation';\nimport { ViewRef } from './view_ref';\n/** *\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n  @type {?} */\nvar NG_ELEMENT_ID = '__NG_ELEMENT_ID__';\n/** *\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n  @type {?} */\nvar BLOOM_SIZE = 256;\n/** @type {?} */\nvar BLOOM_MASK = BLOOM_SIZE - 1;\n/** *\n * Counter used to generate unique IDs for directives.\n  @type {?} */\nvar nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injector The node injector in which the directive should be registered\n * @param {?} type The directive to register\n * @return {?}\n */\nexport function bloomAdd(injector, type) {\n    /** @type {?} */\n    var id = (/** @type {?} */ (type))[NG_ELEMENT_ID];\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = (/** @type {?} */ (type))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    /** @type {?} */\n    var bloomBit = id & BLOOM_MASK;\n    /** @type {?} */\n    var mask = 1 << bloomBit;\n    /** @type {?} */\n    var b7 = bloomBit & 0x80;\n    /** @type {?} */\n    var b6 = bloomBit & 0x40;\n    /** @type {?} */\n    var b5 = bloomBit & 0x20;\n    if (b7) {\n        b6 ? (b5 ? (injector.bf7 |= mask) : (injector.bf6 |= mask)) :\n            (b5 ? (injector.bf5 |= mask) : (injector.bf4 |= mask));\n    }\n    else {\n        b6 ? (b5 ? (injector.bf3 |= mask) : (injector.bf2 |= mask)) :\n            (b5 ? (injector.bf1 |= mask) : (injector.bf0 |= mask));\n    }\n}\n/**\n * @return {?}\n */\nexport function getOrCreateNodeInjector() {\n    ngDevMode && assertPreviousIsParent();\n    return getOrCreateNodeInjectorForNode(/** @type {?} */ (getPreviousOrParentNode()));\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} node for which an injector should be retrieved / created.\n * @return {?} Node injector\n */\nexport function getOrCreateNodeInjectorForNode(node) {\n    /** @type {?} */\n    var nodeInjector = node.nodeInjector;\n    /** @type {?} */\n    var parent = getParentLNode(node);\n    /** @type {?} */\n    var parentInjector = parent && parent.nodeInjector;\n    if (nodeInjector != parentInjector) {\n        return /** @type {?} */ ((nodeInjector));\n    }\n    return node.nodeInjector = {\n        parent: parentInjector,\n        node: node,\n        bf0: 0,\n        bf1: 0,\n        bf2: 0,\n        bf3: 0,\n        bf4: 0,\n        bf5: 0,\n        bf6: 0,\n        bf7: 0,\n        cbf0: parentInjector == null ? 0 : parentInjector.cbf0 | parentInjector.bf0,\n        cbf1: parentInjector == null ? 0 : parentInjector.cbf1 | parentInjector.bf1,\n        cbf2: parentInjector == null ? 0 : parentInjector.cbf2 | parentInjector.bf2,\n        cbf3: parentInjector == null ? 0 : parentInjector.cbf3 | parentInjector.bf3,\n        cbf4: parentInjector == null ? 0 : parentInjector.cbf4 | parentInjector.bf4,\n        cbf5: parentInjector == null ? 0 : parentInjector.cbf5 | parentInjector.bf5,\n        cbf6: parentInjector == null ? 0 : parentInjector.cbf6 | parentInjector.bf6,\n        cbf7: parentInjector == null ? 0 : parentInjector.cbf7 | parentInjector.bf7,\n        templateRef: null,\n        viewContainerRef: null,\n        elementRef: null,\n        changeDetectorRef: null,\n    };\n}\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param {?} di The node injector in which a directive will be added\n * @param {?} def The definition of the directive to be made public\n * @return {?}\n */\nexport function diPublicInInjector(di, def) {\n    bloomAdd(di, def.type);\n}\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param {?} def The definition of the directive to be made public\n * @return {?}\n */\nexport function diPublic(def) {\n    diPublicInInjector(getOrCreateNodeInjector(), def);\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function directiveInject(token, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    return getOrCreateInjectable(getOrCreateNodeInjector(), token, flags);\n}\n/**\n * Creates an ElementRef and stores it on the injector.\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\n *\n * @return {?} The ElementRef instance to use\n */\nexport function injectElementRef() {\n    return getOrCreateElementRef(getOrCreateNodeInjector());\n}\n/**\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\n * exists, retrieves the existing TemplateRef.\n *\n * @template T\n * @return {?} The TemplateRef instance to use\n */\nexport function injectTemplateRef() {\n    return getOrCreateTemplateRef(getOrCreateNodeInjector());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @return {?} The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef() {\n    return getOrCreateContainerRef(getOrCreateNodeInjector());\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nexport function injectChangeDetectorRef() {\n    return getOrCreateChangeDetectorRef(getOrCreateNodeInjector(), null);\n}\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @return {?} The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver() {\n    return componentFactoryResolver;\n}\n/** @type {?} */\nvar componentFactoryResolver = new ComponentFactoryResolver();\n/**\n * @return {?}\n */\nexport function injectRenderer2() {\n    return getOrCreateRenderer2(getOrCreateNodeInjector());\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@experimental\n * @param {?} attrNameToInject\n * @return {?}\n */\nexport function injectAttribute(attrNameToInject) {\n    /** @type {?} */\n    var lNode = getPreviousOrParentNode();\n    ngDevMode && assertNodeOfPossibleTypes(lNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    /** @type {?} */\n    var tNode = lNode.tNode;\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    /** @type {?} */\n    var attrs = tNode.attrs;\n    if (attrs) {\n        for (var i = 0; i < attrs.length; i = i + 2) {\n            /** @type {?} */\n            var attrName = attrs[i];\n            if (attrName === 1 /* SelectOnly */)\n                break;\n            if (attrName == attrNameToInject) {\n                return /** @type {?} */ (attrs[i + 1]);\n            }\n        }\n    }\n    return undefined;\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n * Or, if it already exists, retrieves the existing instance.\n *\n * @param {?} di\n * @param {?} context\n * @return {?} The ChangeDetectorRef to use\n */\nexport function getOrCreateChangeDetectorRef(di, context) {\n    if (di.changeDetectorRef)\n        return di.changeDetectorRef;\n    /** @type {?} */\n    var currentNode = di.node;\n    if (isComponent(currentNode.tNode)) {\n        return di.changeDetectorRef = new ViewRef(/** @type {?} */ (currentNode.data), context);\n    }\n    else if (currentNode.tNode.type === 3 /* Element */) {\n        return di.changeDetectorRef = getOrCreateHostChangeDetector(currentNode.view[HOST_NODE]);\n    }\n    return /** @type {?} */ ((null));\n}\n/**\n * Gets or creates ChangeDetectorRef for the closest host component\n * @param {?} currentNode\n * @return {?}\n */\nfunction getOrCreateHostChangeDetector(currentNode) {\n    /** @type {?} */\n    var hostNode = getClosestComponentAncestor(currentNode);\n    /** @type {?} */\n    var hostInjector = hostNode.nodeInjector;\n    /** @type {?} */\n    var existingRef = hostInjector && hostInjector.changeDetectorRef;\n    return existingRef ?\n        existingRef :\n        new ViewRef(/** @type {?} */ (hostNode.data), /** @type {?} */ ((hostNode\n            .view[DIRECTIVES]))[hostNode.tNode.flags >> 15 /* DirectiveStartingIndexShift */]);\n}\n/**\n * @param {?} di\n * @return {?}\n */\nfunction getOrCreateRenderer2(di) {\n    /** @type {?} */\n    var renderer = di.node.view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return /** @type {?} */ (renderer);\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/**\n * If the node is an embedded view, traverses up the view tree to return the closest\n * ancestor view that is attached to a component. If it's already a component node,\n * returns itself.\n * @param {?} node\n * @return {?}\n */\nfunction getClosestComponentAncestor(node) {\n    while (node.tNode.type === 2 /* View */) {\n        node = node.view[HOST_NODE];\n    }\n    return /** @type {?} */ (node);\n}\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * @template T\n * @param {?} nodeInjector Node injector where the search should start\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @return {?} the value from the injector or `null` when not found\n */\nexport function getOrCreateInjectable(nodeInjector, token, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    /** @type {?} */\n    var bloomHash = bloomHashBit(token);\n    // If the token has a bloom hash, then it is a directive that is public to the injection system\n    // (diPublic) otherwise fall back to the module injector.\n    if (bloomHash !== null) {\n        /** @type {?} */\n        var injector = nodeInjector;\n        while (injector) {\n            // Get the closest potential matching injector (upwards in the injector tree) that\n            // *potentially* has the token.\n            injector = bloomFindPossibleInjector(injector, bloomHash, flags);\n            // If no injector is found, we *know* that there is no ancestor injector that contains the\n            // token, so we abort.\n            if (!injector) {\n                break;\n            }\n            /** @type {?} */\n            var node = injector.node;\n            /** @type {?} */\n            var nodeFlags = node.tNode.flags;\n            /** @type {?} */\n            var count = nodeFlags & 4095 /* DirectiveCountMask */;\n            if (count !== 0) {\n                /** @type {?} */\n                var start = nodeFlags >> 15 /* DirectiveStartingIndexShift */;\n                /** @type {?} */\n                var end = start + count;\n                /** @type {?} */\n                var defs = /** @type {?} */ ((node.view[TVIEW].directives));\n                for (var i = start; i < end; i++) {\n                    /** @type {?} */\n                    var directiveDef = /** @type {?} */ (defs[i]);\n                    if (directiveDef.type === token && directiveDef.diPublic) {\n                        return /** @type {?} */ ((node.view[DIRECTIVES]))[i];\n                    }\n                }\n            }\n            /** @type {?} */\n            var instance = void 0;\n            if (injector === nodeInjector &&\n                (instance = searchMatchesQueuedForCreation(node, token))) {\n                return instance;\n            }\n            // The def wasn't found anywhere on this node, so it was a false positive.\n            // If flags permit, traverse up the tree and continue searching.\n            if (flags & 2 /* Self */ || flags & 1 /* Host */ && !sameHostView(injector)) {\n                injector = null;\n            }\n            else {\n                injector = injector.parent;\n            }\n        }\n    }\n    /** @type {?} */\n    var moduleInjector = getPreviousOrParentNode().view[INJECTOR];\n    /** @type {?} */\n    var formerInjector = setCurrentInjector(moduleInjector);\n    try {\n        return inject(token, flags);\n    }\n    finally {\n        setCurrentInjector(formerInjector);\n    }\n}\n/**\n * @template T\n * @param {?} node\n * @param {?} token\n * @return {?}\n */\nfunction searchMatchesQueuedForCreation(node, token) {\n    /** @type {?} */\n    var matches = node.view[TVIEW].currentMatches;\n    if (matches) {\n        for (var i = 0; i < matches.length; i += 2) {\n            /** @type {?} */\n            var def = /** @type {?} */ (matches[i]);\n            if (def.type === token) {\n                return resolveDirective(def, i + 1, matches, node.view[TVIEW]);\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n */\nfunction bloomHashBit(token) {\n    /** @type {?} */\n    var id = (/** @type {?} */ (token))[NG_ELEMENT_ID];\n    return typeof id === 'number' ? id & BLOOM_MASK : null;\n}\n/**\n * Finds the closest injector that might have a certain directive.\n *\n * Each directive corresponds to a bit in an injector's bloom filter. Given the bloom bit to\n * check and a starting injector, this function traverses up injectors until it finds an\n * injector that contains a 1 for that bit in its bloom filter. A 1 indicates that the\n * injector may have that directive. It only *may* have the directive because directives begin\n * to share bloom filter bits after the BLOOM_SIZE is reached, and it could correspond to a\n * different directive sharing the bit.\n *\n * Note: We can skip checking further injectors up the tree if an injector's cbf structure\n * has a 0 for that bloom bit. Since cbf contains the merged value of all the parent\n * injectors, a 0 in the bloom bit indicates that the parents definitely do not contain\n * the directive and do not need to be checked.\n *\n * @param {?} startInjector\n * @param {?} bloomBit The bit to check in each injector's bloom filter\n * @param {?} flags The injection flags for this injection site (e.g. Optional or SkipSelf)\n * @return {?} An injector that might have the directive\n */\nexport function bloomFindPossibleInjector(startInjector, bloomBit, flags) {\n    /** @type {?} */\n    var mask = 1 << bloomBit;\n    /** @type {?} */\n    var b7 = bloomBit & 0x80;\n    /** @type {?} */\n    var b6 = bloomBit & 0x40;\n    /** @type {?} */\n    var b5 = bloomBit & 0x20;\n    /** @type {?} */\n    var injector = flags & 4 /* SkipSelf */ ? startInjector.parent : startInjector;\n    while (injector) {\n        /** @type {?} */\n        var value = void 0;\n        if (b7) {\n            value = b6 ? (b5 ? injector.bf7 : injector.bf6) : (b5 ? injector.bf5 : injector.bf4);\n        }\n        else {\n            value = b6 ? (b5 ? injector.bf3 : injector.bf2) : (b5 ? injector.bf1 : injector.bf0);\n        }\n        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n        // this injector is a potential match.\n        if (value & mask) {\n            return injector;\n        }\n        if (flags & 2 /* Self */ || flags & 1 /* Host */ && !sameHostView(injector)) {\n            return null;\n        }\n        // If the current injector does not have the directive, check the bloom filters for the ancestor\n        // injectors (cbf0 - cbf7). These filters capture *all* ancestor injectors.\n        if (b7) {\n            value = b6 ? (b5 ? injector.cbf7 : injector.cbf6) : (b5 ? injector.cbf5 : injector.cbf4);\n        }\n        else {\n            value = b6 ? (b5 ? injector.cbf3 : injector.cbf2) : (b5 ? injector.cbf1 : injector.cbf0);\n        }\n        // If the ancestor bloom filter value has the bit corresponding to the directive, traverse up to\n        // find the specific injector. If the ancestor bloom filter does not have the bit, we can abort.\n        if (value & mask) {\n            injector = injector.parent;\n        }\n        else {\n            return null;\n        }\n    }\n    return null;\n}\n/**\n * Checks whether the current injector and its parent are in the same host view.\n *\n * This is necessary to support \\@Host() decorators. If \\@Host() is set, we should stop searching once\n * the injector and its parent view don't match because it means we'd cross the view boundary.\n * @param {?} injector\n * @return {?}\n */\nfunction sameHostView(injector) {\n    return !!injector.parent && injector.parent.node.view === injector.node.view;\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nReadFromInjectorFn = /** @class */ (function () {\n    function ReadFromInjectorFn(read) {\n        this.read = read;\n    }\n    return ReadFromInjectorFn;\n}());\n/**\n * @template T\n */\nexport { ReadFromInjectorFn };\nif (false) {\n    /** @type {?} */\n    ReadFromInjectorFn.prototype.read;\n}\n/**\n * Creates an ElementRef for a given node injector and stores it on the injector.\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\n *\n * @param {?} di The node injector where we should store a created ElementRef\n * @return {?} The ElementRef instance to use\n */\nexport function getOrCreateElementRef(di) {\n    return di.elementRef || (di.elementRef = new ElementRef(di.node.native));\n}\n/** @type {?} */\nexport var QUERY_READ_TEMPLATE_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateTemplateRef(injector); }))));\n/** @type {?} */\nexport var QUERY_READ_CONTAINER_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateContainerRef(injector); }))));\n/** @type {?} */\nexport var QUERY_READ_ELEMENT_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateElementRef(injector); }))));\n/** @type {?} */\nexport var QUERY_READ_FROM_NODE = (/** @type {?} */ ((new ReadFromInjectorFn(function (injector, node, directiveIdx) {\n    ngDevMode && assertNodeOfPossibleTypes(node, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    if (directiveIdx > -1) {\n        return /** @type {?} */ ((node.view[DIRECTIVES]))[directiveIdx];\n    }\n    if (node.tNode.type === 3 /* Element */ || node.tNode.type === 4 /* ElementContainer */) {\n        return getOrCreateElementRef(injector);\n    }\n    if (node.tNode.type === 0 /* Container */) {\n        return getOrCreateTemplateRef(injector);\n    }\n    if (ngDevMode) {\n        // should never happen\n        throw new Error(\"Unexpected node type: \" + node.tNode.type);\n    }\n}))));\n/**\n * A ref to a node's native element.\n */\nvar /**\n * A ref to a node's native element.\n */\nElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    return ElementRef;\n}());\nif (false) {\n    /** @type {?} */\n    ElementRef.prototype.nativeElement;\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} di\n * @return {?} The ViewContainerRef instance to use\n */\nexport function getOrCreateContainerRef(di) {\n    if (!di.viewContainerRef) {\n        /** @type {?} */\n        var vcRefHost = di.node;\n        ngDevMode && assertNodeOfPossibleTypes(vcRefHost, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n        /** @type {?} */\n        var hostParent = /** @type {?} */ ((getParentLNode(vcRefHost)));\n        /** @type {?} */\n        var lContainer = createLContainer(hostParent, vcRefHost.view, true);\n        /** @type {?} */\n        var comment = vcRefHost.view[RENDERER].createComment(ngDevMode ? 'container' : '');\n        /** @type {?} */\n        var lContainerNode = createLNodeObject(0 /* Container */, vcRefHost.view, hostParent, comment, lContainer);\n        appendChild(hostParent, comment, vcRefHost.view);\n        /** @type {?} */\n        var hostTNode = /** @type {?} */ (vcRefHost.tNode);\n        if (!hostTNode.dynamicContainerNode) {\n            hostTNode.dynamicContainerNode =\n                createTNode(0 /* Container */, -1, null, null, hostTNode, null);\n        }\n        lContainerNode.tNode = hostTNode.dynamicContainerNode;\n        vcRefHost.dynamicLContainerNode = lContainerNode;\n        addToViewTree(vcRefHost.view, /** @type {?} */ (hostTNode.index), lContainer);\n        di.viewContainerRef = new ViewContainerRef(lContainerNode, vcRefHost);\n    }\n    return di.viewContainerRef;\n}\nvar NodeInjector = /** @class */ (function () {\n    function NodeInjector(_lInjector) {\n        this._lInjector = _lInjector;\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    NodeInjector.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        if (token === viewEngine_TemplateRef) {\n            return getOrCreateTemplateRef(this._lInjector);\n        }\n        if (token === viewEngine_ViewContainerRef) {\n            return getOrCreateContainerRef(this._lInjector);\n        }\n        if (token === viewEngine_ElementRef) {\n            return getOrCreateElementRef(this._lInjector);\n        }\n        if (token === viewEngine_ChangeDetectorRef) {\n            return getOrCreateChangeDetectorRef(this._lInjector, null);\n        }\n        if (token === Renderer2) {\n            return getOrCreateRenderer2(this._lInjector);\n        }\n        return getOrCreateInjectable(this._lInjector, token);\n    };\n    return NodeInjector;\n}());\nexport { NodeInjector };\nif (false) {\n    /** @type {?} */\n    NodeInjector.prototype._lInjector;\n}\n/**\n * A ref to a container that enables adding and removing views from that container\n * imperatively.\n */\nvar /**\n * A ref to a container that enables adding and removing views from that container\n * imperatively.\n */\nViewContainerRef = /** @class */ (function () {\n    function ViewContainerRef(_lContainerNode, _hostNode) {\n        this._lContainerNode = _lContainerNode;\n        this._hostNode = _hostNode;\n        this._viewRefs = [];\n    }\n    Object.defineProperty(ViewContainerRef.prototype, \"element\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var injector = getOrCreateNodeInjectorForNode(this._hostNode);\n            return getOrCreateElementRef(injector);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var injector = getOrCreateNodeInjectorForNode(this._hostNode);\n            return new NodeInjector(injector);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef.prototype, \"parentInjector\", {\n        /** @deprecated No replacement */\n        get: /**\n         * @deprecated No replacement\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var parentLInjector = getParentLNode(this._hostNode).nodeInjector;\n            return parentLInjector ? new NodeInjector(parentLInjector) : new NullInjector();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewContainerRef.prototype.clear = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var lContainer = this._lContainerNode.data;\n        while (lContainer[VIEWS].length) {\n            this.remove(0);\n        }\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.get = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) { return this._viewRefs[index] || null; };\n    Object.defineProperty(ViewContainerRef.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var lContainer = this._lContainerNode.data;\n            return lContainer[VIEWS].length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.createEmbeddedView = /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    function (templateRef, context, index) {\n        /** @type {?} */\n        var adjustedIdx = this._adjustIndex(index);\n        /** @type {?} */\n        var viewRef = (/** @type {?} */ (templateRef))\n            .createEmbeddedView(context || /** @type {?} */ ({}), this._lContainerNode, adjustedIdx);\n        (/** @type {?} */ (viewRef)).attachToViewContainerRef(this);\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\n        return viewRef;\n    };\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    ViewContainerRef.prototype.createComponent = /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        var contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && contextInjector) {\n            ngModuleRef = contextInjector.get(viewEngine_NgModuleRef, null);\n        }\n        /** @type {?} */\n        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.insert = /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    function (viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        var lViewNode = /** @type {?} */ (((/** @type {?} */ (viewRef))._lViewNode));\n        /** @type {?} */\n        var adjustedIdx = this._adjustIndex(index);\n        insertView(this._lContainerNode, lViewNode, adjustedIdx);\n        /** @type {?} */\n        var views = this._lContainerNode.data[VIEWS];\n        /** @type {?} */\n        var beforeNode = adjustedIdx + 1 < views.length ?\n            (/** @type {?} */ ((getChildLNode(views[adjustedIdx + 1])))).native :\n            this._lContainerNode.native;\n        addRemoveViewFromContainer(this._lContainerNode, lViewNode, true, beforeNode);\n        (/** @type {?} */ (viewRef)).attachToViewContainerRef(this);\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?} newIndex\n     * @return {?}\n     */\n    ViewContainerRef.prototype.move = /**\n     * @param {?} viewRef\n     * @param {?} newIndex\n     * @return {?}\n     */\n    function (viewRef, newIndex) {\n        /** @type {?} */\n        var index = this.indexOf(viewRef);\n        this.detach(index);\n        this.insert(viewRef, this._adjustIndex(newIndex));\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ViewContainerRef.prototype.indexOf = /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) { return this._viewRefs.indexOf(viewRef); };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.remove = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var adjustedIdx = this._adjustIndex(index, -1);\n        removeView(this._lContainerNode, adjustedIdx);\n        this._viewRefs.splice(adjustedIdx, 1);\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.detach = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var adjustedIdx = this._adjustIndex(index, -1);\n        detachView(this._lContainerNode, adjustedIdx);\n        return this._viewRefs.splice(adjustedIdx, 1)[0] || null;\n    };\n    /**\n     * @param {?=} index\n     * @param {?=} shift\n     * @return {?}\n     */\n    ViewContainerRef.prototype._adjustIndex = /**\n     * @param {?=} index\n     * @param {?=} shift\n     * @return {?}\n     */\n    function (index, shift) {\n        if (shift === void 0) { shift = 0; }\n        if (index == null) {\n            return this._lContainerNode.data[VIEWS].length + shift;\n        }\n        if (ngDevMode) {\n            assertGreaterThan(index, -1, 'index must be positive');\n            // +1 because it's legal to insert at the end.\n            assertLessThan(index, this._lContainerNode.data[VIEWS].length + 1 + shift, 'index');\n        }\n        return index;\n    };\n    return ViewContainerRef;\n}());\nif (false) {\n    /** @type {?} */\n    ViewContainerRef.prototype._viewRefs;\n    /** @type {?} */\n    ViewContainerRef.prototype._lContainerNode;\n    /** @type {?} */\n    ViewContainerRef.prototype._hostNode;\n}\n/**\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\n * exists, retrieves the existing TemplateRef.\n *\n * @template T\n * @param {?} di The node injector where we should store a created TemplateRef\n * @return {?} The TemplateRef instance to use\n */\nexport function getOrCreateTemplateRef(di) {\n    if (!di.templateRef) {\n        ngDevMode && assertNodeType(di.node, 0 /* Container */);\n        /** @type {?} */\n        var hostNode = /** @type {?} */ (di.node);\n        /** @type {?} */\n        var hostTNode = hostNode.tNode;\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        di.templateRef = new TemplateRef(hostNode.view, getOrCreateElementRef(di), /** @type {?} */ (hostTNode.tViews), getRenderer(), hostNode.data[QUERIES]);\n    }\n    return di.templateRef;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getFactoryOf(type) {\n    /** @type {?} */\n    var typeAny = /** @type {?} */ (type);\n    /** @type {?} */\n    var def = typeAny.ngComponentDef || typeAny.ngDirectiveDef || typeAny.ngPipeDef ||\n        typeAny.ngInjectableDef || typeAny.ngInjectorDef;\n    if (def === undefined || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getInheritedFactory(type) {\n    /** @type {?} */\n    var proto = /** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor);\n    /** @type {?} */\n    var factory = getFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return function (t) { return new t(); };\n    }\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nTemplateRef = /** @class */ (function () {\n    function TemplateRef(_declarationParentView, elementRef, _tView, _renderer, _queries) {\n        this._declarationParentView = _declarationParentView;\n        this.elementRef = elementRef;\n        this._tView = _tView;\n        this._renderer = _renderer;\n        this._queries = _queries;\n    }\n    /**\n     * @param {?} context\n     * @param {?=} containerNode\n     * @param {?=} index\n     * @return {?}\n     */\n    TemplateRef.prototype.createEmbeddedView = /**\n     * @param {?} context\n     * @param {?=} containerNode\n     * @param {?=} index\n     * @return {?}\n     */\n    function (context, containerNode, index) {\n        /** @type {?} */\n        var viewNode = createEmbeddedViewNode(this._tView, context, this._declarationParentView, this._renderer, this._queries);\n        if (containerNode) {\n            insertView(containerNode, viewNode, /** @type {?} */ ((index)));\n        }\n        renderEmbeddedTemplate(viewNode, this._tView, context, 1 /* Create */);\n        /** @type {?} */\n        var viewRef = new ViewRef(viewNode.data, context);\n        viewRef._lViewNode = viewNode;\n        return viewRef;\n    };\n    return TemplateRef;\n}());\nif (false) {\n    /** @type {?} */\n    TemplateRef.prototype._declarationParentView;\n    /** @type {?} */\n    TemplateRef.prototype.elementRef;\n    /** @type {?} */\n    TemplateRef.prototype._tView;\n    /** @type {?} */\n    TemplateRef.prototype._renderer;\n    /** @type {?} */\n    TemplateRef.prototype._queries;\n}\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n * @param {?} lNode\n * @return {?}\n */\nexport function templateRefExtractor(lNode) {\n    return getOrCreateTemplateRef(getOrCreateNodeInjectorForNode(lNode));\n}\n//# sourceMappingURL=di.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual, assertLessThan } from './assert';\nimport { NO_CHANGE, _getViewData, adjustBlueprintForNewNode, bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4, createLNode, getPreviousOrParentNode, getRenderer, load, resetComponentState } from './instructions';\nimport { RENDER_PARENT } from './interfaces/container';\nimport { BINDING_INDEX, HEADER_OFFSET, TVIEW } from './interfaces/view';\nimport { appendChild, createTextNode, getParentLNode, removeChild } from './node_manipulation';\nimport { stringify } from './util';\n/** @enum {number} */\nvar I18nInstructions = {\n    Text: 536870912,\n    Element: 1073741824,\n    Expression: 1610612736,\n    TemplateRoot: -2147483648,\n    Any: -1610612736,\n    CloseNode: -1073741824,\n    RemoveNode: -536870912,\n    /** Used to decode the number encoded with the instruction. */\n    IndexMask: 536870911,\n    /** Used to test the type of instruction. */\n    InstructionMask: -536870912,\n};\nexport { I18nInstructions };\n/** @typedef {?} */\nvar I18nInstruction;\nexport { I18nInstruction };\n/** @typedef {?} */\nvar I18nExpInstruction;\nexport { I18nExpInstruction };\n/** @typedef {?} */\nvar PlaceholderMap;\nexport { PlaceholderMap };\n/** @type {?} */\nvar i18nTagRegex = /{\\$([^}]+)}/g;\n/**\n * Takes a translation string, the initial list of placeholders (elements and expressions) and the\n * indexes of their corresponding expression nodes to return a list of instructions for each\n * template function.\n *\n * Because embedded templates have different indexes for each placeholder, each parameter (except\n * the translation) is an array, where each value corresponds to a different template, by order of\n * appearance.\n *\n * @param {?} translation A translation string where placeholders are represented by `{$name}`\n * @param {?} elements An array containing, for each template, the maps of element placeholders and\n * their indexes.\n * @param {?=} expressions An array containing, for each template, the maps of expression placeholders\n * and their indexes.\n * @param {?=} templateRoots An array of template roots whose content should be ignored when\n * generating the instructions for their parent template.\n * @param {?=} lastChildIndex The index of the last child of the i18n node. Used when the i18n block is\n * an ng-container.\n *\n * @return {?} A list of instructions used to translate each template.\n */\nexport function i18nMapping(translation, elements, expressions, templateRoots, lastChildIndex) {\n    /** @type {?} */\n    var translationParts = translation.split(i18nTagRegex);\n    /** @type {?} */\n    var nbTemplates = templateRoots ? templateRoots.length + 1 : 1;\n    /** @type {?} */\n    var instructions = (new Array(nbTemplates)).fill(undefined);\n    generateMappingInstructions(0, 0, translationParts, instructions, elements, expressions, templateRoots, lastChildIndex);\n    return instructions;\n}\n/**\n * Internal function that reads the translation parts and generates a set of instructions for each\n * template.\n *\n * See `i18nMapping()` for more details.\n *\n * @param {?} tmplIndex The order of appearance of the template.\n * 0 for the root template, following indexes match the order in `templateRoots`.\n * @param {?} partIndex The current index in `translationParts`.\n * @param {?} translationParts The translation string split into an array of placeholders and text\n * elements.\n * @param {?} instructions The current list of instructions to update.\n * @param {?} elements An array containing, for each template, the maps of element placeholders and\n * their indexes.\n * @param {?=} expressions An array containing, for each template, the maps of expression placeholders\n * and their indexes.\n * @param {?=} templateRoots An array of template roots whose content should be ignored when\n * generating the instructions for their parent template.\n * @param {?=} lastChildIndex The index of the last child of the i18n node. Used when the i18n block is\n * an ng-container.\n *\n * @return {?} the current index in `translationParts`\n */\nfunction generateMappingInstructions(tmplIndex, partIndex, translationParts, instructions, elements, expressions, templateRoots, lastChildIndex) {\n    /** @type {?} */\n    var tmplInstructions = [];\n    /** @type {?} */\n    var phVisited = [];\n    /** @type {?} */\n    var openedTagCount = 0;\n    /** @type {?} */\n    var maxIndex = 0;\n    /** @type {?} */\n    var currentElements = elements && elements[tmplIndex] ? elements[tmplIndex] : null;\n    /** @type {?} */\n    var currentExpressions = expressions && expressions[tmplIndex] ? expressions[tmplIndex] : null;\n    instructions[tmplIndex] = tmplInstructions;\n    for (; partIndex < translationParts.length; partIndex++) {\n        /** @type {?} */\n        var value = translationParts[partIndex];\n        // Odd indexes are placeholders\n        if (partIndex & 1) {\n            /** @type {?} */\n            var phIndex = void 0;\n            if (currentElements && currentElements[value] !== undefined) {\n                phIndex = currentElements[value];\n                /** @type {?} */\n                var templateRootIndex = templateRoots ? templateRoots.indexOf(value) : -1;\n                if (templateRootIndex !== -1 && (templateRootIndex + 1) !== tmplIndex) {\n                    // This is a template root, it has no closing tag, not treating it as an element\n                    tmplInstructions.push(phIndex | -2147483648 /* TemplateRoot */);\n                }\n                else {\n                    tmplInstructions.push(phIndex | 1073741824 /* Element */);\n                    openedTagCount++;\n                }\n                phVisited.push(value);\n            }\n            else if (currentExpressions && currentExpressions[value] !== undefined) {\n                phIndex = currentExpressions[value];\n                // The placeholder represents an expression, add an instruction to move it\n                tmplInstructions.push(phIndex | 1610612736 /* Expression */);\n                phVisited.push(value);\n            }\n            else {\n                // It is a closing tag\n                tmplInstructions.push(-1073741824 /* CloseNode */);\n                if (tmplIndex > 0) {\n                    openedTagCount--;\n                    // If we have reached the closing tag for this template, exit the loop\n                    if (openedTagCount === 0) {\n                        break;\n                    }\n                }\n            }\n            if (phIndex !== undefined && phIndex > maxIndex) {\n                maxIndex = phIndex;\n            }\n            if (templateRoots) {\n                /** @type {?} */\n                var newTmplIndex = templateRoots.indexOf(value) + 1;\n                if (newTmplIndex !== 0 && newTmplIndex !== tmplIndex) {\n                    partIndex = generateMappingInstructions(newTmplIndex, partIndex, translationParts, instructions, elements, expressions, templateRoots, lastChildIndex);\n                }\n            }\n        }\n        else if (value) {\n            // It's a non-empty string, create a text node\n            tmplInstructions.push(536870912 /* Text */, value);\n        }\n    }\n    // Add instructions to remove elements that are not used in the translation\n    if (elements) {\n        /** @type {?} */\n        var tmplElements = elements[tmplIndex];\n        if (tmplElements) {\n            /** @type {?} */\n            var phKeys = Object.keys(tmplElements);\n            for (var i = 0; i < phKeys.length; i++) {\n                /** @type {?} */\n                var ph = phKeys[i];\n                if (phVisited.indexOf(ph) === -1) {\n                    /** @type {?} */\n                    var index = tmplElements[ph];\n                    // Add an instruction to remove the element\n                    tmplInstructions.push(index | -536870912 /* RemoveNode */);\n                    if (index > maxIndex) {\n                        maxIndex = index;\n                    }\n                }\n            }\n        }\n    }\n    // Add instructions to remove expressions that are not used in the translation\n    if (expressions) {\n        /** @type {?} */\n        var tmplExpressions = expressions[tmplIndex];\n        if (tmplExpressions) {\n            /** @type {?} */\n            var phKeys = Object.keys(tmplExpressions);\n            for (var i = 0; i < phKeys.length; i++) {\n                /** @type {?} */\n                var ph = phKeys[i];\n                if (phVisited.indexOf(ph) === -1) {\n                    /** @type {?} */\n                    var index = tmplExpressions[ph];\n                    if (ngDevMode) {\n                        assertLessThan(index.toString(2).length, 28, \"Index \" + index + \" is too big and will overflow\");\n                    }\n                    // Add an instruction to remove the expression\n                    tmplInstructions.push(index | -536870912 /* RemoveNode */);\n                    if (index > maxIndex) {\n                        maxIndex = index;\n                    }\n                }\n            }\n        }\n    }\n    if (tmplIndex === 0 && typeof lastChildIndex === 'number') {\n        // The current parent is an ng-container and it has more children after the translation that we\n        // need to append to keep the order of the DOM nodes correct\n        for (var i = maxIndex + 1; i <= lastChildIndex; i++) {\n            if (ngDevMode) {\n                assertLessThan(i.toString(2).length, 28, \"Index \" + i + \" is too big and will overflow\");\n            }\n            tmplInstructions.push(i | -1610612736 /* Any */);\n        }\n    }\n    return partIndex;\n}\n/**\n * @param {?} node\n * @param {?} parentNode\n * @param {?} previousNode\n * @return {?}\n */\nfunction appendI18nNode(node, parentNode, previousNode) {\n    if (ngDevMode) {\n        ngDevMode.rendererMoveNode++;\n    }\n    /** @type {?} */\n    var viewData = _getViewData();\n    appendChild(parentNode, node.native || null, viewData);\n    /** @type {?} */\n    var firstTemplatePass = node.view[TVIEW].firstTemplatePass;\n    if (firstTemplatePass) {\n        if (previousNode === parentNode && node.tNode !== parentNode.tNode.child) {\n            node.tNode.next = parentNode.tNode.child;\n            parentNode.tNode.child = node.tNode;\n        }\n        else if (previousNode !== parentNode && node.tNode !== previousNode.tNode.next) {\n            node.tNode.next = previousNode.tNode.next;\n            previousNode.tNode.next = node.tNode;\n        }\n        else {\n            node.tNode.next = null;\n        }\n        if (parentNode.view === node.view)\n            node.tNode.parent = /** @type {?} */ (parentNode.tNode);\n    }\n    // Template containers also have a comment node for the `ViewContainerRef` that should be moved\n    if (node.tNode.type === 0 /* Container */ && node.dynamicLContainerNode) {\n        appendChild(parentNode, node.dynamicLContainerNode.native || null, viewData);\n        if (firstTemplatePass) {\n            node.tNode.dynamicContainerNode = node.dynamicLContainerNode.tNode;\n            node.dynamicLContainerNode.tNode.parent = /** @type {?} */ (node.tNode);\n        }\n        return node.dynamicLContainerNode;\n    }\n    return node;\n}\n/**\n * Takes a list of instructions generated by `i18nMapping()` to transform the template accordingly.\n *\n * @param {?} startIndex Index of the first element to translate (for instance the first child of the\n * element with the i18n attribute).\n * @param {?} instructions The list of instructions to apply on the current view.\n * @return {?}\n */\nexport function i18nApply(startIndex, instructions) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    if (ngDevMode) {\n        assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nApply should be called before any binding');\n    }\n    if (!instructions) {\n        return;\n    }\n    /** @type {?} */\n    var renderer = getRenderer();\n    /** @type {?} */\n    var localParentNode = getParentLNode(load(startIndex)) || getPreviousOrParentNode();\n    /** @type {?} */\n    var localPreviousNode = localParentNode;\n    resetComponentState(); // We don't want to add to the tree with the wrong previous node\n    for (var i = 0; i < instructions.length; i++) {\n        /** @type {?} */\n        var instruction = /** @type {?} */ (instructions[i]);\n        switch (instruction & -536870912 /* InstructionMask */) {\n            case 1073741824 /* Element */:\n                /** @type {?} */\n                var element = load(instruction & 536870911 /* IndexMask */);\n                localPreviousNode = appendI18nNode(element, localParentNode, localPreviousNode);\n                localParentNode = element;\n                break;\n            case 1610612736 /* Expression */:\n            case -2147483648 /* TemplateRoot */:\n            case -1610612736 /* Any */:\n                /** @type {?} */\n                var node = load(instruction & 536870911 /* IndexMask */);\n                localPreviousNode = appendI18nNode(node, localParentNode, localPreviousNode);\n                break;\n            case 536870912 /* Text */:\n                if (ngDevMode) {\n                    ngDevMode.rendererCreateTextNode++;\n                }\n                /** @type {?} */\n                var value = instructions[++i];\n                /** @type {?} */\n                var textRNode = createTextNode(value, renderer);\n                // If we were to only create a `RNode` then projections won't move the text.\n                // Create text node at the current end of viewData. Must subtract header offset because\n                // createLNode takes a raw index (not adjusted by header offset).\n                adjustBlueprintForNewNode(viewData);\n                /** @type {?} */\n                var lastNodeIndex = viewData.length - 1;\n                /** @type {?} */\n                var textLNode = createLNode(lastNodeIndex - HEADER_OFFSET, 3 /* Element */, textRNode, null, null);\n                localPreviousNode = appendI18nNode(textLNode, localParentNode, localPreviousNode);\n                resetComponentState();\n                break;\n            case -1073741824 /* CloseNode */:\n                localPreviousNode = localParentNode;\n                localParentNode = /** @type {?} */ ((getParentLNode(localParentNode)));\n                break;\n            case -536870912 /* RemoveNode */:\n                if (ngDevMode) {\n                    ngDevMode.rendererRemoveNode++;\n                }\n                /** @type {?} */\n                var index = instruction & 536870911 /* IndexMask */;\n                /** @type {?} */\n                var removedNode = load(index);\n                /** @type {?} */\n                var parentNode = /** @type {?} */ ((getParentLNode(removedNode)));\n                removeChild(parentNode, removedNode.native || null, viewData);\n                // For template containers we also need to remove their `ViewContainerRef` from the DOM\n                if (removedNode.tNode.type === 0 /* Container */ && removedNode.dynamicLContainerNode) {\n                    removeChild(parentNode, removedNode.dynamicLContainerNode.native || null, viewData);\n                    removedNode.dynamicLContainerNode.tNode.detached = true;\n                    removedNode.dynamicLContainerNode.data[RENDER_PARENT] = null;\n                }\n                break;\n        }\n    }\n}\n/**\n * Takes a translation string and the initial list of expressions and returns a list of instructions\n * that will be used to translate an attribute.\n * Even indexes contain static strings, while odd indexes contain the index of the expression whose\n * value will be concatenated into the final translation.\n * @param {?} translation\n * @param {?} placeholders\n * @return {?}\n */\nexport function i18nExpMapping(translation, placeholders) {\n    /** @type {?} */\n    var staticText = translation.split(i18nTagRegex);\n    // odd indexes are placeholders\n    for (var i = 1; i < staticText.length; i += 2) {\n        staticText[i] = placeholders[staticText[i]];\n    }\n    return staticText;\n}\n/**\n * Checks if the value of an expression has changed and replaces it by its value in a translation,\n * or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation1(instructions, v0) {\n    /** @type {?} */\n    var different = bindingUpdated(_getViewData()[BINDING_INDEX]++, v0);\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            res += stringify(v0);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 2 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation2(instructions, v0, v1) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated2(viewData[BINDING_INDEX], v0, v1);\n    viewData[BINDING_INDEX] += 2;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b1 ? v1 : v0;\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 3 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation3(instructions, v0, v1, v2) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated3(viewData[BINDING_INDEX], v0, v1, v2);\n    viewData[BINDING_INDEX] += 3;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b2 ? v2 : (b1 ? v1 : v0);\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 4 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation4(instructions, v0, v1, v2, v3) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    viewData[BINDING_INDEX] += 4;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0);\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 5 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation5(instructions, v0, v1, v2, v3, v4) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated(viewData[BINDING_INDEX] + 4, v4) || different;\n    viewData[BINDING_INDEX] += 5;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? v4 : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 6 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n * @param {?} v5 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation6(instructions, v0, v1, v2, v3, v4, v5) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated2(viewData[BINDING_INDEX] + 4, v4, v5) || different;\n    viewData[BINDING_INDEX] += 6;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? (b1 ? v5 : v4) : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 7 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n * @param {?} v5 value checked for change.\n * @param {?} v6 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation7(instructions, v0, v1, v2, v3, v4, v5, v6) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated3(viewData[BINDING_INDEX] + 4, v4, v5, v6) || different;\n    viewData[BINDING_INDEX] += 7;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? (b2 ? v6 : (b1 ? v5 : v4)) : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 8 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n * @param {?} v5 value checked for change.\n * @param {?} v6 value checked for change.\n * @param {?} v7 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation8(instructions, v0, v1, v2, v3, v4, v5, v6, v7) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated4(viewData[BINDING_INDEX] + 4, v4, v5, v6, v7) || different;\n    viewData[BINDING_INDEX] += 8;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? (b2 ? (b1 ? v7 : v6) : (b1 ? v5 : v4)) : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Create a translated interpolation binding with a variable number of expressions.\n *\n * If there are 1 to 8 expressions then `i18nInterpolation()` should be used instead. It is faster\n * because there is no need to create an array of expressions and iterate over it.\n *\n * @param {?} instructions\n * @param {?} values\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolationV(instructions, values) {\n    /** @type {?} */\n    var viewData = _getViewData();\n    /** @type {?} */\n    var different = false;\n    for (var i = 0; i < values.length; i++) {\n        // Check if bindings have changed\n        bindingUpdated(viewData[BINDING_INDEX]++, values[i]) && (different = true);\n    }\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are placeholders\n        if (i & 1) {\n            res += stringify(values[/** @type {?} */ (instructions[i])]);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n//# sourceMappingURL=i18n.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { INJECTOR, NullInjector, THROW_IF_NOT_FOUND, USE_VALUE, inject, injectArgs, setCurrentInjector } from './injector';\nimport { APP_ROOT } from './scope';\n/** @typedef {?} */\nvar SingleProvider;\n/** *\n * Marker which indicates that a value has not yet been created from the factory function.\n  @type {?} */\nvar NOT_YET = {};\n/** *\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n  @type {?} */\nvar CIRCULAR = {};\n/** @type {?} */\nvar EMPTY_ARRAY = /** @type {?} */ ([]);\n/** *\n * A lazily initialized NullInjector.\n  @type {?} */\nvar NULL_INJECTOR = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n    if (NULL_INJECTOR === undefined) {\n        NULL_INJECTOR = new NullInjector();\n    }\n    return NULL_INJECTOR;\n}\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n * @record\n * @template T\n */\nfunction Record() { }\n/** @type {?} */\nRecord.prototype.factory;\n/** @type {?} */\nRecord.prototype.value;\n/** @type {?} */\nRecord.prototype.multi;\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@experimental\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @return {?}\n */\nexport function createInjector(defType, parent, additionalProviders) {\n    if (parent === void 0) { parent = null; }\n    if (additionalProviders === void 0) { additionalProviders = null; }\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent);\n}\nvar R3Injector = /** @class */ (function () {\n    function R3Injector(def, additionalProviders, parent) {\n        var _this = this;\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        /**\n         * Flag indicating that this injector was previously destroyed.\n         */\n        this.destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, new Set()); });\n        additionalProviders &&\n            deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider); });\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\n    }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    R3Injector.prototype.destroy = /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    function () {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this.destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    };\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    R3Injector.prototype.get = /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = 0 /* Default */; }\n        this.assertNotDestroyed();\n        /** @type {?} */\n        var previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & 4 /* SkipSelf */)) {\n                /** @type {?} */\n                var record = this.records.get(token);\n                if (record === undefined) {\n                    /** @type {?} */\n                    var def = couldBeInjectableType(token) &&\n                        (/** @type {?} */ (token)).ngInjectableDef ||\n                        undefined;\n                    if (def !== undefined && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = injectableDefRecord(token);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            /** @type {?} */\n            var next = !(flags & 2 /* Self */) ? this.parent : getNullInjector();\n            return this.parent.get(token, notFoundValue);\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    R3Injector.prototype.assertNotDestroyed = /**\n     * @return {?}\n     */\n    function () {\n        if (this.destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    };\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @return {?}\n     */\n    R3Injector.prototype.processInjectorType = /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @return {?}\n     */\n    function (defOrWrappedDef, parents) {\n        var _this = this;\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        /** @type {?} */\n        var def = /** @type {?} */ ((/** @type {?} */ (defOrWrappedDef)).ngInjectorDef);\n        /** @type {?} */\n        var ngModule = (def == null) && (/** @type {?} */ (defOrWrappedDef)).ngModule || undefined;\n        /** @type {?} */\n        var defType = (ngModule === undefined) ? (/** @type {?} */ (defOrWrappedDef)) : ngModule;\n        /** @type {?} */\n        var providers = (ngModule !== undefined) && (/** @type {?} */ (defOrWrappedDef)).providers ||\n            EMPTY_ARRAY;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = ngModule.ngInjectorDef;\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Check for circular dependencies.\n        if (parents.has(defType)) {\n            throw new Error(\"Circular dependency: type \" + stringify(defType) + \" ends up importing itself.\");\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            parents.add(defType);\n            try {\n                deepForEach(def.imports, function (imported) { return _this.processInjectorType(imported, parents); });\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                parents.delete(defType);\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        if (def.providers != null) {\n            deepForEach(def.providers, function (provider) { return _this.processProvider(provider); });\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        deepForEach(providers, function (provider) { return _this.processProvider(provider); });\n    };\n    /**\n     * Process a `SingleProvider` and add it.\n     * @param {?} provider\n     * @return {?}\n     */\n    R3Injector.prototype.processProvider = /**\n     * Process a `SingleProvider` and add it.\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        /** @type {?} */\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        var record = providerToRecord(provider);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            /** @type {?} */\n            var multiRecord_1 = this.records.get(token);\n            if (multiRecord_1) {\n                // It has. Throw a nice error if\n                if (multiRecord_1.multi === undefined) {\n                    throw new Error(\"Mixed multi-provider for \" + token + \".\");\n                }\n            }\n            else {\n                multiRecord_1 = makeRecord(undefined, NOT_YET, true);\n                multiRecord_1.factory = function () { return injectArgs(/** @type {?} */ ((/** @type {?} */ ((multiRecord_1)).multi))); };\n                this.records.set(token, multiRecord_1);\n            }\n            token = provider; /** @type {?} */\n            ((multiRecord_1.multi)).push(provider);\n        }\n        else {\n            /** @type {?} */\n            var existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(\"Mixed multi-provider for \" + stringify(token));\n            }\n        }\n        this.records.set(token, record);\n    };\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    R3Injector.prototype.hydrate = /**\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    function (token, record) {\n        if (record.value === CIRCULAR) {\n            throw new Error(\"Circular dep for \" + stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            record.value = /** @type {?} */ ((record.factory))();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return /** @type {?} */ (record.value);\n    };\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    R3Injector.prototype.injectableDefInScope = /**\n     * @param {?} def\n     * @return {?}\n     */\n    function (def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    };\n    return R3Injector;\n}());\nexport { R3Injector };\nif (false) {\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * @type {?}\n     */\n    R3Injector.prototype.records;\n    /**\n     * The transitive set of `InjectorType`s which define this injector.\n     * @type {?}\n     */\n    R3Injector.prototype.injectorDefTypes;\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     * @type {?}\n     */\n    R3Injector.prototype.onDestroy;\n    /**\n     * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n     * root scope.\n     * @type {?}\n     */\n    R3Injector.prototype.isRootInjector;\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     * @type {?}\n     */\n    R3Injector.prototype.destroyed;\n    /** @type {?} */\n    R3Injector.prototype.parent;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefRecord(token) {\n    /** @type {?} */\n    var def = /** @type {?} */ ((/** @type {?} */ (token)).ngInjectableDef);\n    if (def === undefined) {\n        if (token instanceof InjectionToken) {\n            throw new Error(\"Token \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\n        }\n        // TODO(alxhub): there should probably be a strict mode which throws here instead of assuming a\n        // no-args constructor.\n        return makeRecord(function () { return new (/** @type {?} */ (token))(); });\n    }\n    return makeRecord(def.factory);\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction providerToRecord(provider) {\n    /** @type {?} */\n    var token = resolveForwardRef(provider);\n    /** @type {?} */\n    var value = NOT_YET;\n    /** @type {?} */\n    var factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefRecord(provider);\n    }\n    else {\n        token = resolveForwardRef(provider.provide);\n        if (isValueProvider(provider)) {\n            value = provider.useValue;\n        }\n        else if (isExistingProvider(provider)) {\n            factory = function () { return inject(provider.useExisting); };\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = function () { return provider.useFactory.apply(provider, injectArgs(provider.deps || [])); };\n        }\n        else {\n            /** @type {?} */\n            var classRef_1 = (/** @type {?} */ (provider)).useClass || token;\n            if (hasDeps(provider)) {\n                factory = function () { return new ((classRef_1).bind.apply((classRef_1), [void 0].concat(injectArgs(provider.deps))))(); };\n            }\n            else {\n                return injectableDefRecord(classRef_1);\n            }\n        }\n    }\n    return makeRecord(factory, value);\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?=} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi) {\n    if (value === void 0) { value = NOT_YET; }\n    if (multi === void 0) { multi = false; }\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\n/**\n * @template T\n * @param {?} input\n * @param {?} fn\n * @return {?}\n */\nfunction deepForEach(input, fn) {\n    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n    return USE_VALUE in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n    return !!(/** @type {?} */ (value)).useExisting;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n    return !!(/** @type {?} */ (value)).useFactory;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n    return !!(/** @type {?} */ (value)).deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n    return typeof value === 'object' && value != null && (/** @type {?} */ (value)).ngOnDestroy &&\n        typeof (/** @type {?} */ (value)).ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n//# sourceMappingURL=r3_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { createInjector } from '../di/r3_injector';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { assertDefined } from './assert';\nimport { ComponentFactoryResolver } from './component_ref';\n/**\n * @record\n */\nexport function NgModuleType() { }\n/** @type {?} */\nNgModuleType.prototype.ngModuleDef;\n/** @type {?} */\nexport var COMPONENT_FACTORY_RESOLVER = {\n    provide: viewEngine_ComponentFactoryResolver,\n    useFactory: function () { return new ComponentFactoryResolver(); },\n    deps: [],\n};\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nNgModuleRef = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleRef, _super);\n    function NgModuleRef(ngModuleType, parentInjector) {\n        var _this = _super.call(this) || this;\n        // tslint:disable-next-line:require-internal-with-underscore\n        _this._bootstrapComponents = [];\n        _this.destroyCbs = [];\n        /** @type {?} */\n        var ngModuleDef = (/** @type {?} */ ((ngModuleType))).ngModuleDef;\n        ngDevMode && assertDefined(ngModuleDef, \"NgModule '\" + stringify(ngModuleType) + \"' is not a subtype of 'NgModuleType'.\");\n        _this._bootstrapComponents = ngModuleDef.bootstrap;\n        /** @type {?} */\n        var additionalProviders = [\n            COMPONENT_FACTORY_RESOLVER, {\n                provide: viewEngine_NgModuleRef,\n                useValue: _this,\n            }\n        ];\n        _this.injector = createInjector(ngModuleType, parentInjector, additionalProviders);\n        _this.instance = _this.injector.get(ngModuleType);\n        _this.componentFactoryResolver = new ComponentFactoryResolver();\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NgModuleRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).push(callback);\n    };\n    return NgModuleRef;\n}(viewEngine_NgModuleRef));\n/**\n * @template T\n */\nexport { NgModuleRef };\nif (false) {\n    /** @type {?} */\n    NgModuleRef.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef.prototype.injector;\n    /** @type {?} */\n    NgModuleRef.prototype.componentFactoryResolver;\n    /** @type {?} */\n    NgModuleRef.prototype.instance;\n    /** @type {?} */\n    NgModuleRef.prototype.destroyCbs;\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nNgModuleFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory, _super);\n    function NgModuleFactory(moduleType) {\n        var _this = _super.call(this) || this;\n        _this.moduleType = moduleType;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        return new NgModuleRef(this.moduleType, parentInjector);\n    };\n    return NgModuleFactory;\n}(viewEngine_NgModuleFactory));\n/**\n * @template T\n */\nexport { NgModuleFactory };\nif (false) {\n    /** @type {?} */\n    NgModuleFactory.prototype.moduleType;\n}\n//# sourceMappingURL=ng_module_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { bindingUpdated, bindingUpdated2, bindingUpdated4, updateBinding, getBinding, getCreationMode, bindingUpdated3, getBindingRoot, } from './instructions';\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n */\nexport function pureFunction0(slotOffset, pureFn, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return getCreationMode() ?\n        updateBinding(bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction1(slotOffset, pureFn, exp, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(bindingIndex, exp) ?\n        updateBinding(bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated2(bindingIndex, exp1, exp2) ?\n        updateBinding(bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated3(bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(bindingIndex + 4, exp5) || different ?\n        updateBinding(bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = false;\n    for (var i = 0; i < exps.length; i++) {\n        bindingUpdated(bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(bindingIndex);\n}\n//# sourceMappingURL=pure_function.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getTView, load, store } from './instructions';\nimport { HEADER_OFFSET } from './interfaces/view';\nimport { pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunctionV } from './pure_function';\n/**\n * Create a pipe.\n *\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n */\nexport function pipe(index, pipeName) {\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var pipeDef;\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = /** @type {?} */ (tView.data[adjustedIndex]);\n    }\n    /** @type {?} */\n    var pipeInstance = pipeDef.factory();\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            var pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(\"Pipe with name '\" + name + \"' not found!\");\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind1(index, slotOffset, v1) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind2(index, slotOffset, v1, v2) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind3(index, slotOffset, v1, v2, v3) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ?\n        pureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ?\n        pureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n * @return {?}\n */\nexport function pipeBindV(index, slotOffset, values) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values);\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return (/** @type {?} */ (getTView().data[index + HEADER_OFFSET])).pure;\n}\n//# sourceMappingURL=pipe.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Subject, Subscription } from 'rxjs';\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @template T\n */\nvar /**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @template T\n */\nEventEmitter = /** @class */ (function (_super) {\n    tslib_1.__extends(EventEmitter, _super);\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param isAsync When true, deliver events asynchronously.\n     *\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this) || this;\n        _this.__isAsync = isAsync;\n        return _this;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param value The value to emit.\n     */\n    /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    EventEmitter.prototype.emit = /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param generatorOrNext When supplied, a custom handler for emitted events.\n     * @param error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     */\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    EventEmitter.prototype.subscribe = /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    function (generatorOrNext, error, complete) {\n        /** @type {?} */\n        var schedulerFn;\n        /** @type {?} */\n        var errorFn = function (err) { return null; };\n        /** @type {?} */\n        var completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? function (value) {\n                setTimeout(function () { return generatorOrNext.next(value); });\n            } : function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        /** @type {?} */\n        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    };\n    return EventEmitter;\n}(Subject));\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @template T\n */\nexport { EventEmitter };\nif (false) {\n    /**\n     * Internal\n     * @type {?}\n     */\n    EventEmitter.prototype.__isAsync;\n}\n//# sourceMappingURL=event_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util';\nimport { assertDefined, assertEqual } from './assert';\nimport { ReadFromInjectorFn, getOrCreateNodeInjectorForNode } from './di';\nimport { assertPreviousIsParent, getOrCreateCurrentQueries, isContentQueryHost, store, storeCleanupWithContext } from './instructions';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/definition';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/injector';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused4 } from './interfaces/query';\nimport { DIRECTIVES, TVIEW } from './interfaces/view';\nimport { flatten } from './util';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @record\n * @template T\n */\nexport function QueryPredicate() { }\n/**\n * If looking for directives then it contains the directive type.\n * @type {?}\n */\nQueryPredicate.prototype.type;\n/**\n * If selector then contains local names to query for.\n * @type {?}\n */\nQueryPredicate.prototype.selector;\n/**\n * Indicates which token should be read from DI for this query.\n * @type {?}\n */\nQueryPredicate.prototype.read;\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n * @record\n * @template T\n */\nexport function LQuery() { }\n/**\n * Next query. Used when queries are stored as a linked list in `LQueries`.\n * @type {?}\n */\nLQuery.prototype.next;\n/**\n * Destination to which the value should be added.\n * @type {?}\n */\nLQuery.prototype.list;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @type {?}\n */\nLQuery.prototype.predicate;\n/**\n * Values which have been located.\n *\n * This is what builds up the `QueryList._valuesTree`.\n * @type {?}\n */\nLQuery.prototype.values;\n/**\n * A pointer to an array that stores collected values from views. This is necessary so we know a\n * container into which to insert nodes collected from views.\n * @type {?}\n */\nLQuery.prototype.containerValues;\nvar LQueries_ = /** @class */ (function () {\n    function LQueries_(parent, shallow, deep) {\n        this.parent = parent;\n        this.shallow = shallow;\n        this.deep = deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    LQueries_.prototype.track = /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    function (queryList, predicate, descend, read) {\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.clone = /**\n     * @return {?}\n     */\n    function () { return new LQueries_(this, null, this.deep); };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.container = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var shallowResults = copyQueriesToContainer(this.shallow);\n        /** @type {?} */\n        var deepResults = copyQueriesToContainer(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.createView = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var shallowResults = copyQueriesToView(this.shallow);\n        /** @type {?} */\n        var deepResults = copyQueriesToView(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    LQueries_.prototype.insertView = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        insertView(index, this.shallow);\n        insertView(index, this.deep);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    LQueries_.prototype.addNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        add(this.deep, node);\n        if (isContentQueryHost(node.tNode)) {\n            add(this.shallow, node);\n            if (node.tNode.parent && isContentQueryHost(node.tNode.parent)) {\n                // if node has a content query and parent also has a content query\n                // both queries need to check this node for shallow matches\n                add(/** @type {?} */ ((this.parent)).shallow, node);\n            }\n            return this.parent;\n        }\n        isRootNodeOfQuery(node.tNode) && add(this.shallow, node);\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.removeView = /**\n     * @return {?}\n     */\n    function () {\n        removeView(this.shallow);\n        removeView(this.deep);\n    };\n    return LQueries_;\n}());\nexport { LQueries_ };\nif (false) {\n    /** @type {?} */\n    LQueries_.prototype.parent;\n    /** @type {?} */\n    LQueries_.prototype.shallow;\n    /** @type {?} */\n    LQueries_.prototype.deep;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isRootNodeOfQuery(tNode) {\n    return tNode.parent === null || isContentQueryHost(tNode.parent);\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToContainer(query) {\n    /** @type {?} */\n    var result = null;\n    while (query) {\n        /** @type {?} */\n        var containerValues = []; // prepare room for views\n        query.values.push(containerValues);\n        /** @type {?} */\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: containerValues,\n            containerValues: null\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToView(query) {\n    /** @type {?} */\n    var result = null;\n    while (query) {\n        /** @type {?} */\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: [],\n            containerValues: query.values\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} index\n * @param {?} query\n * @return {?}\n */\nfunction insertView(index, query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.'); /** @type {?} */\n        ((query.containerValues)).splice(index, 0, query.values);\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction removeView(query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n        /** @type {?} */\n        var containerValues = /** @type {?} */ ((query.containerValues));\n        /** @type {?} */\n        var viewValuesIdx = containerValues.indexOf(query.values);\n        /** @type {?} */\n        var removed = containerValues.splice(viewValuesIdx, 1);\n        // mark a query as dirty only when removed view had matching modes\n        ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n        if (removed[0].length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    /** @type {?} */\n    var localNames = tNode.localNames;\n    if (localNames) {\n        for (var i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return /** @type {?} */ (localNames[i + 1]);\n            }\n        }\n    }\n    return null;\n}\n/**\n * Iterates over all the directives for a node and returns index of a directive for a given type.\n *\n * @param {?} node Node on which directives are present.\n * @param {?} type Type of a directive to look for.\n * @return {?} Index of a found directive or null when none found.\n */\nfunction getIdxOfMatchingDirective(node, type) {\n    /** @type {?} */\n    var defs = /** @type {?} */ ((node.view[TVIEW].directives));\n    /** @type {?} */\n    var flags = node.tNode.flags;\n    /** @type {?} */\n    var count = flags & 4095 /* DirectiveCountMask */;\n    /** @type {?} */\n    var start = flags >> 15 /* DirectiveStartingIndexShift */;\n    /** @type {?} */\n    var end = start + count;\n    for (var i = start; i < end; i++) {\n        /** @type {?} */\n        var def = /** @type {?} */ (defs[i]);\n        if (def.type === type && def.diPublic) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} nodeInjector\n * @param {?} node\n * @param {?} read\n * @param {?} directiveIdx\n * @return {?}\n */\nfunction readFromNodeInjector(nodeInjector, node, read, directiveIdx) {\n    if (read instanceof ReadFromInjectorFn) {\n        return read.read(nodeInjector, node, directiveIdx);\n    }\n    else {\n        /** @type {?} */\n        var matchingIdx = getIdxOfMatchingDirective(node, /** @type {?} */ (read));\n        if (matchingIdx !== null) {\n            return /** @type {?} */ ((node.view[DIRECTIVES]))[matchingIdx];\n        }\n    }\n    return null;\n}\n/**\n * @param {?} query\n * @param {?} node\n * @return {?}\n */\nfunction add(query, node) {\n    /** @type {?} */\n    var nodeInjector = getOrCreateNodeInjectorForNode(/** @type {?} */ (node));\n    while (query) {\n        /** @type {?} */\n        var predicate = query.predicate;\n        /** @type {?} */\n        var type = predicate.type;\n        if (type) {\n            /** @type {?} */\n            var directiveIdx = getIdxOfMatchingDirective(node, type);\n            if (directiveIdx !== null) {\n                /** @type {?} */\n                var result = readFromNodeInjector(nodeInjector, node, predicate.read || type, directiveIdx);\n                if (result !== null) {\n                    addMatch(query, result);\n                }\n            }\n        }\n        else {\n            /** @type {?} */\n            var selector = /** @type {?} */ ((predicate.selector));\n            for (var i = 0; i < selector.length; i++) {\n                /** @type {?} */\n                var directiveIdx = getIdxOfMatchingSelector(node.tNode, selector[i]);\n                if (directiveIdx !== null) {\n                    // a node is matching a predicate - determine what to read\n                    // note that queries using name selector must specify read strategy\n                    ngDevMode && assertDefined(predicate.read, 'the node should have a predicate');\n                    /** @type {?} */\n                    var result = readFromNodeInjector(nodeInjector, node, /** @type {?} */ ((predicate.read)), directiveIdx);\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    /** @type {?} */\n    var isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : /** @type {?} */ (predicate),\n        selector: isArray ? /** @type {?} */ (predicate) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: (/** @type {?} */ ((queryList)))._valuesTree,\n        containerValues: null\n    };\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nQueryList_ = /** @class */ (function () {\n    function QueryList_() {\n        this.dirty = true;\n        this.changes = new EventEmitter();\n        this._values = [];\n        /**\n         * \\@internal\n         */\n        this._valuesTree = [];\n    }\n    Object.defineProperty(QueryList_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._values.length; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"first\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var values = this._values;\n            return values.length ? values[0] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"last\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var values = this._values;\n            return values.length ? values[values.length - 1] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._values.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList_.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._values.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._values.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._values.slice(0); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._values))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._values.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList_.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._values = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.setDirty = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList_;\n}());\nif (false) {\n    /** @type {?} */\n    QueryList_.prototype.dirty;\n    /** @type {?} */\n    QueryList_.prototype.changes;\n    /** @type {?} */\n    QueryList_.prototype._values;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    QueryList_.prototype._valuesTree;\n}\n/** @type {?} */\nexport var QueryList = /** @type {?} */ (QueryList_);\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param {?} predicate The type for which the query will search\n * @param {?=} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function query(memoryIndex, predicate, descend, read) {\n    ngDevMode && assertPreviousIsParent();\n    /** @type {?} */\n    var queryList = new QueryList();\n    /** @type {?} */\n    var queries = getOrCreateCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(null, queryList, queryList.destroy);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nexport function queryRefresh(queryList) {\n    /** @type {?} */\n    var queryListImpl = (/** @type {?} */ ((queryList)));\n    if (queryList.dirty) {\n        queryList.reset(queryListImpl._valuesTree);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/** @enum {string} */\nvar BypassType = {\n    Url: 'Url',\n    Html: 'Html',\n    ResourceUrl: 'ResourceUrl',\n    Script: 'Script',\n    Style: 'Style',\n};\nexport { BypassType };\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {\\@link TrustedHtmlString}, {\\@link TrustedResourceUrlString}, {\\@link TrustedScriptString},\n * {\\@link TrustedStyleString}, {\\@link TrustedUrlString}\n * @record\n */\nexport function TrustedString() { }\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {\\@link bypassSanitizationTrustHtml} and {\\@link htmlSanitizer}.\n * @record\n */\nexport function TrustedHtmlString() { }\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {\\@link bypassSanitizationTrustStyle} and {\\@link styleSanitizer}.\n * @record\n */\nexport function TrustedStyleString() { }\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustScript} and {\\@link scriptSanitizer}.\n * @record\n */\nexport function TrustedScriptString() { }\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustUrl} and {\\@link urlSanitizer}.\n * @record\n */\nexport function TrustedUrlString() { }\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {\\@link bypassSanitizationTrustResourceUrl} and {\\@link resourceUrlSanitizer}.\n * @record\n */\nexport function TrustedResourceUrlString() { }\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nexport function allowSanitizationBypass(value, type) {\n    return (value instanceof String && (/** @type {?} */ (value))[BRAND] === type) ? true : false;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    /** @type {?} */\n    var trusted = /** @type {?} */ (new String(trustedString));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n//# sourceMappingURL=bypass.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nvar /**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nInertBodyHelper = /** @class */ (function () {\n    function InertBodyHelper(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            /** @type {?} */\n            var inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_XHR = /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (e) {\n            return null;\n        }\n        /** @type {?} */\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        /** @type {?} */\n        var body = xhr.response.body;\n        body.removeChild(/** @type {?} */ ((body.firstChild)));\n        return body;\n    };\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            /** @type {?} */\n            var body = /** @type {?} */ (new (/** @type {?} */ (window))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body);\n            body.removeChild(/** @type {?} */ ((body.firstChild)));\n            return body;\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        /** @type {?} */\n        var templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if ((/** @type {?} */ (this.defaultDoc)).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    };\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    InertBodyHelper.prototype.stripCustomNsAttrs = /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        /** @type {?} */\n        var elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (var i = elAttrs.length - 1; 0 < i; i--) {\n            /** @type {?} */\n            var attrib = elAttrs.item(i);\n            /** @type {?} */\n            var attrName = /** @type {?} */ ((attrib)).name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        /** @type {?} */\n        var childNode = el.firstChild;\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(/** @type {?} */ (childNode));\n            childNode = childNode.nextSibling;\n        }\n    };\n    return InertBodyHelper;\n}());\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nexport { InertBodyHelper };\nif (false) {\n    /** @type {?} */\n    InertBodyHelper.prototype.inertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.inertDocument;\n    /**\n     * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n     * The implementation of this is determined in the constructor, when the class is instantiated.\n     * @type {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.defaultDoc;\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!(/** @type {?} */ (window)).DOMParser;\n    }\n    catch (e) {\n        return false;\n    }\n}\n//# sourceMappingURL=inert_body.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\n/** *\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n  @type {?} */\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** @type {?} */\nvar SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** *\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n  @type {?} */\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nexport function _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nexport function sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n}\n//# sourceMappingURL=url_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\nimport { InertBodyHelper } from './inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from './url_sanitizer';\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    /** @type {?} */\n    var res = {};\n    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {\n        var t = _a[_i];\n        res[t] = true;\n    }\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    /** @type {?} */\n    var res = {};\n    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {\n        var s = sets_1[_a];\n        for (var v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n/** @type {?} */\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n/** @type {?} */\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nvar OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n/** @type {?} */\nvar BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n/** @type {?} */\nvar INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nvar VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n/** @type {?} */\nvar URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n/** @type {?} */\nvar SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n/** @type {?} */\nvar VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar /**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nSanitizingHtmlSerializer = /** @class */ (function () {\n    function SanitizingHtmlSerializer() {\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        /** @type {?} */\n        var current = /** @type {?} */ ((el.firstChild));\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                this.startElement(/** @type {?} */ (current));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(/** @type {?} */ ((current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (current.firstChild) {\n                current = /** @type {?} */ ((current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(/** @type {?} */ (current));\n                }\n                /** @type {?} */\n                var next = this.checkClobberedElement(current, /** @type {?} */ ((current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, /** @type {?} */ ((current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.startElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return;\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        /** @type {?} */\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            var elAttr = elAttrs.item(i);\n            /** @type {?} */\n            var attrName = /** @type {?} */ ((elAttr)).name;\n            /** @type {?} */\n            var lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            /** @type {?} */\n            var value = /** @type {?} */ ((elAttr)).value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n    };\n    /**\n     * @param {?} current\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.endElement = /**\n     * @param {?} current\n     * @return {?}\n     */\n    function (current) {\n        /** @type {?} */\n        var tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.chars = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) { this.buf.push(encodeEntities(chars)); };\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    function (node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + ((/** @type {?} */ (node))).outerHTML);\n        }\n        return nextNode;\n    };\n    return SanitizingHtmlSerializer;\n}());\nif (false) {\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.sanitizedSomething;\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.buf;\n}\n/** @type {?} */\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n/** @type {?} */\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        /** @type {?} */\n        var hi = match.charCodeAt(0);\n        /** @type {?} */\n        var low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/** @type {?} */\nvar inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    /** @type {?} */\n    var inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        /** @type {?} */\n        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        /** @type {?} */\n        var mXSSAttempts = 5;\n        /** @type {?} */\n        var parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = /** @type {?} */ ((inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        /** @type {?} */\n        var sanitizer = new SanitizingHtmlSerializer();\n        /** @type {?} */\n        var safeHtml = sanitizer.sanitizeChildren(/** @type {?} */ (getTemplateContent(/** @type {?} */ ((inertBodyElement)))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            /** @type {?} */\n            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n    return 'content' in (/** @type {?} */ (el /** Microsoft/TypeScript#21517 */) /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n//# sourceMappingURL=html_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nexport { SecurityContext };\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n * @abstract\n */\nvar /**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n * @abstract\n */\nSanitizer = /** @class */ (function () {\n    function Sanitizer() {\n    }\n    return Sanitizer;\n}());\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n * @abstract\n */\nexport { Sanitizer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    Sanitizer.prototype.sanitize = function (context, value) { };\n}\n//# sourceMappingURL=security.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\nimport { _sanitizeUrl } from './url_sanitizer';\n/** *\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n  @type {?} */\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n/** @type {?} */\nvar COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nvar CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n    (FN_ARGS + \")$\"), 'g');\n/** *\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n  @type {?} */\nvar URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    /** @type {?} */\n    var outsideSingle = true;\n    /** @type {?} */\n    var outsideDouble = true;\n    for (var i = 0; i < value.length; i++) {\n        /** @type {?} */\n        var c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    /** @type {?} */\n    var urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n    }\n    return 'unsafe';\n}\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n * @record\n */\nexport function StyleSanitizeFn() { }\n//# sourceMappingURL=style_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getCurrentSanitizer } from '../render3/instructions';\nimport { stringify } from '../render3/util';\nimport { allowSanitizationBypass } from './bypass';\nimport { _sanitizeHtml as _sanitizeHtml } from './html_sanitizer';\nimport { SecurityContext } from './security';\nimport { _sanitizeStyle as _sanitizeStyle } from './style_sanitizer';\nimport { _sanitizeUrl as _sanitizeUrl } from './url_sanitizer';\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport function sanitizeHtml(unsafeHtml) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, stringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport function sanitizeStyle(unsafeStyle) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(stringify(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport function sanitizeUrl(unsafeUrl) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(stringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport function sanitizeResourceUrl(unsafeResourceUrl) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link bypassSanitizationTrustScript}.\n *\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts`s have been allowed to pass.\n */\nexport function sanitizeScript(unsafeScript) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/** *\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n  @type {?} */\nexport var defaultStyleSanitizer = (/** @type {?} */ (function (prop, value) {\n    if (value === undefined) {\n        return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n            prop === 'filter' || prop === 'filter' || prop === 'list-style' ||\n            prop === 'list-style-image';\n    }\n    return sanitizeStyle(value);\n}));\n//# sourceMappingURL=sanitization.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable, defineInjector, } from '../../di/defs';\nimport { inject } from '../../di/injector';\nimport * as r3 from '../index';\nimport * as sanitization from '../../sanitization/sanitization';\n/** *\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n  @type {?} */\nexport var angularCoreEnv = {\n    'ɵdefineBase': r3.defineBase,\n    'ɵdefineComponent': r3.defineComponent,\n    'ɵdefineDirective': r3.defineDirective,\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    'ɵdefineNgModule': r3.defineNgModule,\n    'ɵdefinePipe': r3.definePipe,\n    'ɵdirectiveInject': r3.directiveInject,\n    'ɵgetFactoryOf': r3.getFactoryOf,\n    'ɵgetInheritedFactory': r3.getInheritedFactory,\n    'inject': inject,\n    'ɵinjectAttribute': r3.injectAttribute,\n    'ɵinjectChangeDetectorRef': r3.injectChangeDetectorRef,\n    'ɵinjectElementRef': r3.injectElementRef,\n    'ɵinjectTemplateRef': r3.injectTemplateRef,\n    'ɵinjectViewContainerRef': r3.injectViewContainerRef,\n    'ɵtemplateRefExtractor': r3.templateRefExtractor,\n    'ɵinjectRenderer2': r3.injectRenderer2,\n    'ɵNgOnChangesFeature': r3.NgOnChangesFeature,\n    'ɵPublicFeature': r3.PublicFeature,\n    'ɵInheritDefinitionFeature': r3.InheritDefinitionFeature,\n    'ɵelementAttribute': r3.elementAttribute,\n    'ɵbind': r3.bind,\n    'ɵcontainer': r3.container,\n    'ɵnextContext': r3.nextContext,\n    'ɵcontainerRefreshStart': r3.containerRefreshStart,\n    'ɵcontainerRefreshEnd': r3.containerRefreshEnd,\n    'ɵloadDirective': r3.loadDirective,\n    'ɵloadQueryList': r3.loadQueryList,\n    'ɵnamespaceHTML': r3.namespaceHTML,\n    'ɵnamespaceMathML': r3.namespaceMathML,\n    'ɵnamespaceSVG': r3.namespaceSVG,\n    'ɵelementStart': r3.elementStart,\n    'ɵelementEnd': r3.elementEnd,\n    'ɵelement': r3.element,\n    'ɵEC': r3.elementContainerStart,\n    'ɵeC': r3.elementContainerEnd,\n    'ɵpureFunction0': r3.pureFunction0,\n    'ɵpureFunction1': r3.pureFunction1,\n    'ɵpureFunction2': r3.pureFunction2,\n    'ɵpureFunction3': r3.pureFunction3,\n    'ɵpureFunction4': r3.pureFunction4,\n    'ɵpureFunction5': r3.pureFunction5,\n    'ɵpureFunction6': r3.pureFunction6,\n    'ɵpureFunction7': r3.pureFunction7,\n    'ɵpureFunction8': r3.pureFunction8,\n    'ɵpureFunctionV': r3.pureFunctionV,\n    'ɵgetCurrentView': r3.getCurrentView,\n    'ɵrestoreView': r3.restoreView,\n    'ɵinterpolation1': r3.interpolation1,\n    'ɵinterpolation2': r3.interpolation2,\n    'ɵinterpolation3': r3.interpolation3,\n    'ɵinterpolation4': r3.interpolation4,\n    'ɵinterpolation5': r3.interpolation5,\n    'ɵinterpolation6': r3.interpolation6,\n    'ɵinterpolation7': r3.interpolation7,\n    'ɵinterpolation8': r3.interpolation8,\n    'ɵinterpolationV': r3.interpolationV,\n    'ɵelementClassProp': r3.elementClassProp,\n    'ɵlistener': r3.listener,\n    'ɵload': r3.load,\n    'ɵprojection': r3.projection,\n    'ɵelementProperty': r3.elementProperty,\n    'ɵpipeBind1': r3.pipeBind1,\n    'ɵpipeBind2': r3.pipeBind1,\n    'ɵpipeBind3': r3.pipeBind3,\n    'ɵpipeBind4': r3.pipeBind4,\n    'ɵpipeBindV': r3.pipeBindV,\n    'ɵprojectionDef': r3.projectionDef,\n    'ɵpipe': r3.pipe,\n    'ɵquery': r3.query,\n    'ɵqueryRefresh': r3.queryRefresh,\n    'ɵregisterContentQuery': r3.registerContentQuery,\n    'ɵreference': r3.reference,\n    'ɵelementStyling': r3.elementStyling,\n    'ɵelementStylingMap': r3.elementStylingMap,\n    'ɵelementStylingProp': r3.elementStyleProp,\n    'ɵelementStylingApply': r3.elementStylingApply,\n    'ɵtemplate': r3.template,\n    'ɵtext': r3.text,\n    'ɵtextBinding': r3.textBinding,\n    'ɵembeddedViewStart': r3.embeddedViewStart,\n    'ɵembeddedViewEnd': r3.embeddedViewEnd,\n    'ɵsanitizeHtml': sanitization.sanitizeHtml,\n    'ɵsanitizeStyle': sanitization.sanitizeStyle,\n    'ɵdefaultStyleSanitizer': sanitization.defaultStyleSanitizer,\n    'ɵsanitizeResourceUrl': sanitization.sanitizeResourceUrl,\n    'ɵsanitizeScript': sanitization.sanitizeScript,\n    'ɵsanitizeUrl': sanitization.sanitizeUrl\n};\n//# sourceMappingURL=environment.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** *\n * \\@description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n *\n  @type {?} */\nexport var Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isType(v) {\n    return typeof v === 'function';\n}\n//# sourceMappingURL=type.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type, isType } from '../type';\nimport { global, stringify } from '../util';\nimport { ANNOTATIONS, PARAMETERS, PROP_METADATA } from '../util/decorators';\n/** *\n * Attention: These regex has to hold even if the code is minified!\n  @type {?} */\nexport var DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n/** @type {?} */\nexport var INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{/;\n/** @type {?} */\nexport var INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{[\\s\\S]*constructor\\s*\\(/;\nvar ReflectionCapabilities = /** @class */ (function () {\n    function ReflectionCapabilities(reflect) {\n        this._reflect = reflect || global['Reflect'];\n    }\n    /**\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.isReflectionEnabled = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.factory = /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) { return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new (t.bind.apply(t, [void 0].concat(args)))();\n    }; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._zipTypesAndAnnotations = /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    function (paramTypes, paramAnnotations) {\n        /** @type {?} */\n        var result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (var i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownParameters = /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (type, parentCtor) {\n        /** @type {?} */\n        var typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if ((/** @type {?} */ (type)).parameters && (/** @type {?} */ (type)).parameters !== parentCtor.parameters) {\n            return (/** @type {?} */ (type)).parameters;\n        }\n        /** @type {?} */\n        var tsickleCtorParams = (/** @type {?} */ (type)).ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            /** @type {?} */\n            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            /** @type {?} */\n            var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n            /** @type {?} */\n            var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n            });\n            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n        }\n        /** @type {?} */\n        var paramAnnotations = type.hasOwnProperty(PARAMETERS) && (/** @type {?} */ (type))[PARAMETERS];\n        /** @type {?} */\n        var paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array((/** @type {?} */ (type.length))).fill(undefined);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.parameters = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(type);\n        /** @type {?} */\n        var parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownAnnotations = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).annotations && (/** @type {?} */ (typeOrFunc)).annotations !== parentCtor.annotations) {\n            /** @type {?} */\n            var annotations = (/** @type {?} */ (typeOrFunc)).annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).decorators && (/** @type {?} */ (typeOrFunc)).decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata((/** @type {?} */ (typeOrFunc)).decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return (/** @type {?} */ (typeOrFunc))[ANNOTATIONS];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        /** @type {?} */\n        var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownPropMetadata = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).propMetadata &&\n            (/** @type {?} */ (typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n            /** @type {?} */\n            var propMetadata = (/** @type {?} */ (typeOrFunc)).propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).propDecorators &&\n            (/** @type {?} */ (typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n            /** @type {?} */\n            var propDecorators_1 = (/** @type {?} */ (typeOrFunc)).propDecorators;\n            /** @type {?} */\n            var propMetadata_1 = /** @type {?} */ ({});\n            Object.keys(propDecorators_1).forEach(function (prop) {\n                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n            });\n            return propMetadata_1;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return (/** @type {?} */ (typeOrFunc))[PROP_METADATA];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        var propMetadata = {};\n        if (parentCtor !== Object) {\n            /** @type {?} */\n            var parentPropMetadata_1 = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                propMetadata[propName] = parentPropMetadata_1[propName];\n            });\n        }\n        /** @type {?} */\n        var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach(function (propName) {\n                /** @type {?} */\n                var decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push.apply(decorators, propMetadata[propName]);\n                }\n                decorators.push.apply(decorators, ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.guards = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return {}; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return /** @type {?} */ (new Function('o', 'return o.' + name + ';')); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return /** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;'));\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        /** @type {?} */\n        var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n        return /** @type {?} */ (new Function('o', 'args', functionBody));\n    };\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return \"./\" + stringify(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return \"./\" + stringify(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return runtime;\n    };\n    /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveEnum = /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (enumIdentifier, name) { return enumIdentifier[name]; };\n    return ReflectionCapabilities;\n}());\nexport { ReflectionCapabilities };\nif (false) {\n    /** @type {?} */\n    ReflectionCapabilities.prototype._reflect;\n}\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(function (decoratorInvocation) {\n        /** @type {?} */\n        var decoratorType = decoratorInvocation.type;\n        /** @type {?} */\n        var annotationCls = decoratorType.annotationCls;\n        /** @type {?} */\n        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n    });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor) {\n    /** @type {?} */\n    var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    /** @type {?} */\n    var parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n//# sourceMappingURL=reflection_capabilities.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LiteralExpr, R3ResolvedDependencyType, WrappedNodeExpr } from '@angular/compiler';\nimport { Injector } from '../../di/injector';\nimport { Host, Inject, Optional, Self, SkipSelf } from '../../di/metadata';\nimport { ElementRef } from '../../linker/element_ref';\nimport { TemplateRef } from '../../linker/template_ref';\nimport { ViewContainerRef } from '../../linker/view_container_ref';\nimport { Attribute } from '../../metadata/di';\nimport { ReflectionCapabilities } from '../../reflection/reflection_capabilities';\n/** @type {?} */\nvar _reflect = null;\n/**\n * @return {?}\n */\nexport function getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nexport function convertDependencies(deps) {\n    return deps.map(function (dep) { return reflectDependency(dep); });\n}\n/**\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(dep) {\n    /** @type {?} */\n    var meta = {\n        token: new LiteralExpr(null),\n        host: false,\n        optional: false,\n        resolved: R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function setTokenAndResolvedType(token) {\n        if (token === ElementRef) {\n            meta.resolved = R3ResolvedDependencyType.ElementRef;\n        }\n        else if (token === Injector) {\n            meta.resolved = R3ResolvedDependencyType.Injector;\n        }\n        else if (token === TemplateRef) {\n            meta.resolved = R3ResolvedDependencyType.TemplateRef;\n        }\n        else if (token === ViewContainerRef) {\n            meta.resolved = R3ResolvedDependencyType.ViewContainerRef;\n        }\n        else {\n            meta.resolved = R3ResolvedDependencyType.Token;\n        }\n        meta.token = new WrappedNodeExpr(token);\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (var j = 0; j < dep.length; j++) {\n            /** @type {?} */\n            var param = dep[j];\n            if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = new WrappedNodeExpr(param.token);\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(\"Attribute name must be defined.\");\n                }\n                meta.token = new LiteralExpr(param.attributeName);\n                meta.resolved = R3ResolvedDependencyType.Attribute;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedNodeExpr, compileInjector, compileNgModule as compileR3NgModule, jitExpression } from '@angular/compiler';\nimport { angularCoreEnv } from './environment';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_INJECTOR_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from './fields';\nimport { reflectDependencies } from './util';\n/** @type {?} */\nvar EMPTY_ARRAY = [];\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nexport function compileNgModule(moduleType, ngModule) {\n    compileNgModuleDefs(moduleType, ngModule);\n    setScopeOnDeclaredComponents(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nexport function compileNgModuleDefs(moduleType, ngModule) {\n    /** @type {?} */\n    var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    var ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        get: function () {\n            if (ngModuleDef === null) {\n                /** @type {?} */\n                var meta = {\n                    type: wrap(moduleType),\n                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrap),\n                    declarations: declarations.map(wrapReference),\n                    imports: flatten(ngModule.imports || EMPTY_ARRAY)\n                        .map(expandModuleWithProviders)\n                        .map(wrapReference),\n                    exports: flatten(ngModule.exports || EMPTY_ARRAY)\n                        .map(expandModuleWithProviders)\n                        .map(wrapReference),\n                    emitInline: true,\n                };\n                /** @type {?} */\n                var res = compileR3NgModule(meta);\n                ngModuleDef = jitExpression(res.expression, angularCoreEnv, \"ng://\" + moduleType.name + \"/ngModuleDef.js\", []);\n            }\n            return ngModuleDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    /** @type {?} */\n    var ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: function () {\n            if (ngInjectorDef === null) {\n                /** @type {?} */\n                var meta = {\n                    name: moduleType.name,\n                    type: wrap(moduleType),\n                    deps: reflectDependencies(moduleType),\n                    providers: new WrappedNodeExpr(ngModule.providers || EMPTY_ARRAY),\n                    imports: new WrappedNodeExpr([\n                        ngModule.imports || EMPTY_ARRAY,\n                        ngModule.exports || EMPTY_ARRAY,\n                    ]),\n                };\n                /** @type {?} */\n                var res = compileInjector(meta);\n                ngInjectorDef = jitExpression(res.expression, angularCoreEnv, \"ng://\" + moduleType.name + \"/ngInjectorDef.js\", res.statements);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    /** @type {?} */\n    var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    var transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(function (declaration) {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            /** @type {?} */\n            var component = /** @type {?} */ (declaration);\n            /** @type {?} */\n            var componentDef = component.ngComponentDef;\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            (/** @type {?} */ (declaration)).ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} componentDef\n * @param {?} transitiveScopes\n * @return {?}\n */\nexport function patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = function () { return Array.from(transitiveScopes.compilation.directives)\n        .map(function (dir) { return dir.ngDirectiveDef || dir.ngComponentDef; })\n        .filter(function (def) { return !!def; }); };\n    componentDef.pipeDefs = function () {\n        return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) { return pipe.ngPipeDef; });\n    };\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nexport function transitiveScopesFor(moduleType) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(moduleType.name + \" does not have an ngModuleDef\");\n    }\n    /** @type {?} */\n    var def = moduleType.ngModuleDef;\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    /** @type {?} */\n    var scopes = {\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    def.declarations.forEach(function (declared) {\n        /** @type {?} */\n        var declaredWithDefs = /** @type {?} */ (declared);\n        if (declaredWithDefs.ngPipeDef !== undefined) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    def.imports.forEach(function (imported) {\n        /** @type {?} */\n        var importedTyped = /** @type {?} */ (imported);\n        if (!isNgModule(importedTyped)) {\n            throw new Error(\"Importing \" + importedTyped.name + \" which does not have an ngModuleDef\");\n        }\n        /** @type {?} */\n        var importedScope = transitiveScopesFor(importedTyped);\n        importedScope.exported.directives.forEach(function (entry) { return scopes.compilation.directives.add(entry); });\n        importedScope.exported.pipes.forEach(function (entry) { return scopes.compilation.pipes.add(entry); });\n    });\n    def.exports.forEach(function (exported) {\n        /** @type {?} */\n        var exportedTyped = /** @type {?} */ (exported);\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedTyped)) {\n            /** @type {?} */\n            var exportedScope = transitiveScopesFor(exportedTyped);\n            exportedScope.exported.directives.forEach(function (entry) {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(function (entry) {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (exportedTyped.ngPipeDef !== undefined) {\n            scopes.exported.pipes.add(exportedTyped);\n        }\n        else {\n            scopes.exported.directives.add(exportedTyped);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\n/**\n * @template T\n * @param {?} values\n * @return {?}\n */\nfunction flatten(values) {\n    /** @type {?} */\n    var out = [];\n    values.forEach(function (value) {\n        if (Array.isArray(value)) {\n            out.push.apply(out, flatten(value));\n        }\n        else {\n            out.push(value);\n        }\n    });\n    return out;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction wrap(value) {\n    return new WrappedNodeExpr(value);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction wrapReference(value) {\n    /** @type {?} */\n    var wrapped = wrap(value);\n    return { value: wrapped, type: wrapped };\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n    return (/** @type {?} */ (value)).ngModule !== undefined;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n    return (/** @type {?} */ (value)).ngModuleDef !== undefined;\n}\n//# sourceMappingURL=module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ConstantPool, WrappedNodeExpr, compileComponentFromMetadata as compileR3Component, compileDirectiveFromMetadata as compileR3Directive, jitExpression, makeBindingParser, parseHostBindings, parseTemplate } from '@angular/compiler';\nimport { componentNeedsResolution, maybeQueueResolutionOfComponentResources } from '../../metadata/resource_loading';\nimport { ViewEncapsulation } from '../../metadata/view';\nimport { stringify } from '../../util';\nimport { angularCoreEnv } from './environment';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF } from './fields';\nimport { patchComponentDefWithScope, transitiveScopesFor } from './module';\nimport { getReflect, reflectDependencies } from './util';\n/** @typedef {?} */\nvar StringMap;\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nexport function compileComponent(type, metadata) {\n    /** @type {?} */\n    var ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: function () {\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    /** @type {?} */\n                    var error = [\"Component '\" + stringify(type) + \"' is not resolved:\"];\n                    if (metadata.templateUrl) {\n                        error.push(\" - templateUrl: \" + stringify(metadata.templateUrl));\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(\" - styleUrls: \" + JSON.stringify(metadata.styleUrls));\n                    }\n                    error.push(\"Did you run and wait for 'resolveComponentResources()'?\");\n                    throw new Error(error.join('\\n'));\n                }\n                /** @type {?} */\n                var constantPool = new ConstantPool();\n                /** @type {?} */\n                var template = parseTemplate(/** @type {?} */ ((metadata.template)), \"ng://\" + stringify(type) + \"/template.html\", {\n                    preserveWhitespaces: metadata.preserveWhitespaces || false,\n                }, '');\n                if (template.errors !== undefined) {\n                    /** @type {?} */\n                    var errors = template.errors.map(function (err) { return err.toString(); }).join(', ');\n                    throw new Error(\"Errors during JIT compilation of template for \" + stringify(type) + \": \" + errors);\n                }\n                /** @type {?} */\n                var res = compileR3Component(tslib_1.__assign({}, directiveMetadata(type, metadata), { template: template, directives: new Map(), pipes: new Map(), viewQueries: [], wrapDirectivesInClosure: false, styles: metadata.styles || [], encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated }), constantPool, makeBindingParser());\n                /** @type {?} */\n                var preStatements = constantPool.statements.concat(res.statements);\n                ngComponentDef = jitExpression(res.expression, angularCoreEnv, \"ng://\" + type.name + \"/ngComponentDef.js\", preStatements);\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    /** @type {?} */\n                    var scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n            }\n            return ngComponentDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n    return (/** @type {?} */ (component)).ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nexport function compileDirective(type, directive) {\n    /** @type {?} */\n    var ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: function () {\n            if (ngDirectiveDef === null) {\n                /** @type {?} */\n                var constantPool = new ConstantPool();\n                /** @type {?} */\n                var sourceMapUrl = \"ng://\" + (type && type.name) + \"/ngDirectiveDef.js\";\n                /** @type {?} */\n                var res = compileR3Directive(directiveMetadata(type, directive), constantPool, makeBindingParser());\n                /** @type {?} */\n                var preStatements = constantPool.statements.concat(res.statements);\n                ngDirectiveDef = jitExpression(res.expression, angularCoreEnv, sourceMapUrl, preStatements);\n            }\n            return ngDirectiveDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n    /** @type {?} */\n    var propMetadata = getReflect().propMetadata(type);\n    /** @type {?} */\n    var host = extractHostBindings(metadata, propMetadata);\n    /** @type {?} */\n    var inputsFromMetadata = parseInputOutputs(metadata.inputs || []);\n    /** @type {?} */\n    var outputsFromMetadata = parseInputOutputs(metadata.outputs || []);\n    /** @type {?} */\n    var inputsFromType = {};\n    /** @type {?} */\n    var outputsFromType = {};\n    var _loop_1 = function (field) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(function (ann) {\n                if (isInput(ann)) {\n                    inputsFromType[field] = ann.bindingPropertyName || field;\n                }\n                else if (isOutput(ann)) {\n                    outputsFromType[field] = ann.bindingPropertyName || field;\n                }\n            });\n        }\n    };\n    for (var field in propMetadata) {\n        _loop_1(field);\n    }\n    return {\n        name: type.name,\n        type: new WrappedNodeExpr(type),\n        typeArgumentCount: 0,\n        selector: /** @type {?} */ ((metadata.selector)),\n        deps: reflectDependencies(type), host: host,\n        inputs: tslib_1.__assign({}, inputsFromMetadata, inputsFromType),\n        outputs: tslib_1.__assign({}, outputsFromMetadata, outputsFromType),\n        queries: [],\n        lifecycle: {\n            usesOnChanges: type.prototype.ngOnChanges !== undefined,\n        },\n        typeSourceSpan: /** @type {?} */ ((null)),\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: metadata.exportAs || null,\n    };\n}\n/**\n * @param {?} metadata\n * @param {?} propMetadata\n * @return {?}\n */\nfunction extractHostBindings(metadata, propMetadata) {\n    var _a = parseHostBindings(metadata.host || {}), attributes = _a.attributes, listeners = _a.listeners, properties = _a.properties, animations = _a.animations;\n    if (Object.keys(animations).length > 0) {\n        throw new Error(\"Animation bindings are as-of-yet unsupported in Ivy\");\n    }\n    var _loop_2 = function (field) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(function (ann) {\n                if (isHostBinding(ann)) {\n                    properties[ann.hostPropertyName || field] = field;\n                }\n                else if (isHostListener(ann)) {\n                    listeners[ann.eventName || field] = field + \"(\" + (ann.args || []).join(',') + \")\";\n                }\n            });\n        }\n    };\n    // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n    for (var field in propMetadata) {\n        _loop_2(field);\n    }\n    return { attributes: attributes, listeners: listeners, properties: properties };\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isInput(value) {\n    return value.ngMetadataName === 'Input';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isOutput(value) {\n    return value.ngMetadataName === 'Output';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isHostBinding(value) {\n    return value.ngMetadataName === 'HostBinding';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isHostListener(value) {\n    return value.ngMetadataName === 'HostListener';\n}\n/**\n * @param {?} values\n * @return {?}\n */\nfunction parseInputOutputs(values) {\n    return values.reduce(function (map, value) {\n        var _a = value.split(',').map(function (piece) { return piece.trim(); }), field = _a[0], property = _a[1];\n        map[field] = property || field;\n        return map;\n    }, /** @type {?} */ ({}));\n}\n//# sourceMappingURL=directive.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LiteralExpr, WrappedNodeExpr, compileInjectable as compileR3Injectable, jitExpression } from '@angular/compiler';\nimport { getClosureSafeProperty } from '../../util/property';\nimport { angularCoreEnv } from './environment';\nimport { NG_INJECTABLE_DEF } from './fields';\nimport { convertDependencies, reflectDependencies } from './util';\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n * @param {?} type\n * @param {?=} srcMeta\n * @return {?}\n */\nexport function compileInjectable(type, srcMeta) {\n    /** @type {?} */\n    var meta = srcMeta || { providedIn: null };\n    /** @type {?} */\n    var def = null;\n    Object.defineProperty(type, NG_INJECTABLE_DEF, {\n        get: function () {\n            if (def === null) {\n                /** @type {?} */\n                var hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n                    isUseValueProvider(meta) || isUseExistingProvider(meta);\n                /** @type {?} */\n                var ctorDeps = reflectDependencies(type);\n                /** @type {?} */\n                var userDeps = undefined;\n                if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n                    userDeps = convertDependencies(meta.deps);\n                }\n                /** @type {?} */\n                var useClass = undefined;\n                /** @type {?} */\n                var useFactory = undefined;\n                /** @type {?} */\n                var useValue = undefined;\n                /** @type {?} */\n                var useExisting = undefined;\n                if (!hasAProvider) {\n                    // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                    // The deps will have been reflected above, causing the factory to create the class by\n                    // calling\n                    // its constructor with injected deps.\n                    useClass = new WrappedNodeExpr(type);\n                }\n                else if (isUseClassProvider(meta)) {\n                    // The user explicitly specified useClass, and may or may not have provided deps.\n                    useClass = new WrappedNodeExpr(meta.useClass);\n                }\n                else if (isUseValueProvider(meta)) {\n                    // The user explicitly specified useValue.\n                    useValue = new WrappedNodeExpr(meta.useValue);\n                }\n                else if (isUseFactoryProvider(meta)) {\n                    // The user explicitly specified useFactory.\n                    useFactory = new WrappedNodeExpr(meta.useFactory);\n                }\n                else if (isUseExistingProvider(meta)) {\n                    // The user explicitly specified useExisting.\n                    useExisting = new WrappedNodeExpr(meta.useExisting);\n                }\n                else {\n                    // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                    throw new Error(\"Unreachable state.\");\n                }\n                var _a = compileR3Injectable({\n                    name: type.name,\n                    type: new WrappedNodeExpr(type),\n                    providedIn: computeProvidedIn(meta.providedIn),\n                    useClass: useClass,\n                    useFactory: useFactory,\n                    useValue: useValue,\n                    useExisting: useExisting,\n                    ctorDeps: ctorDeps,\n                    userDeps: userDeps,\n                }), expression = _a.expression, statements = _a.statements;\n                def = jitExpression(expression, angularCoreEnv, \"ng://\" + type.name + \"/ngInjectableDef.js\", statements);\n            }\n            return def;\n        },\n    });\n}\n/**\n * @param {?} providedIn\n * @return {?}\n */\nfunction computeProvidedIn(providedIn) {\n    if (providedIn == null || typeof providedIn === 'string') {\n        return new LiteralExpr(providedIn);\n    }\n    else {\n        return new WrappedNodeExpr(providedIn);\n    }\n}\n/** @typedef {?} */\nvar UseClassProvider;\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseClassProvider(meta) {\n    return (/** @type {?} */ (meta)).useClass !== undefined;\n}\n/** @type {?} */\nvar GET_PROPERTY_NAME = /** @type {?} */ ({});\nvar ɵ0 = GET_PROPERTY_NAME;\n/** @type {?} */\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0 }, GET_PROPERTY_NAME);\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseValueProvider(meta) {\n    return USE_VALUE in meta;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseFactoryProvider(meta) {\n    return (/** @type {?} */ (meta)).useFactory !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseExistingProvider(meta) {\n    return (/** @type {?} */ (meta)).useExisting !== undefined;\n}\nexport { ɵ0 };\n//# sourceMappingURL=injectable.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedNodeExpr, compilePipeFromMetadata, jitExpression } from '@angular/compiler';\nimport { stringify } from '../util';\nimport { angularCoreEnv } from './environment';\nimport { NG_PIPE_DEF } from './fields';\nimport { reflectDependencies } from './util';\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nexport function compilePipe(type, meta) {\n    /** @type {?} */\n    var ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: function () {\n            if (ngPipeDef === null) {\n                /** @type {?} */\n                var sourceMapUrl = \"ng://\" + stringify(type) + \"/ngPipeDef.js\";\n                /** @type {?} */\n                var name_1 = type.name;\n                /** @type {?} */\n                var res = compilePipeFromMetadata({\n                    name: name_1,\n                    type: new WrappedNodeExpr(type),\n                    deps: reflectDependencies(type),\n                    pipeName: meta.name,\n                    pure: meta.pure !== undefined ? meta.pure : true,\n                });\n                ngPipeDef = jitExpression(res.expression, angularCoreEnv, sourceMapUrl, res.statements);\n            }\n            return ngPipeDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n//# sourceMappingURL=pipe.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable, defineInjector } from './di/defs';\nimport { inject, injectArgs } from './di/injector';\nimport * as ivyOn from './ivy_switch_on';\nimport { ReflectionCapabilities } from './reflection/reflection_capabilities';\nimport { getClosureSafeProperty } from './util/property';\n/**\n * @return {?}\n */\nfunction noop() { }\n/**\n * @record\n */\nexport function DirectiveCompiler() { }\n/** @type {?} */\nexport var R3_COMPILE_COMPONENT__POST_NGCC__ = ivyOn.R3_COMPILE_COMPONENT;\n/** @type {?} */\nexport var R3_COMPILE_DIRECTIVE__POST_NGCC__ = ivyOn.R3_COMPILE_DIRECTIVE;\n/** @type {?} */\nexport var R3_COMPILE_INJECTABLE__POST_NGCC__ = ivyOn.R3_COMPILE_INJECTABLE;\n/** @type {?} */\nexport var R3_COMPILE_NGMODULE__POST_NGCC__ = ivyOn.R3_COMPILE_NGMODULE;\n/** @type {?} */\nexport var R3_COMPILE_PIPE__POST_NGCC__ = ivyOn.R3_COMPILE_PIPE;\n/** @type {?} */\nexport var ivyEnable__POST_NGCC__ = ivyOn.ivyEnabled;\n/** @type {?} */\nvar R3_COMPILE_COMPONENT__PRE_NGCC__ = noop;\n/** @type {?} */\nvar R3_COMPILE_DIRECTIVE__PRE_NGCC__ = noop;\n/** @type {?} */\nvar R3_COMPILE_INJECTABLE__PRE_NGCC__ = preR3InjectableCompile;\n/** @type {?} */\nvar R3_COMPILE_NGMODULE__PRE_NGCC__ = preR3NgModuleCompile;\n/** @type {?} */\nvar R3_COMPILE_PIPE__PRE_NGCC__ = noop;\n/** @type {?} */\nvar ivyEnable__PRE_NGCC__ = false;\n/** @type {?} */\nexport var ivyEnabled = ivyEnable__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_COMPONENT = R3_COMPILE_COMPONENT__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_DIRECTIVE = R3_COMPILE_DIRECTIVE__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_INJECTABLE = R3_COMPILE_INJECTABLE__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_NGMODULE = R3_COMPILE_NGMODULE__PRE_NGCC__;\n/** @type {?} */\nexport var R3_COMPILE_PIPE = R3_COMPILE_PIPE__PRE_NGCC__;\n/**\n * @param {?} moduleType\n * @param {?} metadata\n * @return {?}\n */\nfunction preR3NgModuleCompile(moduleType, metadata) {\n    /** @type {?} */\n    var imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = imports.concat([metadata.exports]);\n    }\n    moduleType.ngInjectorDef = defineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n}\n/** @type {?} */\nvar GET_PROPERTY_NAME = /** @type {?} */ ({});\nvar ɵ0 = GET_PROPERTY_NAME;\n/** @type {?} */\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0 }, GET_PROPERTY_NAME);\n/** @type {?} */\nvar EMPTY_ARRAY = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nfunction convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        /** @type {?} */\n        var reflectionCapabilities = new ReflectionCapabilities();\n        /** @type {?} */\n        var deps_1 = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ (deps_1)))))(); };\n    }\n    if (USE_VALUE in provider) {\n        /** @type {?} */\n        var valueProvider_1 = (/** @type {?} */ (provider));\n        return function () { return valueProvider_1.useValue; };\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        /** @type {?} */\n        var existingProvider_1 = (/** @type {?} */ (provider));\n        return function () { return inject(existingProvider_1.useExisting); };\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        /** @type {?} */\n        var factoryProvider_1 = (/** @type {?} */ (provider));\n        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, injectArgs(factoryProvider_1.deps || EMPTY_ARRAY)); };\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        /** @type {?} */\n        var classProvider_1 = (/** @type {?} */ (provider));\n        /** @type {?} */\n        var deps_2 = (/** @type {?} */ (provider)).deps;\n        if (!deps_2) {\n            /** @type {?} */\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_2 = reflectionCapabilities.parameters(type);\n        }\n        return function () {\n            var _a;\n            return new ((_a = classProvider_1.useClass).bind.apply(_a, [void 0].concat(injectArgs(deps_2))))();\n        };\n    }\n    else {\n        /** @type {?} */\n        var deps_3 = (/** @type {?} */ (provider)).deps;\n        if (!deps_3) {\n            /** @type {?} */\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_3 = reflectionCapabilities.parameters(type);\n        }\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ ((deps_3))))))(); };\n    }\n}\n/**\n * Supports \\@Injectable() in JIT mode for Render2.\n * @param {?} injectableType\n * @param {?} options\n * @return {?}\n */\nfunction preR3InjectableCompile(injectableType, options) {\n    if (options && options.providedIn !== undefined && injectableType.ngInjectableDef === undefined) {\n        /** @nocollapse */ injectableType.ngInjectableDef = defineInjectable({\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options),\n        });\n    }\n}\nexport { ɵ0 };\n//# sourceMappingURL=ivy_switch_legacy.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { R3_COMPILE_COMPONENT, R3_COMPILE_DIRECTIVE, R3_COMPILE_PIPE } from '../ivy_switch';\nimport { makeDecorator, makePropDecorator } from '../util/decorators';\nimport { fillProperties } from '../util/property';\n/**\n * Type of the Directive decorator / constructor function.\n * @record\n */\nexport function DirectiveDecorator() { }\n/** *\n * Type of the Directive metadata.\n  @type {?} */\nexport var Directive = makeDecorator('Directive', function (dir) {\n    if (dir === void 0) { dir = {}; }\n    return dir;\n}, undefined, undefined, function (type, meta) { return R3_COMPILE_DIRECTIVE(type, meta); });\n/**\n * Component decorator interface\n *\n * @record\n */\nexport function ComponentDecorator() { }\n/** *\n * Component decorator and metadata.\n *\n * \\@usageNotes\n *\n * ### Using animations\n *\n * The following snippet shows an animation trigger in a component's\n * metadata. The trigger is attached to an element in the component's\n * template, using \"\\@_trigger_name_\", and a state expression that is evaluated\n * at run time to determine whether the animation should start.\n *\n * ```typescript\n * \\@Component({\n *   selector: 'animation-cmp',\n *   templateUrl: 'animation-cmp.html',\n *   animations: [\n *     trigger('myTriggerName', [\n *       state('on', style({ opacity: 1 }),\n *       state('off', style({ opacity: 0 }),\n *       transition('on => off', [\n *         animate(\"1s\")\n *       ])\n *     ])\n *   ]\n * })\n * ```\n *\n * ```html\n * <!-- animation-cmp.html -->\n * <div \\@myTriggerName=\"expression\">...</div>\n * ```\n *\n * ### Preserving whitespace\n *\n * Removing whitespace can greatly reduce AOT-generated code size, and speed up view creation.\n * As of Angular 6, default for `preserveWhitespaces` is false (whitespace is removed).\n * To change the default setting for all components in your application, set\n * the `preserveWhitespaces` option of the AOT compiler.\n *\n * Current implementation removes whitespace characters as follows:\n * - Trims all whitespaces at the beginning and the end of a template.\n * - Removes whitespace-only text nodes. For example,\n * `<button>Action 1</button>  <button>Action 2</button>` becomes\n * `<button>Action 1</button><button>Action 2</button>`.\n * - Replaces a series of whitespace characters in text nodes with a single space.\n * For example, `<span>\\n some text\\n</span>` becomes `<span> some text </span>`.\n * - Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,\n * where whitespace characters are significant.\n *\n * Note that these transformations can influence DOM nodes layout, although impact\n * should be minimal.\n *\n * You can override the default behavior to preserve whitespace characters\n * in certain fragments of a template. For example, you can exclude an entire\n * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:\n *\n * ```html\n * <div ngPreserveWhitespaces>\n *     whitespaces are preserved here\n *     <span>    and here </span>\n * </div>\n * ```\n *\n * You can force a single space to be preserved in a text node by using `&ngsp;`,\n * which is replaced with a space character by Angular's template\n * compiler:\n *\n * ```html\n * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n * <!-->compiled to be equivalent to:</>\n *  <a>Spaces</a> <a>between</a> <a>links.</a>\n * ```\n *\n * Note that sequences of `&ngsp;` are still collapsed to just one space character when\n * the `preserveWhitespaces` option is set to `false`.\n *\n * ```html\n * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n * <!-->compiled to be equivalent to:</>\n *  <a>Spaces</a> <a>between</a> <a>links.</a>\n * ```\n *\n * To preserve sequences of whitespace characters, use the\n * `ngPreserveWhitespaces` attribute.\n *\n * \\@Annotation\n  @type {?} */\nexport var Component = makeDecorator('Component', function (c) {\n    if (c === void 0) { c = {}; }\n    return (tslib_1.__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\n}, Directive, undefined, function (type, meta) { return R3_COMPILE_COMPONENT(type, meta); });\n/**\n * Type of the Pipe decorator / constructor function.\n * @record\n */\nexport function PipeDecorator() { }\n/** *\n *\n *\n * \\@Annotation\n  @type {?} */\nexport var Pipe = makeDecorator('Pipe', function (p) { return (tslib_1.__assign({ pure: true }, p)); }, undefined, undefined, function (type, meta) { return R3_COMPILE_PIPE(type, meta); });\n/**\n *\n * @record\n */\nexport function InputDecorator() { }\n/** @type {?} */\nvar initializeBaseDef = function (target) {\n    /** @type {?} */\n    var constructor = target.constructor;\n    /** @type {?} */\n    var inheritedBaseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    var baseDef = constructor.ngBaseDef = {\n        inputs: {},\n        outputs: {},\n        declaredInputs: {},\n    };\n    if (inheritedBaseDef) {\n        fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n        fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n        fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n    }\n};\nvar ɵ0 = initializeBaseDef;\n/** *\n * Used to get the minified alias of ngBaseDef\n  @type {?} */\nvar NG_BASE_DEF = Object.keys({ ngBaseDef: true })[0];\n/** *\n * Does the work of creating the `ngBaseDef` property for the \\@Input and \\@Output decorators.\n * \\@param key \"inputs\" or \"outputs\"\n  @type {?} */\nvar updateBaseDefFromIOProp = function (getProp) {\n    return function (target, name) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        /** @type {?} */\n        var constructor = target.constructor;\n        if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n            initializeBaseDef(target);\n        }\n        /** @type {?} */\n        var baseDef = constructor.ngBaseDef;\n        /** @type {?} */\n        var defProp = getProp(baseDef);\n        defProp[name] = args[0];\n    };\n};\nvar ɵ1 = updateBaseDefFromIOProp;\n/** *\n *\n * \\@Annotation\n  @type {?} */\nexport var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.inputs || {}; }));\n/**\n * Type of the Output decorator / constructor function.\n * @record\n */\nexport function OutputDecorator() { }\n/** *\n *\n * \\@Annotation\n  @type {?} */\nexport var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.outputs || {}; }));\n/**\n * Type of the HostBinding decorator / constructor function.\n * @record\n */\nexport function HostBindingDecorator() { }\n/** *\n *\n * \\@Annotation\n  @type {?} */\nexport var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n/**\n * Type of the HostListener decorator / constructor function.\n * @record\n */\nexport function HostListenerDecorator() { }\n/** *\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n  @type {?} */\nexport var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\nexport { ɵ0, ɵ1 };\n//# sourceMappingURL=directives.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n *\n */\nvar /**\n * \\@description Represents the version of Angular\n *\n *\n */\nVersion = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n    return Version;\n}());\n/**\n * \\@description Represents the version of Angular\n *\n *\n */\nexport { Version };\nif (false) {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/** @type {?} */\nexport var VERSION = new Version('7.0.0-beta.4-a2418a9037');\n//# sourceMappingURL=version.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nexport var ERROR_TYPE = 'ngType';\n/** @type {?} */\nexport var ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n/** @type {?} */\nexport var ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n/** @type {?} */\nexport var ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getType(error) {\n    return (/** @type {?} */ (error))[ERROR_TYPE];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getDebugContext(error) {\n    return (/** @type {?} */ (error))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getOriginalError(error) {\n    return (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getErrorLogger(error) {\n    return (/** @type {?} */ (error))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    console.error.apply(console, values);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError } from './errors';\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n */\nvar /**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n */\nErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype.handleError = /**\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        /** @type {?} */\n        var originalError = this._findOriginalError(error);\n        /** @type {?} */\n        var context = this._findContext(error);\n        /** @type {?} */\n        var errorLogger = getErrorLogger(error);\n        errorLogger(this._console, \"ERROR\", error);\n        if (originalError) {\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findContext = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findOriginalError = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        /** @type {?} */\n        var e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    };\n    return ErrorHandler;\n}());\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n */\nexport { ErrorHandler };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ErrorHandler.prototype._console;\n}\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nexport function wrappedError(message, originalError) {\n    /** @type {?} */\n    var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n    /** @type {?} */\n    var error = Error(msg);\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n//# sourceMappingURL=error_handler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { wrappedError } from '../error_handler';\nimport { ERROR_ORIGINAL_ERROR } from '../errors';\nimport { stringify } from '../util';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    /** @type {?} */\n    var res = [];\n    for (var i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        /** @type {?} */\n        var reversed = findFirstClosedCycle(keys.slice().reverse());\n        /** @type {?} */\n        var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @record\n */\nexport function InjectionError() { }\n/** @type {?} */\nInjectionError.prototype.keys;\n/** @type {?} */\nInjectionError.prototype.injectors;\n/** @type {?} */\nInjectionError.prototype.constructResolvingMessage;\n/** @type {?} */\nInjectionError.prototype.addKey;\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    /** @type {?} */\n    var keys = [key];\n    /** @type {?} */\n    var errMsg = constructResolvingMessage(keys);\n    /** @type {?} */\n    var error = /** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        var first = stringify(keys[0].token);\n        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nexport function instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        var first = stringify(keys[0].token);\n        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n    }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nexport function invalidProviderError(provider) {\n    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nexport function noAnnotationError(typeOrFunc, params) {\n    /** @type {?} */\n    var signature = [];\n    for (var i = 0, ii = params.length; i < ii; i++) {\n        /** @type {?} */\n        var parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nexport function outOfBoundsError(index) {\n    return Error(\"Index \" + index + \" is out-of-bounds.\");\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nexport function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n}\n//# sourceMappingURL=reflective_errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { resolveForwardRef } from './forward_ref';\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nvar /**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nReflectiveKey = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveKey(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    ReflectiveKey.get = /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    };\n    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n        /**\n         * @returns the number of keys registered in the system.\n         */\n        get: /**\n         * @return {?} the number of keys registered in the system.\n         */\n        function () { return _globalKeyRegistry.numberOfKeys; },\n        enumerable: true,\n        configurable: true\n    });\n    return ReflectiveKey;\n}());\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nexport { ReflectiveKey };\nif (false) {\n    /** @type {?} */\n    ReflectiveKey.prototype.displayName;\n    /** @type {?} */\n    ReflectiveKey.prototype.token;\n    /** @type {?} */\n    ReflectiveKey.prototype.id;\n}\nvar KeyRegistry = /** @class */ (function () {\n    function KeyRegistry() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    KeyRegistry.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return /** @type {?} */ ((this._allKeys.get(token)));\n        }\n        /** @type {?} */\n        var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    };\n    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._allKeys.size; },\n        enumerable: true,\n        configurable: true\n    });\n    return KeyRegistry;\n}());\nexport { KeyRegistry };\nif (false) {\n    /** @type {?} */\n    KeyRegistry.prototype._allKeys;\n}\n/** @type {?} */\nvar _globalKeyRegistry = new KeyRegistry();\n//# sourceMappingURL=reflective_key.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nvar /**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nReflector = /** @class */ (function () {\n    function Reflector(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    /**\n     * @param {?} caps\n     * @return {?}\n     */\n    Reflector.prototype.updateCapabilities = /**\n     * @param {?} caps\n     * @return {?}\n     */\n    function (caps) { this.reflectionCapabilities = caps; };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.factory = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.factory(type); };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.parameters = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    Reflector.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.getter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.setter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.method(name); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.importUri(type); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.resourceUri(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    Reflector.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.resolveEnum = /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    };\n    return Reflector;\n}());\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nexport { Reflector };\nif (false) {\n    /** @type {?} */\n    Reflector.prototype.reflectionCapabilities;\n}\n//# sourceMappingURL=reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { reflector } from '../reflection/reflection';\nimport { Type } from '../type';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nimport { invalidProviderError, mixingMultiProvidersWithRegularProvidersError, noAnnotationError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\n/**\n * @record\n */\nfunction NormalizedProvider() { }\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nvar /**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nReflectiveDependency = /** @class */ (function () {\n    function ReflectiveDependency(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    ReflectiveDependency.fromKey = /**\n     * @param {?} key\n     * @return {?}\n     */\n    function (key) {\n        return new ReflectiveDependency(key, false, null);\n    };\n    return ReflectiveDependency;\n}());\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport { ReflectiveDependency };\nif (false) {\n    /** @type {?} */\n    ReflectiveDependency.prototype.key;\n    /** @type {?} */\n    ReflectiveDependency.prototype.optional;\n    /** @type {?} */\n    ReflectiveDependency.prototype.visibility;\n}\n/** @type {?} */\nvar _EMPTY_LIST = [];\n/**\n * An internal resolved representation of a `Provider` used by the `Injector`.\n *\n * \\@usageNotes\n * This is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * \\@experimental\n * @record\n */\nexport function ResolvedReflectiveProvider() { }\n/**\n * A key, usually a `Type<any>`.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.key;\n/**\n * Factory function which can return an instance of an object represented by a key.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.resolvedFactories;\n/**\n * Indicates if the provider is a multi-provider or a regular provider.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.multiProvider;\nvar ResolvedReflectiveProvider_ = /** @class */ (function () {\n    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n    return ResolvedReflectiveProvider_;\n}());\nexport { ResolvedReflectiveProvider_ };\nif (false) {\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactory;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.key;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactories;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.multiProvider;\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@experimental\n */\nvar /**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@experimental\n */\nResolvedReflectiveFactory = /** @class */ (function () {\n    function ResolvedReflectiveFactory(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n    return ResolvedReflectiveFactory;\n}());\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@experimental\n */\nexport { ResolvedReflectiveFactory };\nif (false) {\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.factory;\n    /**\n     * Arguments (dependencies) to the `factory` function.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.dependencies;\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    /** @type {?} */\n    var factoryFn;\n    /** @type {?} */\n    var resolvedDeps;\n    if (provider.useClass) {\n        /** @type {?} */\n        var useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = function (aliasInstance) { return aliasInstance; };\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = function () { return provider.useValue; };\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(providers) {\n    /** @type {?} */\n    var normalized = _normalizeProviders(providers, []);\n    /** @type {?} */\n    var resolved = normalized.map(resolveReflectiveProvider);\n    /** @type {?} */\n    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (var i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        var provider = providers[i];\n        /** @type {?} */\n        var existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (var j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            /** @type {?} */\n            var resolvedProvider = void 0;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(function (b) {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && (/** @type {?} */ (b)).provide !== undefined) {\n            res.push(/** @type {?} */ (b));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nexport function constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        /** @type {?} */\n        var params_1 = dependencies.map(function (t) { return [t]; });\n        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    /** @type {?} */\n    var params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(function (p) { return p == null; })) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    /** @type {?} */\n    var token = null;\n    /** @type {?} */\n    var optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    /** @type {?} */\n    var visibility = null;\n    for (var i = 0; i < metadata.length; ++i) {\n        /** @type {?} */\n        var paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n//# sourceMappingURL=reflective_provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector, THROW_IF_NOT_FOUND } from './injector';\nimport { Self, SkipSelf } from './metadata';\nimport { cyclicDependencyError, instantiationError, noProviderError, outOfBoundsError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\nimport { resolveReflectiveProviders } from './reflective_provider';\n/** @type {?} */\nvar UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nvar /**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nReflectiveInjector = /** @class */ (function () {\n    function ReflectiveInjector() {\n    }\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     */\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.resolve = /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        return resolveReflectiveProviders(providers);\n    };\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.resolveAndCreate = /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        /** @type {?} */\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    };\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @experimental\n     */\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * \\@experimental\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.fromResolvedProviders = /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * \\@experimental\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    };\n    return ReflectiveInjector;\n}());\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nexport { ReflectiveInjector };\nif (false) {\n    /**\n     * Parent of this injector.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * var parent = ReflectiveInjector.resolveAndCreate([]);\n     * var child = parent.resolveAndCreateChild([]);\n     * expect(child.parent).toBe(parent);\n     * ```\n     * @abstract\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.parent = function () { };\n    /**\n     * Resolves an array of providers and creates a child injector from those providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n     * var child = parent.resolveAndCreateChild([ChildProvider]);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n    /**\n     * Creates a child injector from previously resolved providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n     *\n     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n     * var child = parent.createChildFromResolved(childProviders);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n    /**\n     * Resolves a provider and instantiates an object in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     *\n     * var car = injector.resolveAndInstantiate(Car);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n    /**\n     * Instantiates an object using a resolved provider in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n     * var car = injector.instantiateResolved(carProvider);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n    /**\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n}\nvar ReflectiveInjector_ = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveInjector_(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        /** @type {?} */\n        var len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndCreateChild = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        /** @type {?} */\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.createChildFromResolved = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        /** @type {?} */\n        var inj = new ReflectiveInjector_(providers);\n        (/** @type {?} */ (inj)).parent = this;\n        return inj;\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndInstantiate = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.instantiateResolved = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.getProviderAtIndex = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._new = /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getMaxNumberOfObjects = /**\n     * @return {?}\n     */\n    function () { return this.objs.length; };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiateProvider = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (provider.multiProvider) {\n            /** @type {?} */\n            var res = new Array(provider.resolvedFactories.length);\n            for (var i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    };\n    /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiate = /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    function (provider, ResolvedReflectiveFactory) {\n        var _this = this;\n        /** @type {?} */\n        var factory = ResolvedReflectiveFactory.factory;\n        /** @type {?} */\n        var deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        /** @type {?} */\n        var obj;\n        try {\n            obj = factory.apply(void 0, deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    };\n    /**\n     * @param {?} dep\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByReflectiveDependency = /**\n     * @param {?} dep\n     * @return {?}\n     */\n    function (dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    };\n    /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKey = /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    };\n    /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getObjByKeyId = /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    function (keyId) {\n        for (var i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._throwOrNull = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeySelf = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        /** @type {?} */\n        var obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeyDefault = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    function (key, notFoundValue, visibility) {\n        /** @type {?} */\n        var inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            /** @type {?} */\n            var inj_ = /** @type {?} */ (inj);\n            /** @type {?} */\n            var obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    };\n    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                .join(', ');\n            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.displayName; };\n    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n    return ReflectiveInjector_;\n}());\nexport { ReflectiveInjector_ };\nif (false) {\n    /** @type {?} */\n    ReflectiveInjector_.INJECTOR_KEY;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._constructionCounter;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._providers;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.parent;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.keyIds;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.objs;\n}\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    /** @type {?} */\n    var res = new Array(injector._providers.length);\n    for (var i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n//# sourceMappingURL=reflective_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isPromise } from '../src/util/lang';\nimport { Inject, Injectable, InjectionToken, Optional } from './di';\n/** *\n * A function that will be executed when an application is initialized.\n  @type {?} */\nexport var APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n */\nvar ApplicationInitStatus = /** @class */ (function () {\n    function ApplicationInitStatus(appInits) {\n        var _this = this;\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationInitStatus.prototype.runInitializers = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.initialized) {\n            return;\n        }\n        /** @type {?} */\n        var asyncInitPromises = [];\n        /** @type {?} */\n        var complete = function () {\n            (/** @type {?} */ (_this)).done = true;\n            _this.resolve();\n        };\n        if (this.appInits) {\n            for (var i = 0; i < this.appInits.length; i++) {\n                /** @type {?} */\n                var initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    };\n    ApplicationInitStatus.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationInitStatus.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }\n    ]; };\n    return ApplicationInitStatus;\n}());\nexport { ApplicationInitStatus };\nif (false) {\n    /** @type {?} */\n    ApplicationInitStatus.prototype.resolve;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.reject;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.initialized;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.donePromise;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.done;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.appInits;\n}\n//# sourceMappingURL=application_init.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/** *\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@experimental\n  @type {?} */\nexport var APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nexport function _appIdRandomProviderFactory() {\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\n}\n/** *\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@experimental\n  @type {?} */\nexport var APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: /** @type {?} */ ([]),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/** *\n * A function that will be executed when a platform is initialized.\n * \\@experimental\n  @type {?} */\nexport var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/** *\n * A token that indicates an opaque platform id.\n * \\@experimental\n  @type {?} */\nexport var PLATFORM_ID = new InjectionToken('Platform ID');\n/** *\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@experimental\n  @type {?} */\nexport var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/** *\n * A token which indicates the root directory of the application\n * \\@experimental\n  @type {?} */\nexport var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n//# sourceMappingURL=application_tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from './di';\nvar Console = /** @class */ (function () {\n    function Console() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.log = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    };\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.warn = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    };\n    Console.decorators = [\n        { type: Injectable },\n    ];\n    return Console;\n}());\nexport { Console };\n//# sourceMappingURL=console.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di/injectable';\nimport { InjectionToken } from '../di/injection_token';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n * @template T\n */\nvar /**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n * @template T\n */\nModuleWithComponentFactories = /** @class */ (function () {\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n    return ModuleWithComponentFactories;\n}());\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n * @template T\n */\nexport { ModuleWithComponentFactories };\nif (false) {\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.ngModuleFactory;\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.componentFactories;\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(\"Runtime compiler is not loaded\");\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n */\nvar Compiler = /** @class */ (function () {\n    function Compiler() {\n    }\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     */\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleSync = /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAsync = /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsSync = /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsAsync = /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Clears all caches.\n     */\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    Compiler.prototype.clearCache = /**\n     * Clears all caches.\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    Compiler.prototype.clearCacheFor = /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { };\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.getModuleId = /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { return undefined; };\n    Compiler.decorators = [\n        { type: Injectable },\n    ];\n    return Compiler;\n}());\nexport { Compiler };\n/** @typedef {?} */\nvar CompilerOptions;\nexport { CompilerOptions };\n/** *\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@experimental\n  @type {?} */\nexport var COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nCompilerFactory = /** @class */ (function () {\n    function CompilerFactory() {\n    }\n    return CompilerFactory;\n}());\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nexport { CompilerFactory };\nif (false) {\n    /**\n     * @abstract\n     * @param {?=} options\n     * @return {?}\n     */\n    CompilerFactory.prototype.createCompiler = function (options) { };\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util';\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * \\@experimental\n * @record\n */\nexport function WtfScopeFn() { }\n/**\n * @record\n */\nfunction WTF() { }\n/** @type {?} */\nWTF.prototype.trace;\n/**\n * @record\n */\nfunction Trace() { }\n/** @type {?} */\nTrace.prototype.events;\n/** @type {?} */\nTrace.prototype.leaveScope;\n/** @type {?} */\nTrace.prototype.beginTimeRange;\n/** @type {?} */\nTrace.prototype.endTimeRange;\n/**\n * @record\n */\nexport function Range() { }\n/**\n * @record\n */\nfunction Events() { }\n/** @type {?} */\nEvents.prototype.createScope;\n/**\n * @record\n */\nexport function Scope() { }\n/** @type {?} */\nvar trace;\n/** @type {?} */\nvar events;\n/**\n * @return {?}\n */\nexport function detectWTF() {\n    /** @type {?} */\n    var wtf = (/** @type {?} */ (global /** TODO #9100 */) /** TODO #9100 */)['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nexport function createScope(signature, flags) {\n    if (flags === void 0) { flags = null; }\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nexport function leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nexport function startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nexport function endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n//# sourceMappingURL=wtf_impl.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nvar /**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nNgZone = /** @class */ (function () {\n    function NgZone(_a) {\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(\"In this configuration Angular requires Zone.js\");\n        }\n        Zone.assertZonePatched();\n        /** @type {?} */\n        var self = /** @type {?} */ ((this));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if ((/** @type {?} */ (Zone))['wtfZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['wtfZoneSpec']);\n        }\n        if ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new (/** @type {?} */ ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec'])));\n        }\n        if (enableLongStackTrace && (/** @type {?} */ (Zone))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    NgZone.isInAngularZone = /**\n     * @return {?}\n     */\n    function () { return Zone.current.get('isAngularZone') === true; };\n    /**\n     * @return {?}\n     */\n    NgZone.assertInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgZone.assertNotInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.run = /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.run(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    NgZone.prototype.runTask = /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs, name) {\n        /** @type {?} */\n        var zone = (/** @type {?} */ ((this)))._inner;\n        /** @type {?} */\n        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n        try {\n            return /** @type {?} */ (zone.runTask(task, applyThis, applyArgs));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    };\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.runGuarded = /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.runGuarded(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NgZone.prototype.runOutsideAngular = /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._outer.run(fn));\n    };\n    return NgZone;\n}());\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nexport { NgZone };\nif (false) {\n    /** @type {?} */\n    NgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZone.prototype.hasPendingMacrotasks;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     * @type {?}\n     */\n    NgZone.prototype.isStable;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onUnstable;\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onMicrotaskEmpty;\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     * @type {?}\n     */\n    NgZone.prototype.onStable;\n    /**\n     * Notifies that an error has been delivered.\n     * @type {?}\n     */\n    NgZone.prototype.onError;\n}\n/**\n * @return {?}\n */\nfunction noop() { }\n/** @type {?} */\nvar EMPTY_PAYLOAD = {};\n/**\n * @record\n */\nfunction NgZonePrivate() { }\n/** @type {?} */\nNgZonePrivate.prototype._outer;\n/** @type {?} */\nNgZonePrivate.prototype._inner;\n/** @type {?} */\nNgZonePrivate.prototype._nesting;\n/** @type {?} */\nNgZonePrivate.prototype.hasPendingMicrotasks;\n/** @type {?} */\nNgZonePrivate.prototype.hasPendingMacrotasks;\n/** @type {?} */\nNgZonePrivate.prototype.isStable;\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: /** @type {?} */ ({ 'isAngularZone': true }),\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: function (delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: function (delegate, current, target, error) {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n            return false;\n        }\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nvar /**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nNoopNgZone = /** @class */ (function () {\n    function NoopNgZone() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.run = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runGuarded = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runOutsideAngular = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runTask = /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    return NoopNgZone;\n}());\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport { NoopNgZone };\nif (false) {\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.isStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onUnstable;\n    /** @type {?} */\n    NoopNgZone.prototype.onMicrotaskEmpty;\n    /** @type {?} */\n    NoopNgZone.prototype.onStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onError;\n}\n//# sourceMappingURL=ng_zone.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di';\nimport { scheduleMicroTask } from '../util';\nimport { NgZone } from '../zone/ng_zone';\n/**\n * @record\n */\nexport function PendingMacrotask() { }\n/** @type {?} */\nPendingMacrotask.prototype.source;\n/** @type {?} */\nPendingMacrotask.prototype.creationLocation;\n/** @type {?|undefined} */\nPendingMacrotask.prototype.runCount;\n/** @type {?} */\nPendingMacrotask.prototype.data;\n/**\n * @record\n */\nexport function TaskData() { }\n/** @type {?|undefined} */\nTaskData.prototype.target;\n/** @type {?|undefined} */\nTaskData.prototype.delay;\n/** @type {?|undefined} */\nTaskData.prototype.isPeriodic;\n/** @typedef {?} */\nvar DoneCallback;\nexport { DoneCallback };\n/** @typedef {?} */\nvar UpdateCallback;\nexport { UpdateCallback };\n/**\n * @record\n */\nfunction WaitCallback() { }\n/** @type {?} */\nWaitCallback.prototype.timeoutId;\n/** @type {?} */\nWaitCallback.prototype.doneCb;\n/** @type {?|undefined} */\nWaitCallback.prototype.updateCb;\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@experimental\n */\nvar Testability = /** @class */ (function () {\n    function Testability(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this._watchAngularEvents();\n        _ngZone.run(function () { _this.taskTrackingZone = Zone.current.get('TaskTrackingZone'); });\n    }\n    /**\n     * @return {?}\n     */\n    Testability.prototype._watchAngularEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onUnstable.subscribe({\n            next: function () {\n                _this._didWork = true;\n                _this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.subscribe({\n                next: function () {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(function () {\n                        _this._isZoneStable = true;\n                        _this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    Testability.prototype.increasePendingRequestCount = /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    function () {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    };\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.decreasePendingRequestCount = /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    };\n    /**\n     * Whether an associated application is stable\n     */\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    Testability.prototype.isStable = /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    function () {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype._runCallbacksIfReady = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(function () {\n                while (_this._callbacks.length !== 0) {\n                    /** @type {?} */\n                    var cb = /** @type {?} */ ((_this._callbacks.pop()));\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(_this._didWork);\n                }\n                _this._didWork = false;\n            });\n        }\n        else {\n            /** @type {?} */\n            var pending_1 = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter(function (cb) {\n                if (cb.updateCb && cb.updateCb(pending_1)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype.getPendingTasks = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map(function (t) {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: /** @type {?} */ ((/** @type {?} */ (t)).creationLocation),\n                data: t.data\n            };\n        });\n    };\n    /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    Testability.prototype.addCallback = /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    function (cb, timeout, updateCb) {\n        var _this = this;\n        /** @type {?} */\n        var timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(function () {\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                cb(_this._didWork, _this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push(/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb }));\n    };\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    Testability.prototype.whenStable = /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    function (doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback(/** @type {?} */ (doneCb), timeout, /** @type {?} */ (updateCb));\n        this._runCallbacksIfReady();\n    };\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.getPendingRequestCount = /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () { return this._pendingCount; };\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    Testability.prototype.findProviders = /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    function (using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    };\n    Testability.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Testability.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    return Testability;\n}());\nexport { Testability };\nif (false) {\n    /** @type {?} */\n    Testability.prototype._pendingCount;\n    /** @type {?} */\n    Testability.prototype._isZoneStable;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * \\@internal\n     * @type {?}\n     */\n    Testability.prototype._didWork;\n    /** @type {?} */\n    Testability.prototype._callbacks;\n    /** @type {?} */\n    Testability.prototype.taskTrackingZone;\n    /** @type {?} */\n    Testability.prototype._ngZone;\n}\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@experimental\n */\nvar TestabilityRegistry = /** @class */ (function () {\n    function TestabilityRegistry() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.registerApplication = /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    function (token, testability) {\n        this._applications.set(token, testability);\n    };\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterApplication = /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    function (token) { this._applications.delete(token); };\n    /**\n     * Unregisters all applications\n     */\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterAllApplications = /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    function () { this._applications.clear(); };\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getTestability = /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    function (elem) { return this._applications.get(elem) || null; };\n    /**\n     * Get all registered testabilities\n     */\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllTestabilities = /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.values()); };\n    /**\n     * Get all registered applications(root elements)\n     */\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllRootElements = /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.keys()); };\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.findTestabilityInTree = /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    function (elem, findInAncestors) {\n        if (findInAncestors === void 0) { findInAncestors = true; }\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    };\n    TestabilityRegistry.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    TestabilityRegistry.ctorParameters = function () { return []; };\n    return TestabilityRegistry;\n}());\nexport { TestabilityRegistry };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TestabilityRegistry.prototype._applications;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * \\@experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n * @record\n */\nexport function GetTestability() { }\n/** @type {?} */\nGetTestability.prototype.addToWindow;\n/** @type {?} */\nGetTestability.prototype.findTestabilityInTree;\nvar _NoopGetTestability = /** @class */ (function () {\n    function _NoopGetTestability() {\n    }\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.addToWindow = /**\n     * @param {?} registry\n     * @return {?}\n     */\n    function (registry) { };\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.findTestabilityInTree = /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    function (registry, elem, findInAncestors) {\n        return null;\n    };\n    return _NoopGetTestability;\n}());\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@experimental\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\n/** @type {?} */\nvar _testabilityGetter = new _NoopGetTestability();\n//# sourceMappingURL=testability.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { ApplicationInitStatus } from './application_init';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER } from './application_tokens';\nimport { Console } from './console';\nimport { Injectable, InjectionToken, Injector } from './di';\nimport { ErrorHandler } from './error_handler';\nimport { isDevMode } from './is_dev_mode';\nimport { CompilerFactory } from './linker/compiler';\nimport { ComponentFactory } from './linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from './linker/component_factory_resolver';\nimport { NgModuleRef } from './linker/ng_module_factory';\nimport { wtfCreateScope, wtfLeave } from './profile/profile';\nimport { assertNgModuleType } from './render3/assert';\nimport { NgModuleFactory as R3NgModuleFactory } from './render3/ng_module_ref';\nimport { Testability, TestabilityRegistry } from './testability/testability';\nimport { scheduleMicroTask, stringify } from './util';\nimport { isPromise } from './util/lang';\nimport { NgZone, NoopNgZone } from './zone/ng_zone';\n/** @type {?} */\nvar _platform;\n/** @type {?} */\nvar compileNgModuleFactory = compileNgModuleFactory__PRE_NGCC__;\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__PRE_NGCC__(injector, options, moduleType) {\n    /** @type {?} */\n    var compilerFactory = injector.get(CompilerFactory);\n    /** @type {?} */\n    var compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__POST_NGCC__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    return Promise.resolve(new R3NgModuleFactory(moduleType));\n}\n/** @type {?} */\nexport var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nvar /**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nNgProbeToken = /** @class */ (function () {\n    function NgProbeToken(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken;\n}());\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nexport { NgProbeToken };\nif (false) {\n    /** @type {?} */\n    NgProbeToken.prototype.name;\n    /** @type {?} */\n    NgProbeToken.prototype.token;\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    /** @type {?} */\n    var inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach(function (init) { return init(); });\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(parentPlatformFactory, name, providers) {\n    if (providers === void 0) { providers = []; }\n    /** @type {?} */\n    var desc = \"Platform: \" + name;\n    /** @type {?} */\n    var marker = new InjectionToken(desc);\n    return function (extraProviders) {\n        if (extraProviders === void 0) { extraProviders = []; }\n        /** @type {?} */\n        var platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                /** @type {?} */\n                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken) {\n    /** @type {?} */\n    var platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n * @record\n */\nexport function BootstrapOptions() { }\n/**\n * Optionally specify which `NgZone` should be used.\n *\n * - Provide your own `NgZone` instance.\n * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n * - `noop` - Use `NoopNgZone` which does nothing.\n * @type {?|undefined}\n */\nBootstrapOptions.prototype.ngZone;\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n */\nvar PlatformRef = /** @class */ (function () {\n    /** @internal */\n    function PlatformRef(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModuleFactory = /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    function (moduleFactory, options) {\n        var _this = this;\n        /** @type {?} */\n        var ngZoneOption = options ? options.ngZone : undefined;\n        /** @type {?} */\n        var ngZone = getNgZone(ngZoneOption);\n        /** @type {?} */\n        var providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(function () {\n            /** @type {?} */\n            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n            /** @type {?} */\n            var moduleRef = /** @type {?} */ (moduleFactory.create(ngZoneInjector));\n            /** @type {?} */\n            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */\n            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {\n                /** @type {?} */\n                var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(function () {\n                    _this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    };\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModule = /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        /** @type {?} */\n        var options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n    };\n    /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    PlatformRef.prototype._moduleDoBootstrap = /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    function (moduleRef) {\n        /** @type {?} */\n        var appRef = /** @type {?} */ (moduleRef.injector.get(ApplicationRef));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                \"Please define one of these.\");\n        }\n        this._modules.push(moduleRef);\n    };\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    PlatformRef.prototype.onDestroy = /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\n        /**\n         * Retrieve the platform {@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         */\n        get: /**\n         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         * @return {?}\n         */\n        function () { return this._injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    PlatformRef.prototype.destroy = /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n        this._destroyed = true;\n    };\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    PlatformRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    PlatformRef.ctorParameters = function () { return [\n        { type: Injector }\n    ]; };\n    return PlatformRef;\n}());\nexport { PlatformRef };\nif (false) {\n    /** @type {?} */\n    PlatformRef.prototype._modules;\n    /** @type {?} */\n    PlatformRef.prototype._destroyListeners;\n    /** @type {?} */\n    PlatformRef.prototype._destroyed;\n    /** @type {?} */\n    PlatformRef.prototype._injector;\n}\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    /** @type {?} */\n    var ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        /** @type {?} */\n        var result = callback();\n        if (isPromise(result)) {\n            return result.catch(function (e) {\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = tslib_1.__assign({}, dst, (/** @type {?} */ (objs)));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n */\nvar ApplicationRef = /** @class */ (function () {\n    /** @internal */\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        var _this = this;\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        /** @type {?} */\n        var isCurrentlyStable = new Observable(function (observer) {\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                !_this._zone.hasPendingMicrotasks;\n            _this._zone.runOutsideAngular(function () {\n                observer.next(_this._stable);\n                observer.complete();\n            });\n        });\n        /** @type {?} */\n        var isStable = new Observable(function (observer) {\n            /** @type {?} */\n            var stableSub;\n            _this._zone.runOutsideAngular(function () {\n                stableSub = _this._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                            !_this._zone.hasPendingMicrotasks) {\n                            _this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            /** @type {?} */\n            var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                NgZone.assertInAngularZone();\n                if (_this._stable) {\n                    _this._stable = false;\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n                }\n            });\n            return function () {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        (/** @type {?} */ (this)).isStable =\n            merge(isCurrentlyStable, isStable.pipe(share()));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    ApplicationRef.prototype.bootstrap = /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    function (componentOrFactory, rootSelectorOrNode) {\n        var _this = this;\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        /** @type {?} */\n        var componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                /** @type {?} */ ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        /** @type {?} */\n        var ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n            null :\n            this._injector.get(NgModuleRef);\n        /** @type {?} */\n        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        /** @type {?} */\n        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n        /** @type {?} */\n        var testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n        }\n        return compRef;\n    };\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    ApplicationRef.prototype.tick = /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        /** @type {?} */\n        var scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            this._views.forEach(function (view) { return view.detectChanges(); });\n            if (this._enforceNoNewChanges) {\n                this._views.forEach(function (view) { return view.checkNoChanges(); });\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    };\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.attachView = /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        /** @type {?} */\n        var view = (/** @type {?} */ (viewRef));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    };\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.detachView = /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        /** @type {?} */\n        var view = (/** @type {?} */ (viewRef));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._loadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        /** @type {?} */\n        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach(function (listener) { return listener(componentRef); });\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._unloadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationRef.prototype.ngOnDestroy = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach(function (view) { return view.destroy(); });\n    };\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n        /**\n         * Returns the number of attached views.\n         */\n        get: /**\n         * Returns the number of attached views.\n         * @return {?}\n         */\n        function () { return this._views.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     */\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationRef.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: Console },\n        { type: Injector },\n        { type: ErrorHandler },\n        { type: ComponentFactoryResolver },\n        { type: ApplicationInitStatus }\n    ]; };\n    return ApplicationRef;\n}());\nexport { ApplicationRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ApplicationRef._tickScope;\n    /** @type {?} */\n    ApplicationRef.prototype._bootstrapListeners;\n    /** @type {?} */\n    ApplicationRef.prototype._views;\n    /** @type {?} */\n    ApplicationRef.prototype._runningTick;\n    /** @type {?} */\n    ApplicationRef.prototype._enforceNoNewChanges;\n    /** @type {?} */\n    ApplicationRef.prototype._stable;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     * @type {?}\n     */\n    ApplicationRef.prototype.componentTypes;\n    /**\n     * Get a list of components registered to this application.\n     * @type {?}\n     */\n    ApplicationRef.prototype.components;\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     * @type {?}\n     */\n    ApplicationRef.prototype.isStable;\n    /** @type {?} */\n    ApplicationRef.prototype._zone;\n    /** @type {?} */\n    ApplicationRef.prototype._console;\n    /** @type {?} */\n    ApplicationRef.prototype._injector;\n    /** @type {?} */\n    ApplicationRef.prototype._exceptionHandler;\n    /** @type {?} */\n    ApplicationRef.prototype._componentFactoryResolver;\n    /** @type {?} */\n    ApplicationRef.prototype._initStatus;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    /** @type {?} */\n    var index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n//# sourceMappingURL=application_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to load ng module factories.\n *\n * @abstract\n */\nvar /**\n * Used to load ng module factories.\n *\n * @abstract\n */\nNgModuleFactoryLoader = /** @class */ (function () {\n    function NgModuleFactoryLoader() {\n    }\n    return NgModuleFactoryLoader;\n}());\n/**\n * Used to load ng module factories.\n *\n * @abstract\n */\nexport { NgModuleFactoryLoader };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} path\n     * @return {?}\n     */\n    NgModuleFactoryLoader.prototype.load = function (path) { };\n}\n/** @type {?} */\nvar moduleFactories = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@experimental\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id, factory) {\n    /** @type {?} */\n    var existing = moduleFactories.get(id);\n    if (existing) {\n        throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n    }\n    moduleFactories.set(id, factory);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n    moduleFactories = new Map();\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@experimental\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory(id) {\n    /** @type {?} */\n    var factory = moduleFactories.get(id);\n    if (!factory)\n        throw new Error(\"No module with ID \" + id + \" loaded\");\n    return factory;\n}\n//# sourceMappingURL=ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * @template T\n */\nvar /**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * @template T\n */\nQueryList = /** @class */ (function () {\n    function QueryList() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._results.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._results.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._results.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._results.slice(); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._results))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._results.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._results = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n        (/** @type {?} */ (this)).length = this._results.length;\n        (/** @type {?} */ (this)).last = this._results[this.length - 1];\n        (/** @type {?} */ (this)).first = this._results[0];\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.setDirty = /**\n     * internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.destroy = /**\n     * internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList;\n}());\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * @template T\n */\nexport { QueryList };\nif (false) {\n    /** @type {?} */\n    QueryList.prototype.dirty;\n    /** @type {?} */\n    QueryList.prototype._results;\n    /** @type {?} */\n    QueryList.prototype.changes;\n    /** @type {?} */\n    QueryList.prototype.length;\n    /** @type {?} */\n    QueryList.prototype.first;\n    /** @type {?} */\n    QueryList.prototype.last;\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n    return list.reduce(function (flat, item) {\n        /** @type {?} */\n        var flatItem = Array.isArray(item) ? flatten(item) : item;\n        return (/** @type {?} */ (flat)).concat(flatItem);\n    }, []);\n}\n//# sourceMappingURL=query_list.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional } from '../di';\nimport { Compiler } from './compiler';\n/** @type {?} */\nvar _SEPARATOR = '#';\n/** @type {?} */\nvar FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nSystemJsNgModuleLoaderConfig = /** @class */ (function () {\n    function SystemJsNgModuleLoaderConfig() {\n    }\n    return SystemJsNgModuleLoaderConfig;\n}());\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nexport { SystemJsNgModuleLoaderConfig };\nif (false) {\n    /**\n     * Prefix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathPrefix;\n    /**\n     * Suffix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathSuffix;\n}\n/** @type {?} */\nvar DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@experimental\n */\nvar SystemJsNgModuleLoader = /** @class */ (function () {\n    function SystemJsNgModuleLoader(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.load = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        /** @type {?} */\n        var offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadAndCompile = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _this = this;\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then(function (module) { return module[exportName]; })\n            .then(function (type) { return checkNotEmpty(type, module, exportName); })\n            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadFactory = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        /** @type {?} */\n        var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then(function (module) { return module[exportName + factoryClassSuffix]; })\n            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n    };\n    SystemJsNgModuleLoader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SystemJsNgModuleLoader.ctorParameters = function () { return [\n        { type: Compiler },\n        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }\n    ]; };\n    return SystemJsNgModuleLoader;\n}());\nexport { SystemJsNgModuleLoader };\nif (false) {\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._config;\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._compiler;\n}\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n    }\n    return value;\n}\n//# sourceMappingURL=system_js_ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectorRef } from '../change_detection/change_detector_ref';\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewRef, _super);\n    function ViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ViewRef;\n}(ChangeDetectorRef));\n/**\n * @abstract\n */\nexport { ViewRef };\nif (false) {\n    /**\n     * Destroys the view and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    ViewRef.prototype.destroyed = function () { };\n    /**\n     * @abstract\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a `ViewContainerRef`. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * \\@usageNotes\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two `TemplateRef`s:\n *\n * Outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * Inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate `TemplateRef`s.\n *\n * The outer/inner `TemplateRef`s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n * @template C\n */\nvar /**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a `ViewContainerRef`. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * \\@usageNotes\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two `TemplateRef`s:\n *\n * Outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * Inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate `TemplateRef`s.\n *\n * The outer/inner `TemplateRef`s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n * @template C\n */\nEmbeddedViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EmbeddedViewRef;\n}(ViewRef));\n/**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a `ViewContainerRef`. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * \\@usageNotes\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two `TemplateRef`s:\n *\n * Outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * Inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate `TemplateRef`s.\n *\n * The outer/inner `TemplateRef`s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n * @template C\n */\nexport { EmbeddedViewRef };\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.rootNodes = function () { };\n}\n/**\n * @record\n */\nexport function InternalViewRef() { }\n/** @type {?} */\nInternalViewRef.prototype.detachFromAppRef;\n/** @type {?} */\nInternalViewRef.prototype.attachToAppRef;\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nvar EventListener = /** @class */ (function () {\n    function EventListener(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n    return EventListener;\n}());\nexport { EventListener };\nif (false) {\n    /** @type {?} */\n    EventListener.prototype.name;\n    /** @type {?} */\n    EventListener.prototype.callback;\n}\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nvar /**\n * \\@experimental All debugging apis are currently experimental.\n */\nDebugNode = /** @class */ (function () {\n    function DebugNode(nativeNode, parent, _debugContext) {\n        this.nativeNode = nativeNode;\n        this._debugContext = _debugContext;\n        this.listeners = [];\n        this.parent = null;\n        if (parent && parent instanceof DebugElement) {\n            parent.addChild(this);\n        }\n    }\n    Object.defineProperty(DebugNode.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.references; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.providerTokens; },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode;\n}());\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport { DebugNode };\nif (false) {\n    /** @type {?} */\n    DebugNode.prototype.listeners;\n    /** @type {?} */\n    DebugNode.prototype.parent;\n    /** @type {?} */\n    DebugNode.prototype.nativeNode;\n    /** @type {?} */\n    DebugNode.prototype._debugContext;\n}\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nvar /**\n * \\@experimental All debugging apis are currently experimental.\n */\nDebugElement = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement, _super);\n    function DebugElement(nativeNode, parent, _debugContext) {\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n        _this.properties = {};\n        _this.attributes = {};\n        _this.classes = {};\n        _this.styles = {};\n        _this.childNodes = [];\n        _this.nativeElement = nativeNode;\n        return _this;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.addChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        if (child) {\n            this.childNodes.push(child);\n            child.parent = this;\n        }\n    };\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.removeChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        /** @type {?} */\n        var childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            child.parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    };\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    DebugElement.prototype.insertChildrenAfter = /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    function (child, newChildren) {\n        var _this = this;\n        var _a;\n        /** @type {?} */\n        var siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));\n            newChildren.forEach(function (c) {\n                if (c.parent) {\n                    c.parent.removeChild(c);\n                }\n                c.parent = _this;\n            });\n        }\n    };\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugElement.prototype.insertBefore = /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (refChild, newChild) {\n        /** @type {?} */\n        var refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                newChild.parent.removeChild(newChild);\n            }\n            newChild.parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.query = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAll = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAllNodes = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    };\n    Object.defineProperty(DebugElement.prototype, \"children\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    DebugElement.prototype.triggerEventHandler = /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement;\n}(DebugNode));\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport { DebugElement };\nif (false) {\n    /** @type {?} */\n    DebugElement.prototype.name;\n    /** @type {?} */\n    DebugElement.prototype.properties;\n    /** @type {?} */\n    DebugElement.prototype.attributes;\n    /** @type {?} */\n    DebugElement.prototype.classes;\n    /** @type {?} */\n    DebugElement.prototype.styles;\n    /** @type {?} */\n    DebugElement.prototype.childNodes;\n    /** @type {?} */\n    DebugElement.prototype.nativeElement;\n}\n/**\n * \\@experimental\n * @param {?} debugEls\n * @return {?}\n */\nexport function asNativeElements(debugEls) {\n    return debugEls.map(function (el) { return el.nativeElement; });\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(function (node) {\n        if (node instanceof DebugElement) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\n/** @type {?} */\nvar _nativeNodeToDebugNode = new Map();\n/**\n * \\@experimental\n * @param {?} nativeNode\n * @return {?}\n */\nexport function getDebugNode(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @return {?}\n */\nexport function getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * \\@experimental All debugging apis are currently experimental.\n * @record\n * @template T\n */\nexport function Predicate() { }\n//# sourceMappingURL=debug_node.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isListLikeIterable, iterateListLike } from '../change_detection_util';\nvar DefaultIterableDifferFactory = /** @class */ (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return isListLikeIterable(obj); };\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.create = /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    function (trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nexport { DefaultIterableDifferFactory };\n/** @type {?} */\nvar trackByIdentity = function (index, item) { return item; };\nvar ɵ0 = trackByIdentity;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @template V\n */\nvar /**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @template V\n */\nDefaultIterableDiffer = /** @class */ (function () {\n    function DefaultIterableDiffer(trackByFn) {\n        this.length = 0;\n        this._linkedRecords = null;\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachOperation = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var nextIt = this._itHead;\n        /** @type {?} */\n        var nextRemove = this._removalsHead;\n        /** @type {?} */\n        var addRemoveOffset = 0;\n        /** @type {?} */\n        var moveOffsets = null;\n        while (nextIt || nextRemove) {\n            /** @type {?} */\n            var record = !nextRemove ||\n                nextIt && /** @type {?} */ ((nextIt.currentIndex)) < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */\n                ((nextIt)) :\n                nextRemove;\n            /** @type {?} */\n            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            /** @type {?} */\n            var currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = /** @type {?} */ ((nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    /** @type {?} */\n                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    /** @type {?} */\n                    var localCurrentIndex = /** @type {?} */ ((currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (var i = 0; i < localMovePreviousIndex; i++) {\n                            /** @type {?} */\n                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            /** @type {?} */\n                            var index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        /** @type {?} */\n                        var previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachMovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachIdentityChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.diff = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.check = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        var _this = this;\n        this._reset();\n        /** @type {?} */\n        var record = this._itHead;\n        /** @type {?} */\n        var mayBeDirty = false;\n        /** @type {?} */\n        var index;\n        /** @type {?} */\n        var item;\n        /** @type {?} */\n        var itemTrackBy;\n        if (Array.isArray(collection)) {\n            (/** @type {?} */ (this)).length = collection.length;\n            for (var index_1 = 0; index_1 < this.length; index_1++) {\n                item = collection[index_1];\n                itemTrackBy = this._trackByFn(index_1, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, function (item) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            (/** @type {?} */ (this)).length = index;\n        }\n        this._truncate(record);\n        (/** @type {?} */ (this)).collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reset = /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            /** @type {?} */\n            var record = void 0;\n            /** @type {?} */\n            var nextRecord = void 0;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._mismatch = /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        /** @type {?} */\n        var previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        /** @type {?} */\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._truncate = /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            /** @type {?} */\n            var nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reinsertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        /** @type {?} */\n        var prev = record._prevRemoved;\n        /** @type {?} */\n        var next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._moveAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._insertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        /** @type {?} */\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._remove = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._unlink = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        /** @type {?} */\n        var prev = record._prev;\n        /** @type {?} */\n        var next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToMoves = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    function (record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToRemovals = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addIdentityChange = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    return DefaultIterableDiffer;\n}());\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @template V\n */\nexport { DefaultIterableDiffer };\nif (false) {\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.length;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.collection;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._linkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._unlinkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._previousItHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._trackByFn;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\nIterableChangeRecord_ = /** @class */ (function () {\n    function IterableChangeRecord_(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n    return IterableChangeRecord_;\n}());\n/**\n * @template V\n */\nexport { IterableChangeRecord_ };\nif (false) {\n    /** @type {?} */\n    IterableChangeRecord_.prototype.currentIndex;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.previousIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextMoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextIdentityChange;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.item;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.trackById;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateItemRecordList = /** @class */ (function () {\n    function _DuplicateItemRecordList() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.add = /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            /** @type {?} */ ((\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.get = /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        /** @type {?} */\n        var record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */ ((record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.remove = /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var prev = record._prevDup;\n        /** @type {?} */\n        var next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._head;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._tail;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateMap = /** @class */ (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.put = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var key = record.trackById;\n        /** @type {?} */\n        var duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateMap.prototype.get = /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        /** @type {?} */\n        var key = trackById;\n        /** @type {?} */\n        var recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    };\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.remove = /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var key = record.trackById;\n        /** @type {?} */\n        var recordList = /** @type {?} */ ((this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    _DuplicateMap.prototype.clear = /**\n     * @return {?}\n     */\n    function () { this.map.clear(); };\n    return _DuplicateMap;\n}());\nif (false) {\n    /** @type {?} */\n    _DuplicateMap.prototype.map;\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    /** @type {?} */\n    var previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    /** @type {?} */\n    var moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\nexport { ɵ0 };\n//# sourceMappingURL=default_iterable_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isJsObject } from '../change_detection_util';\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDifferFactory = /** @class */ (function () {\n    function DefaultKeyValueDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return obj instanceof Map || isJsObject(obj); };\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.create = /**\n     * @template K, V\n     * @return {?}\n     */\n    function () { return new DefaultKeyValueDiffer(); };\n    return DefaultKeyValueDifferFactory;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDifferFactory };\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDiffer = /** @class */ (function () {\n    function DefaultKeyValueDiffer() {\n        this._records = new Map();\n        this._mapHead = null;\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._changesHead !== null ||\n                this._removalsHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.diff = /**\n     * @param {?=} map\n     * @return {?}\n     */\n    function (map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n        }\n        return this.check(map) ? this : null;\n    };\n    /**\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.check = /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    function (map) {\n        var _this = this;\n        this._reset();\n        /** @type {?} */\n        var insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, function (value, key) {\n            if (insertBefore && insertBefore.key === key) {\n                _this._maybeAddToChanges(insertBefore, value);\n                _this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                /** @type {?} */\n                var record = _this._getOrCreateRecordForKey(key, value);\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    };\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    function (before, record) {\n        if (before) {\n            /** @type {?} */\n            var prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    function (key, value) {\n        if (this._records.has(key)) {\n            /** @type {?} */\n            var record_1 = /** @type {?} */ ((this._records.get(key)));\n            this._maybeAddToChanges(record_1, value);\n            /** @type {?} */\n            var prev = record_1._prev;\n            /** @type {?} */\n            var next = record_1._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record_1._next = null;\n            record_1._prev = null;\n            return record_1;\n        }\n        /** @type {?} */\n        var record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._reset = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            /** @type {?} */\n            var record = void 0;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    };\n    /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToAdditions = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToChanges = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    };\n    /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._forEach = /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function (obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n        }\n    };\n    return DefaultKeyValueDiffer;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDiffer };\nif (false) {\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._records;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._mapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._appendAfter;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._previousMapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsTail;\n}\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nKeyValueChangeRecord_ = /** @class */ (function () {\n    function KeyValueChangeRecord_(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n    return KeyValueChangeRecord_;\n}());\nif (false) {\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.previousValue;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.currentValue;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextChanged;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.key;\n}\n//# sourceMappingURL=default_keyvalue_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from '../../di/defs';\nimport { Optional, SkipSelf } from '../../di/metadata';\nimport { DefaultIterableDifferFactory } from '../differs/default_iterable_differ';\n/** @typedef {?} */\nvar NgIterable;\nexport { NgIterable };\n/**\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n *\n * @record\n * @template V\n */\nexport function IterableDiffer() { }\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nIterableDiffer.prototype.diff;\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n *\n * @record\n * @template V\n */\nexport function IterableChanges() { }\n/**\n * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nIterableChanges.prototype.forEachItem;\n/**\n * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n * new `Iterable`.\n *\n * NOTE: These are not necessarily the actual operations which were applied to the original\n * `Iterable`, rather these are a set of computed operations which may not be the same as the\n * ones applied.\n *\n * \\@param record A change which needs to be applied\n * \\@param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n *        original `Iterable` location, where as `previousIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * \\@param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n *        original `Iterable` location, where as `currentIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * @type {?}\n */\nIterableChanges.prototype.forEachOperation;\n/**\n * Iterate over changes in the order of original `Iterable` showing where the original items\n * have moved.\n * @type {?}\n */\nIterableChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nIterableChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all moved items.\n * @type {?}\n */\nIterableChanges.prototype.forEachMovedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nIterableChanges.prototype.forEachRemovedItem;\n/**\n * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n * changed.\n * @type {?}\n */\nIterableChanges.prototype.forEachIdentityChange;\n/**\n * Record representing the item change information.\n *\n *\n * @record\n * @template V\n */\nexport function IterableChangeRecord() { }\n/**\n * Current index of the item in `Iterable` or null if removed.\n * @type {?}\n */\nIterableChangeRecord.prototype.currentIndex;\n/**\n * Previous index of the item in `Iterable` or null if added.\n * @type {?}\n */\nIterableChangeRecord.prototype.previousIndex;\n/**\n * The item.\n * @type {?}\n */\nIterableChangeRecord.prototype.item;\n/**\n * Track by identity as computed by the `TrackByFunction`.\n * @type {?}\n */\nIterableChangeRecord.prototype.trackById;\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * @record\n * @template V\n */\nexport function CollectionChangeRecord() { }\n/**\n * An optional function passed into {\\@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n *\n * @record\n * @template T\n */\nexport function TrackByFunction() { }\n/**\n * Provides a factory for {\\@link IterableDiffer}.\n *\n *\n * @record\n */\nexport function IterableDifferFactory() { }\n/** @type {?} */\nIterableDifferFactory.prototype.supports;\n/** @type {?} */\nIterableDifferFactory.prototype.create;\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n */\nvar IterableDiffers = /** @class */ (function () {\n    function IterableDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    IterableDiffers.create = /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent != null) {\n            /** @type {?} */\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    IterableDiffers.extend = /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    IterableDiffers.prototype.find = /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    function (iterable) {\n        /** @type {?} */\n        var factory = this.factories.find(function (f) { return f.supports(iterable); });\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n        }\n    };\n    /** @nocollapse */ IterableDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n    });\n    return IterableDiffers;\n}());\nexport { IterableDiffers };\nif (false) {\n    /** @type {?} */\n    IterableDiffers.ngInjectableDef;\n    /**\n     * @deprecated v4.0.0 - Should be private\n     * @type {?}\n     */\n    IterableDiffers.prototype.factories;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n//# sourceMappingURL=iterable_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf } from '../../di';\n/**\n * A differ that tracks changes made to an object over time.\n *\n *\n * @record\n * @template K, V\n */\nexport function KeyValueDiffer() { }\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n *\n * @record\n * @template K, V\n */\nexport function KeyValueChanges() { }\n/**\n * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachItem;\n/**\n * Iterate over changes in the order of original Map showing where the original items\n * have moved.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all keys for which values have changed.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachChangedItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachRemovedItem;\n/**\n * Record representing the item change information.\n *\n *\n * @record\n * @template K, V\n */\nexport function KeyValueChangeRecord() { }\n/**\n * Current key in the Map.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.key;\n/**\n * Current value for the key or `null` if removed.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.currentValue;\n/**\n * Previous value for the key or `null` if added.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.previousValue;\n/**\n * Provides a factory for {\\@link KeyValueDiffer}.\n *\n *\n * @record\n */\nexport function KeyValueDifferFactory() { }\n/**\n * Test to see if the differ knows how to diff this kind of object.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.supports;\n/**\n * Create a `KeyValueDiffer`.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.create;\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nvar /**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nKeyValueDiffers = /** @class */ (function () {\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    KeyValueDiffers.create = /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent) {\n            /** @type {?} */\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    KeyValueDiffers.extend = /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    KeyValueDiffers.prototype.find = /**\n     * @param {?} kv\n     * @return {?}\n     */\n    function (kv) {\n        /** @type {?} */\n        var factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (factory) {\n            return factory;\n        }\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n    };\n    return KeyValueDiffers;\n}());\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nexport { KeyValueDiffers };\nif (false) {\n    /**\n     * @deprecated v4.0.0 - Should be private.\n     * @type {?}\n     */\n    KeyValueDiffers.prototype.factories;\n}\n//# sourceMappingURL=keyvalue_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/** *\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@experimental i18n support is experimental.\n  @type {?} */\nexport var LOCALE_ID = new InjectionToken('LocaleId');\n/** *\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@experimental i18n support is experimental.\n  @type {?} */\nexport var TRANSLATIONS = new InjectionToken('Translations');\n/** *\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@experimental i18n support is experimental.\n  @type {?} */\nexport var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nvar MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nexport { MissingTranslationStrategy };\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';\n//# sourceMappingURL=tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_INITIALIZER, ApplicationInitStatus } from './application_init';\nimport { ApplicationRef } from './application_ref';\nimport { APP_ID_RANDOM_PROVIDER } from './application_tokens';\nimport { IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers } from './change_detection/change_detection';\nimport { Console } from './console';\nimport { Injector } from './di';\nimport { Inject, Optional, SkipSelf } from './di/metadata';\nimport { ErrorHandler } from './error_handler';\nimport { LOCALE_ID } from './i18n/tokens';\nimport { ComponentFactoryResolver } from './linker';\nimport { Compiler } from './linker/compiler';\nimport { NgModule } from './metadata';\nimport { NgZone } from './zone';\n/**\n * @return {?}\n */\nexport function _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nexport function _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nexport function _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/** @type {?} */\nexport var APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * This module includes the providers of \\@angular/core that are needed\n * to bootstrap components via `ApplicationRef`.\n *\n * \\@experimental\n */\nvar ApplicationModule = /** @class */ (function () {\n    // Inject ApplicationRef to make it eager...\n    function ApplicationModule(appRef) {\n    }\n    ApplicationModule.decorators = [\n        { type: NgModule, args: [{ providers: APPLICATION_MODULE_PROVIDERS },] },\n    ];\n    /** @nocollapse */\n    ApplicationModule.ctorParameters = function () { return [\n        { type: ApplicationRef }\n    ]; };\n    return ApplicationModule;\n}());\nexport { ApplicationModule };\n//# sourceMappingURL=application_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// unsupported: template constraints.\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n * @record\n * @template D\n */\nexport function DefinitionFactory() { }\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n * @record\n */\nexport function NodeLogger() { }\n// unsupported: template constraints.\n/**\n * @record\n * @template DF\n */\nexport function Definition() { }\n/** @type {?} */\nDefinition.prototype.factory;\n/**\n * @record\n */\nexport function NgModuleDefinition() { }\n/** @type {?} */\nNgModuleDefinition.prototype.providers;\n/** @type {?} */\nNgModuleDefinition.prototype.providersByKey;\n/** @type {?} */\nNgModuleDefinition.prototype.modules;\n/** @type {?} */\nNgModuleDefinition.prototype.isRoot;\n/**\n * @record\n */\nexport function NgModuleDefinitionFactory() { }\n/**\n * @record\n */\nexport function ViewDefinition() { }\n/** @type {?} */\nViewDefinition.prototype.flags;\n/** @type {?} */\nViewDefinition.prototype.updateDirectives;\n/** @type {?} */\nViewDefinition.prototype.updateRenderer;\n/** @type {?} */\nViewDefinition.prototype.handleEvent;\n/**\n * Order: Depth first.\n * Especially providers are before elements / anchors.\n * @type {?}\n */\nViewDefinition.prototype.nodes;\n/**\n * aggregated NodeFlags for all nodes *\n * @type {?}\n */\nViewDefinition.prototype.nodeFlags;\n/** @type {?} */\nViewDefinition.prototype.rootNodeFlags;\n/** @type {?} */\nViewDefinition.prototype.lastRenderRootNode;\n/** @type {?} */\nViewDefinition.prototype.bindingCount;\n/** @type {?} */\nViewDefinition.prototype.outputCount;\n/**\n * Binary or of all query ids that are matched by one of the nodes.\n * This includes query ids from templates as well.\n * Used as a bloom filter.\n * @type {?}\n */\nViewDefinition.prototype.nodeMatchedQueries;\n/**\n * @record\n */\nexport function ViewDefinitionFactory() { }\n/**\n * @record\n */\nexport function ViewUpdateFn() { }\n/**\n * @record\n */\nexport function NodeCheckFn() { }\n/** @enum {number} */\nvar ArgumentType = {\n    Inline: 0, Dynamic: 1,\n};\nexport { ArgumentType };\n/**\n * @record\n */\nexport function ViewHandleEventFn() { }\n/** @enum {number} */\nvar ViewFlags = {\n    None: 0,\n    OnPush: 2,\n};\nexport { ViewFlags };\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n * @record\n */\nexport function NodeDef() { }\n/** @type {?} */\nNodeDef.prototype.flags;\n/** @type {?} */\nNodeDef.prototype.nodeIndex;\n/** @type {?} */\nNodeDef.prototype.checkIndex;\n/** @type {?} */\nNodeDef.prototype.parent;\n/** @type {?} */\nNodeDef.prototype.renderParent;\n/**\n * this is checked against NgContentDef.index to find matched nodes\n * @type {?}\n */\nNodeDef.prototype.ngContentIndex;\n/**\n * number of transitive children\n * @type {?}\n */\nNodeDef.prototype.childCount;\n/**\n * aggregated NodeFlags for all transitive children (does not include self) *\n * @type {?}\n */\nNodeDef.prototype.childFlags;\n/**\n * aggregated NodeFlags for all direct children (does not include self) *\n * @type {?}\n */\nNodeDef.prototype.directChildFlags;\n/** @type {?} */\nNodeDef.prototype.bindingIndex;\n/** @type {?} */\nNodeDef.prototype.bindings;\n/** @type {?} */\nNodeDef.prototype.bindingFlags;\n/** @type {?} */\nNodeDef.prototype.outputIndex;\n/** @type {?} */\nNodeDef.prototype.outputs;\n/**\n * references that the user placed on the element\n * @type {?}\n */\nNodeDef.prototype.references;\n/**\n * ids and value types of all queries that are matched by this node.\n * @type {?}\n */\nNodeDef.prototype.matchedQueries;\n/**\n * Binary or of all matched query ids of this node.\n * @type {?}\n */\nNodeDef.prototype.matchedQueryIds;\n/**\n * Binary or of all query ids that are matched by one of the children.\n * This includes query ids from templates as well.\n * Used as a bloom filter.\n * @type {?}\n */\nNodeDef.prototype.childMatchedQueries;\n/** @type {?} */\nNodeDef.prototype.element;\n/** @type {?} */\nNodeDef.prototype.provider;\n/** @type {?} */\nNodeDef.prototype.text;\n/** @type {?} */\nNodeDef.prototype.query;\n/** @type {?} */\nNodeDef.prototype.ngContent;\n/** @enum {number} */\nvar NodeFlags = {\n    None: 0,\n    TypeElement: 1,\n    TypeText: 2,\n    ProjectedTemplate: 4,\n    CatRenderNode: 3,\n    TypeNgContent: 8,\n    TypePipe: 16,\n    TypePureArray: 32,\n    TypePureObject: 64,\n    TypePurePipe: 128,\n    CatPureExpression: 224,\n    TypeValueProvider: 256,\n    TypeClassProvider: 512,\n    TypeFactoryProvider: 1024,\n    TypeUseExistingProvider: 2048,\n    LazyProvider: 4096,\n    PrivateProvider: 8192,\n    TypeDirective: 16384,\n    Component: 32768,\n    CatProviderNoDirective: 3840,\n    CatProvider: 20224,\n    OnInit: 65536,\n    OnDestroy: 131072,\n    DoCheck: 262144,\n    OnChanges: 524288,\n    AfterContentInit: 1048576,\n    AfterContentChecked: 2097152,\n    AfterViewInit: 4194304,\n    AfterViewChecked: 8388608,\n    EmbeddedViews: 16777216,\n    ComponentView: 33554432,\n    TypeContentQuery: 67108864,\n    TypeViewQuery: 134217728,\n    StaticQuery: 268435456,\n    DynamicQuery: 536870912,\n    TypeNgModule: 1073741824,\n    CatQuery: 201326592,\n    // mutually exclusive values...\n    Types: 201347067,\n};\nexport { NodeFlags };\n/**\n * @record\n */\nexport function BindingDef() { }\n/** @type {?} */\nBindingDef.prototype.flags;\n/** @type {?} */\nBindingDef.prototype.ns;\n/** @type {?} */\nBindingDef.prototype.name;\n/** @type {?} */\nBindingDef.prototype.nonMinifiedName;\n/** @type {?} */\nBindingDef.prototype.securityContext;\n/** @type {?} */\nBindingDef.prototype.suffix;\n/** @enum {number} */\nvar BindingFlags = {\n    TypeElementAttribute: 1,\n    TypeElementClass: 2,\n    TypeElementStyle: 4,\n    TypeProperty: 8,\n    SyntheticProperty: 16,\n    SyntheticHostProperty: 32,\n    CatSyntheticProperty: 48,\n    // mutually exclusive values...\n    Types: 15,\n};\nexport { BindingFlags };\n/**\n * @record\n */\nexport function OutputDef() { }\n/** @type {?} */\nOutputDef.prototype.type;\n/** @type {?} */\nOutputDef.prototype.target;\n/** @type {?} */\nOutputDef.prototype.eventName;\n/** @type {?} */\nOutputDef.prototype.propName;\n/** @enum {number} */\nvar OutputType = {\n    ElementOutput: 0, DirectiveOutput: 1,\n};\nexport { OutputType };\n/** @enum {number} */\nvar QueryValueType = {\n    ElementRef: 0,\n    RenderElement: 1,\n    TemplateRef: 2,\n    ViewContainerRef: 3,\n    Provider: 4,\n};\nexport { QueryValueType };\n/**\n * @record\n */\nexport function ElementDef() { }\n/** @type {?} */\nElementDef.prototype.name;\n/** @type {?} */\nElementDef.prototype.ns;\n/**\n * ns, name, value\n * @type {?}\n */\nElementDef.prototype.attrs;\n/** @type {?} */\nElementDef.prototype.template;\n/** @type {?} */\nElementDef.prototype.componentProvider;\n/** @type {?} */\nElementDef.prototype.componentRendererType;\n/** @type {?} */\nElementDef.prototype.componentView;\n/**\n * visible public providers for DI in the view,\n * as see from this element. This does not include private providers.\n * @type {?}\n */\nElementDef.prototype.publicProviders;\n/**\n * same as visiblePublicProviders, but also includes private providers\n * that are located on this element.\n * @type {?}\n */\nElementDef.prototype.allProviders;\n/** @type {?} */\nElementDef.prototype.handleEvent;\n/**\n * @record\n */\nexport function ElementHandleEventFn() { }\n/**\n * @record\n */\nexport function ProviderDef() { }\n/** @type {?} */\nProviderDef.prototype.token;\n/** @type {?} */\nProviderDef.prototype.value;\n/** @type {?} */\nProviderDef.prototype.deps;\n/**\n * @record\n */\nexport function NgModuleProviderDef() { }\n/** @type {?} */\nNgModuleProviderDef.prototype.flags;\n/** @type {?} */\nNgModuleProviderDef.prototype.index;\n/** @type {?} */\nNgModuleProviderDef.prototype.token;\n/** @type {?} */\nNgModuleProviderDef.prototype.value;\n/** @type {?} */\nNgModuleProviderDef.prototype.deps;\n/**\n * @record\n */\nexport function DepDef() { }\n/** @type {?} */\nDepDef.prototype.flags;\n/** @type {?} */\nDepDef.prototype.token;\n/** @type {?} */\nDepDef.prototype.tokenKey;\n/** @enum {number} */\nvar DepFlags = {\n    None: 0,\n    SkipSelf: 1,\n    Optional: 2,\n    Self: 4,\n    Value: 8,\n};\nexport { DepFlags };\n/**\n * @record\n */\nexport function TextDef() { }\n/** @type {?} */\nTextDef.prototype.prefix;\n/**\n * @record\n */\nexport function QueryDef() { }\n/** @type {?} */\nQueryDef.prototype.id;\n/** @type {?} */\nQueryDef.prototype.filterId;\n/** @type {?} */\nQueryDef.prototype.bindings;\n/**\n * @record\n */\nexport function QueryBindingDef() { }\n/** @type {?} */\nQueryBindingDef.prototype.propName;\n/** @type {?} */\nQueryBindingDef.prototype.bindingType;\n/** @enum {number} */\nvar QueryBindingType = {\n    First: 0, All: 1,\n};\nexport { QueryBindingType };\n/**\n * @record\n */\nexport function NgContentDef() { }\n/**\n * this index is checked against NodeDef.ngContentIndex to find the nodes\n * that are matched by this ng-content.\n * Note that a NodeDef with an ng-content can be reprojected, i.e.\n * have a ngContentIndex on its own.\n * @type {?}\n */\nNgContentDef.prototype.index;\n/**\n * @record\n */\nexport function NgModuleData() { }\n/** @type {?} */\nNgModuleData.prototype._def;\n/** @type {?} */\nNgModuleData.prototype._parent;\n/** @type {?} */\nNgModuleData.prototype._providers;\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ViewData() { }\n/** @type {?} */\nViewData.prototype.def;\n/** @type {?} */\nViewData.prototype.root;\n/** @type {?} */\nViewData.prototype.renderer;\n/** @type {?} */\nViewData.prototype.parentNodeDef;\n/** @type {?} */\nViewData.prototype.parent;\n/** @type {?} */\nViewData.prototype.viewContainerParent;\n/** @type {?} */\nViewData.prototype.component;\n/** @type {?} */\nViewData.prototype.context;\n/** @type {?} */\nViewData.prototype.nodes;\n/** @type {?} */\nViewData.prototype.state;\n/** @type {?} */\nViewData.prototype.oldValues;\n/** @type {?} */\nViewData.prototype.disposables;\n/** @type {?} */\nViewData.prototype.initIndex;\n/** @enum {number} */\nvar ViewState = {\n    BeforeFirstCheck: 1,\n    FirstCheck: 2,\n    Attached: 4,\n    ChecksEnabled: 8,\n    IsProjectedView: 16,\n    CheckProjectedView: 32,\n    CheckProjectedViews: 64,\n    Destroyed: 128,\n    // InitState Uses 3 bits\n    InitState_Mask: 1792,\n    InitState_BeforeInit: 0,\n    InitState_CallingOnInit: 256,\n    InitState_CallingAfterContentInit: 512,\n    InitState_CallingAfterViewInit: 768,\n    InitState_AfterInit: 1024,\n    CatDetectChanges: 12,\n    CatInit: 13,\n};\nexport { ViewState };\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nexport function shiftInitState(view, priorInitState, newInitState) {\n    /** @type {?} */\n    var state = view.state;\n    /** @type {?} */\n    var initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nexport function shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * @record\n */\nexport function DisposableFn() { }\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nvar /**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nNodeData = /** @class */ (function () {\n    function NodeData() {\n    }\n    return NodeData;\n}());\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nexport { NodeData };\nif (false) {\n    /** @type {?} */\n    NodeData.prototype.__brand;\n}\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function TextData() { }\n/** @type {?} */\nTextData.prototype.renderText;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asTextData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ElementData() { }\n/** @type {?} */\nElementData.prototype.renderElement;\n/** @type {?} */\nElementData.prototype.componentView;\n/** @type {?} */\nElementData.prototype.viewContainer;\n/** @type {?} */\nElementData.prototype.template;\n/**\n * @record\n */\nexport function ViewContainerData() { }\n/** @type {?} */\nViewContainerData.prototype._embeddedViews;\n/**\n * @record\n */\nexport function TemplateData() { }\n/** @type {?} */\nTemplateData.prototype._projectedViews;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asElementData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ProviderData() { }\n/** @type {?} */\nProviderData.prototype.instance;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asProviderData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function PureExpressionData() { }\n/** @type {?} */\nPureExpressionData.prototype.value;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asPureExpressionData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asQueryList(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * @record\n */\nexport function RootData() { }\n/** @type {?} */\nRootData.prototype.injector;\n/** @type {?} */\nRootData.prototype.ngModule;\n/** @type {?} */\nRootData.prototype.projectableNodes;\n/** @type {?} */\nRootData.prototype.selectorOrNode;\n/** @type {?} */\nRootData.prototype.renderer;\n/** @type {?} */\nRootData.prototype.rendererFactory;\n/** @type {?} */\nRootData.prototype.errorHandler;\n/** @type {?} */\nRootData.prototype.sanitizer;\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nDebugContext = /** @class */ (function () {\n    function DebugContext() {\n    }\n    return DebugContext;\n}());\n/**\n * @abstract\n */\nexport { DebugContext };\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.view = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.nodeIndex = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.componentRenderElement = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.renderNode = function () { };\n    /**\n     * @abstract\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext.prototype.logError = function (console, values) { };\n}\n/** @enum {number} */\nvar CheckType = {\n    CheckAndUpdate: 0, CheckNoChanges: 1,\n};\nexport { CheckType };\n/**\n * @record\n */\nexport function ProviderOverride() { }\n/** @type {?} */\nProviderOverride.prototype.token;\n/** @type {?} */\nProviderOverride.prototype.flags;\n/** @type {?} */\nProviderOverride.prototype.value;\n/** @type {?} */\nProviderOverride.prototype.deps;\n/** @type {?} */\nProviderOverride.prototype.deprecatedBehavior;\n/** *\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n  @type {?} */\nexport var Services = {\n    setCurrentNode: /** @type {?} */ ((undefined)),\n    createRootView: /** @type {?} */ ((undefined)),\n    createEmbeddedView: /** @type {?} */ ((undefined)),\n    createComponentView: /** @type {?} */ ((undefined)),\n    createNgModuleRef: /** @type {?} */ ((undefined)),\n    overrideProvider: /** @type {?} */ ((undefined)),\n    overrideComponentView: /** @type {?} */ ((undefined)),\n    clearOverrides: /** @type {?} */ ((undefined)),\n    checkAndUpdateView: /** @type {?} */ ((undefined)),\n    checkNoChangesView: /** @type {?} */ ((undefined)),\n    destroyView: /** @type {?} */ ((undefined)),\n    resolveDep: /** @type {?} */ ((undefined)),\n    createDebugContext: /** @type {?} */ ((undefined)),\n    handleEvent: /** @type {?} */ ((undefined)),\n    updateDirectives: /** @type {?} */ ((undefined)),\n    updateRenderer: /** @type {?} */ ((undefined)),\n    dirtyParentQueries: /** @type {?} */ ((undefined)),\n};\n//# sourceMappingURL=types.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext } from '../errors';\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    /** @type {?} */\n    var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (isFirstCheck) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nexport function viewDebugError(msg, context) {\n    /** @type {?} */\n    var err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    (/** @type {?} */ (err))[ERROR_DEBUG_CONTEXT] = context;\n    (/** @type {?} */ (err))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nexport function isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nexport function viewDestroyedError(action) {\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedValue, devModeEqual } from '../change_detection/change_detection';\nimport { SOURCE } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { looseIdentical, stringify } from '../util';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { Services, asElementData, asTextData } from './types';\n/** @type {?} */\nexport var NOOP = function () { };\n/** @type {?} */\nvar _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenKey(token) {\n    /** @type {?} */\n    var key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        /** @type {?} */\n        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        /** @type {?} */\n        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\n/** @type {?} */\nvar UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nvar EMPTY_RENDERER_TYPE_ID = '$$empty';\n/**\n * @param {?} values\n * @return {?}\n */\nexport function createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\n/** @type {?} */\nvar _renderCompCount = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nexport function resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        /** @type {?} */\n        var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = \"c\" + _renderCompCount++;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBinding(view, def, bindingIdx, value) {\n    /** @type {?} */\n    var oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBindingNoChanges(view, def, bindingIdx, value) {\n    /** @type {?} */\n    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        /** @type {?} */\n        var bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function markParentViewsForCheck(view) {\n    /** @type {?} */\n    var currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nexport function markParentViewsForCheckProjectedViews(view, endView) {\n    /** @type {?} */\n    var currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nexport function dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function declaredViewContainer(view) {\n    if (view.parent) {\n        /** @type {?} */\n        var parentView = view.parent;\n        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nexport function viewParentEl(view) {\n    /** @type {?} */\n    var parentView = view.parent;\n    if (parentView) {\n        return /** @type {?} */ ((view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isComponentView(view) {\n    return !!view.parent && !!(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isEmbeddedView(view) {\n    return !!view.parent && !(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nexport function splitMatchedQueriesDsl(matchedQueriesDsl) {\n    /** @type {?} */\n    var matchedQueries = {};\n    /** @type {?} */\n    var matchedQueryIds = 0;\n    /** @type {?} */\n    var references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(function (_a) {\n            var queryId = _a[0], valueType = _a[1];\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nexport function splitDepsDsl(deps, sourceName) {\n    return deps.map(function (value) {\n        /** @type {?} */\n        var token;\n        /** @type {?} */\n        var flags;\n        if (Array.isArray(value)) {\n            flags = value[0], token = value[1];\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\n    });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function getParentRenderElement(view, renderHost, def) {\n    /** @type {?} */\n    var renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            (/** @type {?} */ ((renderParent.element)).componentRendererType && /** @type {?} */ ((/** @type {?} */ ((renderParent.element)).componentRendererType)).encapsulation === ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\n/** @type {?} */\nvar DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nexport function resolveDefinition(factory) {\n    /** @type {?} */\n    var value = /** @type {?} */ (((DEFINITION_CACHE.get(factory))));\n    if (!value) {\n        value = factory(function () { return NOOP; });\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function rootRenderNodes(view) {\n    /** @type {?} */\n    var renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/** @enum {number} */\nvar RenderNodeAction = {\n    Collect: 0, AppendChild: 1, InsertBefore: 2, RemoveChild: 3,\n};\nexport { RenderNodeAction };\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    var compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    var hostView = /** @type {?} */ ((compView)).parent;\n    /** @type {?} */\n    var hostElDef = viewParentEl(/** @type {?} */ ((compView)));\n    /** @type {?} */\n    var startIndex = /** @type {?} */ ((hostElDef)).nodeIndex + 1;\n    /** @type {?} */\n    var endIndex = /** @type {?} */ ((hostElDef)).nodeIndex + /** @type {?} */ ((hostElDef)).childCount;\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = /** @type {?} */ ((hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!/** @type {?} */ ((hostView)).parent) {\n        /** @type {?} */\n        var projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (var i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        /** @type {?} */\n        var rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                /** @type {?} */\n                var compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            var embeddedViews = /** @type {?} */ ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !/** @type {?} */ ((nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    var renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            /** @type {?} */ ((target)).push(renderNode);\n            break;\n    }\n}\n/** @type {?} */\nvar NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function splitNamespace(name) {\n    if (name[0] === ':') {\n        /** @type {?} */\n        var match = /** @type {?} */ ((name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nexport function calcBindingFlags(bindings) {\n    /** @type {?} */\n    var flags = 0;\n    for (var i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nexport function interpolate(valueCount, constAndInterp) {\n    /** @type {?} */\n    var result = '';\n    for (var i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nexport function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(\"Does not support more than 9 expressions\");\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\n/** @type {?} */\nexport var EMPTY_ARRAY = [];\n/** @type {?} */\nexport var EMPTY_MAP = {};\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from '../metadata/view';\nimport { SecurityContext } from '../sanitization/security';\nimport { asElementData } from './types';\nimport { NOOP, calcBindingFlags, checkAndUpdateBinding, dispatchEvent, elementEventFullName, getParentRenderElement, resolveDefinition, resolveRendererType2, splitMatchedQueriesDsl, splitNamespace } from './util';\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nexport function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    /** @type {?} */\n    var template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags: flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template: template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nexport function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\n    var _a;\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;\n    /** @type {?} */\n    var ns = /** @type {?} */ ((null));\n    /** @type {?} */\n    var name = /** @type {?} */ ((null));\n    if (namespaceAndName) {\n        _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n    }\n    bindings = bindings || [];\n    /** @type {?} */\n    var bindingDefs = new Array(bindings.length);\n    for (var i = 0; i < bindings.length; i++) {\n        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];\n        /** @type {?} */\n        var securityContext = /** @type {?} */ ((undefined));\n        /** @type {?} */\n        var suffix = /** @type {?} */ ((undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n    }\n    outputs = outputs || [];\n    /** @type {?} */\n    var outputDefs = new Array(outputs.length);\n    for (var i = 0; i < outputs.length; i++) {\n        var _e = outputs[i], target = _e[0], eventName = _e[1];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: /** @type {?} */ (target), eventName: eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    /** @type {?} */\n    var attrs = /** @type {?} */ (fixedAttrs.map(function (_a) {\n        var namespaceAndName = _a[0], value = _a[1];\n        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n        return [ns, name, value];\n    }));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns: ns,\n            name: name,\n            attrs: attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createElement(view, renderHost, def) {\n    /** @type {?} */\n    var elDef = /** @type {?} */ ((def.element));\n    /** @type {?} */\n    var rootSelectorOrNode = view.root.selectorOrNode;\n    /** @type {?} */\n    var renderer = view.renderer;\n    /** @type {?} */\n    var el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        /** @type {?} */\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        /** @type {?} */\n        var preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (var i = 0; i < elDef.attrs.length; i++) {\n            var _a = elDef.attrs[i], ns = _a[0], name_2 = _a[1], value = _a[2];\n            renderer.setAttribute(el, name_2, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nexport function listenToElementOutputs(view, compView, def, el) {\n    for (var i = 0; i < def.outputs.length; i++) {\n        /** @type {?} */\n        var output = def.outputs[i];\n        /** @type {?} */\n        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        /** @type {?} */\n        var listenTarget = output.target;\n        /** @type {?} */\n        var listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        /** @type {?} */\n        var disposable = /** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */\n        ((view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindLen = def.bindings.length;\n    /** @type {?} */\n    var changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateElementDynamic(view, def, values) {\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    /** @type {?} */\n    var binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    var elData = asElementData(view, def.nodeIndex);\n    /** @type {?} */\n    var renderNode = elData.renderElement;\n    /** @type {?} */\n    var name = /** @type {?} */ ((binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            /** @type {?} */\n            var bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    /** @type {?} */\n    var securityContext = binding.securityContext;\n    /** @type {?} */\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode, name, value) {\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        /** @type {?} */\n        var unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    var securityContext = binding.securityContext;\n    /** @type {?} */\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n//# sourceMappingURL=element.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { INJECTOR, Injector, setCurrentInjector } from '../di/injector';\nimport { APP_ROOT } from '../di/scope';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { splitDepsDsl, tokenKey } from './util';\n/** @type {?} */\nvar UNDEFINED_VALUE = new Object();\n/** @type {?} */\nvar InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\n/** @type {?} */\nvar NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags: flags, token: token, value: value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nexport function moduleDef(providers) {\n    /** @type {?} */\n    var providersByKey = {};\n    /** @type {?} */\n    var modules = [];\n    /** @type {?} */\n    var isRoot = false;\n    for (var i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        var provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey: providersByKey,\n        providers: providers,\n        modules: modules,\n        isRoot: isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function initNgModule(data) {\n    /** @type {?} */\n    var def = data._def;\n    /** @type {?} */\n    var providers = data._providers = new Array(def.providers.length);\n    for (var i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        var provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveNgModuleDep(data, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    /** @type {?} */\n    var former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        /** @type {?} */\n        var tokenKey_1 = depDef.tokenKey;\n        switch (tokenKey_1) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        /** @type {?} */\n        var providerDef = data._def.providersByKey[tokenKey_1];\n        if (providerDef) {\n            /** @type {?} */\n            var providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if (depDef.token.ngInjectableDef && targetsModule(data, depDef.token.ngInjectableDef)) {\n            /** @type {?} */\n            var injectableDef = /** @type {?} */ (depDef.token.ngInjectableDef);\n            /** @type {?} */\n            var key = tokenKey_1;\n            /** @type {?} */\n            var index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index: index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    /** @type {?} */\n    var injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable != null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callNgModuleLifecycle(ngModule, lifecycles) {\n    /** @type {?} */\n    var def = ngModule._def;\n    /** @type {?} */\n    var destroyed = new Set();\n    for (var i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        var provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            /** @type {?} */\n            var instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                /** @type {?} */\n                var onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=ng_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Services } from './types';\nimport { declaredViewContainer, renderNode, visitRootRenderNodes } from './util';\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nexport function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    /** @type {?} */\n    var prevView = /** @type {?} */ ((viewIndex)) > 0 ? embeddedViews[/** @type {?} */ ((viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    /** @type {?} */\n    var dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    /** @type {?} */\n    var projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    /** @type {?} */\n    var parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nexport function detachEmbeddedView(elementData, viewIndex) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    /** @type {?} */\n    var view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    /** @type {?} */\n    var dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        /** @type {?} */\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nexport function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    /** @type {?} */\n    var view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    /** @type {?} */\n    var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    /** @type {?} */\n    var prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    /** @type {?} */\n    var parentNode = view.renderer.parentNode(prevRenderNode);\n    /** @type {?} */\n    var nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function renderDetachView(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=view_attach.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { ComponentFactory, ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef } from '../linker/element_ref';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { TemplateRef } from '../linker/template_ref';\nimport { stringify } from '../util';\nimport { VERSION } from '../version';\nimport { callNgModuleLifecycle, initNgModule, resolveNgModuleDep } from './ng_module';\nimport { Services, asElementData, asProviderData, asTextData } from './types';\nimport { markParentViewsForCheck, resolveDefinition, rootRenderNodes, splitNamespace, tokenKey, viewParentEl } from './util';\nimport { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView, renderDetachView } from './view_attach';\n/** @type {?} */\nvar EMPTY_CONTEXT = new Object();\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nexport function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nexport function getComponentViewDefinitionFactory(componentFactory) {\n    return (/** @type {?} */ (componentFactory)).viewDefFactory;\n}\nvar ComponentFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory_, _super);\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.selector = selector;\n        _this.componentType = componentType;\n        _this._inputs = _inputs;\n        _this._outputs = _outputs;\n        _this.ngContentSelectors = ngContentSelectors;\n        _this.viewDefFactory = viewDefFactory;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var inputsArr = [];\n            /** @type {?} */\n            var inputs = /** @type {?} */ ((this._inputs));\n            for (var propName in inputs) {\n                /** @type {?} */\n                var templateName = inputs[propName];\n                inputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return inputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var outputsArr = [];\n            for (var propName in this._outputs) {\n                /** @type {?} */\n                var templateName = this._outputs[propName];\n                outputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return outputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a new component.\n     */\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory_.prototype.create = /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        /** @type {?} */\n        var viewDef = resolveDefinition(this.viewDefFactory);\n        /** @type {?} */\n        var componentNodeIndex = /** @type {?} */ ((/** @type {?} */ ((viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        /** @type {?} */\n        var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        /** @type {?} */\n        var component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    };\n    return ComponentFactory_;\n}(ComponentFactory));\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ComponentFactory_.prototype.viewDefFactory;\n    /** @type {?} */\n    ComponentFactory_.prototype.selector;\n    /** @type {?} */\n    ComponentFactory_.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory_.prototype._inputs;\n    /** @type {?} */\n    ComponentFactory_.prototype._outputs;\n    /** @type {?} */\n    ComponentFactory_.prototype.ngContentSelectors;\n}\nvar ComponentRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef_, _super);\n    function ComponentRef_(_view, _viewRef, _component) {\n        var _this = _super.call(this) || this;\n        _this._view = _view;\n        _this._viewRef = _viewRef;\n        _this._component = _component;\n        _this._elDef = _this._view.def.nodes[0];\n        _this.hostView = _viewRef;\n        _this.changeDetectorRef = _viewRef;\n        _this.instance = _component;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (this._component.constructor); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ComponentRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this._viewRef.destroy(); };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._viewRef.onDestroy(callback); };\n    return ComponentRef_;\n}(ComponentRef));\nif (false) {\n    /** @type {?} */\n    ComponentRef_.prototype.hostView;\n    /** @type {?} */\n    ComponentRef_.prototype.instance;\n    /** @type {?} */\n    ComponentRef_.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef_.prototype._elDef;\n    /** @type {?} */\n    ComponentRef_.prototype._view;\n    /** @type {?} */\n    ComponentRef_.prototype._viewRef;\n    /** @type {?} */\n    ComponentRef_.prototype._component;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nexport function createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nvar ViewContainerRef_ = /** @class */ (function () {\n    function ViewContainerRef_(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new ElementRef(this._data.renderElement); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n        /** @deprecated No replacement */\n        get: /**\n         * @deprecated No replacement\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var view = this._view;\n            /** @type {?} */\n            var elDef = this._elDef.parent;\n            while (!elDef && view) {\n                elDef = viewParentEl(view);\n                view = /** @type {?} */ ((view.parent));\n            }\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.clear = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var len = this._embeddedViews.length;\n        for (var i = len - 1; i >= 0; i--) {\n            /** @type {?} */\n            var view = /** @type {?} */ ((detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.get = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var view = this._embeddedViews[index];\n        if (view) {\n            /** @type {?} */\n            var ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    };\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._embeddedViews.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createEmbeddedView = /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    function (templateRef, context, index) {\n        /** @type {?} */\n        var viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createComponent = /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        var contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        /** @type {?} */\n        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.insert = /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    function (viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        var viewRef_ = /** @type {?} */ (viewRef);\n        /** @type {?} */\n        var viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.move = /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    function (viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        var previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.indexOf = /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        return this._embeddedViews.indexOf((/** @type {?} */ (viewRef))._view);\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.remove = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.detach = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    };\n    return ViewContainerRef_;\n}());\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef_.prototype._embeddedViews;\n    /** @type {?} */\n    ViewContainerRef_.prototype._view;\n    /** @type {?} */\n    ViewContainerRef_.prototype._elDef;\n    /** @type {?} */\n    ViewContainerRef_.prototype._data;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nvar ViewRef_ = /** @class */ (function () {\n    function ViewRef_(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return rootRenderNodes(this._view); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._view.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.markForCheck = /**\n     * @return {?}\n     */\n    function () { markParentViewsForCheck(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detach = /**\n     * @return {?}\n     */\n    function () { this._view.state &= ~4 /* Attached */; };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { Services.checkNoChangesView(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.reattach = /**\n     * @return {?}\n     */\n    function () { this._view.state |= 4 /* Attached */; };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push(/** @type {?} */ (callback));\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () {\n        this._appRef = null;\n        renderDetachView(this._view);\n        Services.dirtyParentQueries(this._view);\n    };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    return ViewRef_;\n}());\nexport { ViewRef_ };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef_.prototype._view;\n    /** @type {?} */\n    ViewRef_.prototype._viewContainerRef;\n    /** @type {?} */\n    ViewRef_.prototype._appRef;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nvar TemplateRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(TemplateRef_, _super);\n    function TemplateRef_(_parentView, _def) {\n        var _this = _super.call(this) || this;\n        _this._parentView = _parentView;\n        _this._def = _def;\n        return _this;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateRef_.prototype.createEmbeddedView = /**\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((/** @type {?} */ ((this._def.element)).template)), context));\n    };\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef_;\n}(TemplateRef));\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef_.prototype._projectedViews;\n    /** @type {?} */\n    TemplateRef_.prototype._parentView;\n    /** @type {?} */\n    TemplateRef_.prototype._def;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nexport function createInjector(view, elDef) {\n    return new Injector_(view, elDef);\n}\nvar Injector_ = /** @class */ (function () {\n    function Injector_(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        /** @type {?} */\n        var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n    };\n    return Injector_;\n}());\nif (false) {\n    /** @type {?} */\n    Injector_.prototype.view;\n    /** @type {?} */\n    Injector_.prototype.elDef;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function nodeValue(view, index) {\n    /** @type {?} */\n    var def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        /** @type {?} */\n        var elData = asElementData(view, def.nodeIndex);\n        return /** @type {?} */ ((def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nvar RendererAdapter = /** @class */ (function () {\n    function RendererAdapter(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    RendererAdapter.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    RendererAdapter.prototype.createElement = /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    function (parent, namespaceAndName) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        /** @type {?} */\n        var el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    };\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createViewRoot = /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    function (hostElement) { return hostElement; };\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createTemplateAnchor = /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    function (parentElement) {\n        /** @type {?} */\n        var comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    RendererAdapter.prototype.createText = /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    function (parentElement, value) {\n        /** @type {?} */\n        var node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.projectNodes = /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (parentElement, nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    };\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.attachViewAfter = /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (node, viewRootNodes) {\n        /** @type {?} */\n        var parentElement = this.delegate.parentNode(node);\n        /** @type {?} */\n        var nextSibling = this.delegate.nextSibling(node);\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    };\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.detachView = /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (viewRootNodes) {\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            /** @type {?} */\n            var node = viewRootNodes[i];\n            /** @type {?} */\n            var parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    };\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.destroyView = /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    function (hostElement, viewAllNodes) {\n        for (var i = 0; i < viewAllNodes.length; i++) {\n            /** @type {?} */ ((this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listen = /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listenGlobal = /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, name, callback) {\n        return this.delegate.listen(target, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementProperty = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?} attributeValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementAttribute = /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?} attributeValue\n     * @return {?}\n     */\n    function (renderElement, namespaceAndName, attributeValue) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setBindingDebugInfo = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementClass = /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementStyle = /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    function (renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    RendererAdapter.prototype.invokeElementMethod = /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    function (renderElement, methodName, args) {\n        (/** @type {?} */ (renderElement))[methodName].apply(renderElement, args);\n    };\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    RendererAdapter.prototype.setText = /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n    /**\n     * @return {?}\n     */\n    RendererAdapter.prototype.animate = /**\n     * @return {?}\n     */\n    function () { throw new Error('Renderer.animate is no longer supported!'); };\n    return RendererAdapter;\n}());\nif (false) {\n    /** @type {?} */\n    RendererAdapter.prototype.delegate;\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nexport function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nvar NgModuleRef_ = /** @class */ (function () {\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    NgModuleRef_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = 0 /* Default */; }\n        /** @type {?} */\n        var flags = 0 /* None */;\n        if (injectFlags & 4 /* SkipSelf */) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & 2 /* Self */) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    };\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(this._moduleType); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(ComponentFactoryResolver); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgModuleRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    return NgModuleRef_;\n}());\nif (false) {\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyListeners;\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyed;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._providers;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._modules;\n    /** @type {?} */\n    NgModuleRef_.prototype.injector;\n    /** @type {?} */\n    NgModuleRef_.prototype._moduleType;\n    /** @type {?} */\n    NgModuleRef_.prototype._parent;\n    /** @type {?} */\n    NgModuleRef_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef_.prototype._def;\n}\n//# sourceMappingURL=refs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, SimpleChange, WrappedValue } from '../change_detection/change_detection';\nimport { INJECTOR, Injector, resolveForwardRef } from '../di';\nimport { ElementRef } from '../linker/element_ref';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer as RendererV1, Renderer2 } from '../render/api';\nimport { stringify } from '../util';\nimport { isObservable } from '../util/lang';\nimport { createChangeDetectorRef, createInjector, createRendererV1 } from './refs';\nimport { Services, asElementData, asProviderData, shouldCallLifecycleInitHook } from './types';\nimport { calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl } from './util';\n/** @type {?} */\nvar RendererV1TokenKey = tokenKey(RendererV1);\n/** @type {?} */\nvar Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nvar ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nvar TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nvar InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nexport function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    /** @type {?} */\n    var bindings = [];\n    if (props) {\n        for (var prop in props) {\n            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName: nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    /** @type {?} */\n    var outputDefs = [];\n    if (outputs) {\n        for (var propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nexport function pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nexport function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n        element: null,\n        provider: { token: token, value: value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createProviderInstance(view, def) {\n    return _createProviderInstance(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPipeInstance(view, def) {\n    /** @type {?} */\n    var compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    var allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createDirectiveInstance(view, def) {\n    /** @type {?} */\n    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    /** @type {?} */\n    var instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n    if (def.outputs.length) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            /** @type {?} */\n            var output = def.outputs[i];\n            /** @type {?} */\n            var outputObservable = instance[/** @type {?} */ ((output.propName))];\n            if (isObservable(outputObservable)) {\n                /** @type {?} */\n                var subscription = outputObservable.subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */\n                ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n            }\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    var directive = providerData.instance;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var changes = /** @type {?} */ ((undefined));\n    /** @type {?} */\n    var bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateDirectiveDynamic(view, def, values) {\n    /** @type {?} */\n    var providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    var directive = providerData.instance;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var changes = /** @type {?} */ ((undefined));\n    for (var i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance(view, def) {\n    /** @type {?} */\n    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    /** @type {?} */\n    var providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return /** @type {?} */ ((providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/** @type {?} */\nexport var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    /** @type {?} */\n    var startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    /** @type {?} */\n    var tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && /** @type {?} */ ((elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = /** @type {?} */ ((elDef.parent));\n    }\n    /** @type {?} */\n    var searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    /** @type {?} */\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    /** @type {?} */\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if (/** @type {?} */ ((elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    /** @type {?} */\n                    var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                    return createInjector(searchView, elDef);\n                default:\n                    /** @type {?} */\n                    var providerDef_1 = /** @type {?} */ (((allowPrivateServices ? /** @type {?} */ ((elDef.element)).allProviders : /** @type {?} */ ((elDef.element)).publicProviders)))[tokenKey];\n                    if (providerDef_1) {\n                        /** @type {?} */\n                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\n                            searchView.nodes[providerDef_1.nodeIndex] = /** @type {?} */ (providerData);\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = /** @type {?} */ ((viewParentEl(searchView)));\n        searchView = /** @type {?} */ ((searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    /** @type {?} */\n    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    /** @type {?} */\n    var compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        /** @type {?} */\n        var compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    /** @type {?} */\n    var binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    var propName = /** @type {?} */ ((binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        /** @type {?} */\n        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        /** @type {?} */\n        var binding_1 = def.bindings[bindingIdx];\n        changes[/** @type {?} */ ((binding_1.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    /** @type {?} */\n    var nodes = view.def.nodes;\n    /** @type {?} */\n    var initIndex = 0;\n    for (var i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = nodes[i];\n        /** @type {?} */\n        var parent_1 = nodeDef.parent;\n        if (!parent_1 && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n            i === parent_1.nodeIndex + parent_1.childCount) {\n            // last child of an element\n            if (parent_1.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n            }\n            parent_1 = parent_1.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    /** @type {?} */\n    var providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    /** @type {?} */\n    var provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n//# sourceMappingURL=provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '../linker/element_ref';\nimport { QueryList } from '../linker/query_list';\nimport { asElementData, asProviderData, asQueryList } from './types';\nimport { declaredViewContainer, filterQueryId, isEmbeddedView } from './util';\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nexport function queryDef(flags, id, bindings) {\n    /** @type {?} */\n    var bindingDefs = [];\n    for (var propName in bindings) {\n        /** @type {?} */\n        var bindingType = bindings[propName];\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nexport function createQuery() {\n    return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function dirtyParentQueries(view) {\n    /** @type {?} */\n    var queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        /** @type {?} */\n        var tplDef = /** @type {?} */ ((view.parentNodeDef));\n        view = view.parent;\n        /** @type {?} */\n        var end = tplDef.nodeIndex + tplDef.childCount;\n        for (var i = 0; i <= end; i++) {\n            /** @type {?} */\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                (/** @type {?} */ ((nodeDef.query)).filterId & queryIds) === /** @type {?} */ ((nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (var i = 0; i < view.def.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nexport function checkAndUpdateQuery(view, nodeDef) {\n    /** @type {?} */\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    /** @type {?} */\n    var directiveInstance;\n    /** @type {?} */\n    var newValues = /** @type {?} */ ((undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        /** @type {?} */\n        var elementDef = /** @type {?} */ ((/** @type {?} */ ((nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    /** @type {?} */\n    var bindings = /** @type {?} */ ((nodeDef.query)).bindings;\n    /** @type {?} */\n    var notify = false;\n    for (var i = 0; i < bindings.length; i++) {\n        /** @type {?} */\n        var binding = bindings[i];\n        /** @type {?} */\n        var boundValue = void 0;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        /** @type {?} */\n        var valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */ ((nodeDef.element)).template &&\n            (/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            /** @type {?} */\n            var elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                /** @type {?} */\n                var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    /** @type {?} */\n                    var embeddedView = embeddedViews[k];\n                    /** @type {?} */\n                    var dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            /** @type {?} */\n            var projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (var k = 0; k < projectedViews.length; k++) {\n                    /** @type {?} */\n                    var projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nexport function getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getParentRenderElement, visitProjectedRenderNodes } from './util';\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nexport function ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index: index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function appendNgContent(view, renderHost, def) {\n    /** @type {?} */\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    /** @type {?} */\n    var ngContentIndex = /** @type {?} */ ((def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n//# sourceMappingURL=ng_content.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asPureExpressionData } from './types';\nimport { calcBindingFlags, checkAndUpdateBinding } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nexport function pureObjectDef(checkIndex, propToIndex) {\n    /** @type {?} */\n    var keys = Object.keys(propToIndex);\n    /** @type {?} */\n    var nbKeys = keys.length;\n    /** @type {?} */\n    var propertyNames = new Array(nbKeys);\n    for (var i = 0; i < nbKeys; i++) {\n        /** @type {?} */\n        var key = keys[i];\n        /** @type {?} */\n        var index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    /** @type {?} */\n    var bindings = new Array(propertyNames.length);\n    for (var i = 0; i < propertyNames.length; i++) {\n        /** @type {?} */\n        var prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        var data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[/** @type {?} */ ((bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[/** @type {?} */ ((bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[/** @type {?} */ ((bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[/** @type {?} */ ((bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[/** @type {?} */ ((bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[/** @type {?} */ ((bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[/** @type {?} */ ((bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[/** @type {?} */ ((bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[/** @type {?} */ ((bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[/** @type {?} */ ((bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                var pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionDynamic(view, def, values) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        var data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (var i = 0; i < values.length; i++) {\n                    value[/** @type {?} */ ((bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                var pipe = values[0];\n                /** @type {?} */\n                var params = values.slice(1);\n                value = pipe.transform.apply(pipe, params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n//# sourceMappingURL=pure_expression.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asTextData } from './types';\nimport { checkAndUpdateBinding, getParentRenderElement } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nexport function textDef(checkIndex, ngContentIndex, staticText) {\n    /** @type {?} */\n    var bindings = new Array(staticText.length - 1);\n    for (var i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0, bindings: bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createText(view, renderHost, def) {\n    /** @type {?} */\n    var renderNode;\n    /** @type {?} */\n    var renderer = view.renderer;\n    renderNode = renderer.createText(/** @type {?} */ ((def.text)).prefix);\n    /** @type {?} */\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        var value = /** @type {?} */ ((def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        /** @type {?} */\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateTextDynamic(view, def, values) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        var value = '';\n        for (var i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = /** @type {?} */ ((def.text)).prefix + value;\n        /** @type {?} */\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    /** @type {?} */\n    var valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n//# sourceMappingURL=text.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { checkAndUpdateElementDynamic, checkAndUpdateElementInline, createElement, listenToElementOutputs } from './element';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { appendNgContent } from './ng_content';\nimport { callLifecycleHooksChildrenFirst, checkAndUpdateDirectiveDynamic, checkAndUpdateDirectiveInline, createDirectiveInstance, createPipeInstance, createProviderInstance } from './provider';\nimport { checkAndUpdatePureExpressionDynamic, checkAndUpdatePureExpressionInline, createPureExpression } from './pure_expression';\nimport { checkAndUpdateQuery, createQuery } from './query';\nimport { createTemplateData, createViewContainerData } from './refs';\nimport { checkAndUpdateTextDynamic, checkAndUpdateTextInline, createText } from './text';\nimport { Services, asElementData, asQueryList, asTextData, shiftInitState } from './types';\nimport { NOOP, checkBindingNoChanges, isComponentView, markParentViewsForCheckProjectedViews, resolveDefinition, tokenKey } from './util';\nimport { detachProjectedView } from './view_attach';\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nexport function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    /** @type {?} */\n    var viewBindingCount = 0;\n    /** @type {?} */\n    var viewDisposableCount = 0;\n    /** @type {?} */\n    var viewNodeFlags = 0;\n    /** @type {?} */\n    var viewRootNodeFlags = 0;\n    /** @type {?} */\n    var viewMatchedQueries = 0;\n    /** @type {?} */\n    var currentParent = null;\n    /** @type {?} */\n    var currentRenderParent = null;\n    /** @type {?} */\n    var currentElementHasPublicProviders = false;\n    /** @type {?} */\n    var currentElementHasPrivateProviders = false;\n    /** @type {?} */\n    var lastRenderRootNode = null;\n    for (var i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        var node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            /** @type {?} */\n            var elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? /** @type {?} */ ((currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true; /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).publicProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders); /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).allProviders = /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders;\n            }\n            /** @type {?} */\n            var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            /** @type {?} */\n            var isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true; /** @type {?} */\n                    ((/** @type {?} */ ((currentParent)).element)).allProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders);\n                } /** @type {?} */\n                ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                /** @type {?} */\n                var newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    var handleEvent = function (view, nodeIndex, eventName, event) { return ((/** @type {?} */ ((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */ ((node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    /** @type {?} */\n    var template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        /** @type {?} */\n        var parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.childCount) {\n        /** @type {?} */\n        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nexport function createEmbeddedView(parent, anchorDef, viewDef, context) {\n    /** @type {?} */\n    var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nexport function createRootView(root, def, context) {\n    /** @type {?} */\n    var view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nexport function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    var rendererType = /** @type {?} */ ((nodeDef.element)).componentRendererType;\n    /** @type {?} */\n    var compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    /** @type {?} */\n    var nodes = new Array(def.nodes.length);\n    /** @type {?} */\n    var disposables = def.outputCount ? new Array(def.outputCount) : null;\n    /** @type {?} */\n    var view = {\n        def: def,\n        parent: parent,\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\n        context: null,\n        component: null, nodes: nodes,\n        state: 13 /* CatInit */, root: root, renderer: renderer,\n        oldValues: new Array(def.bindingCount), disposables: disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    /** @type {?} */\n    var renderHost;\n    if (isComponentView(view)) {\n        /** @type {?} */\n        var hostDef = view.parentNodeDef;\n        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((/** @type {?} */ ((hostDef)).parent)).nodeIndex).renderElement;\n    }\n    /** @type {?} */\n    var def = view.def;\n    /** @type {?} */\n    var nodes = view.nodes;\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        /** @type {?} */\n        var nodeData = void 0;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                /** @type {?} */\n                var el = /** @type {?} */ (createElement(view, renderHost, nodeDef));\n                /** @type {?} */\n                var componentView = /** @type {?} */ ((undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    /** @type {?} */\n                    var compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = /** @type {?} */ ({\n                    renderElement: el,\n                    componentView: componentView,\n                    viewContainer: null,\n                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                });\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = /** @type {?} */ (createText(view, renderHost, nodeDef));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    /** @type {?} */\n                    var instance = createProviderInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                /** @type {?} */\n                var instance = createPipeInstance(view, nodeDef);\n                nodeData = /** @type {?} */ ({ instance: instance });\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    /** @type {?} */\n                    var instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    /** @type {?} */\n                    var compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = /** @type {?} */ (createPureExpression(view, nodeDef));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = /** @type {?} */ (createQuery());\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    /** @type {?} */\n    var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            /** @type {?} */\n            var projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                    /** @type {?} */\n                    var projectedView = projectedViews[i_1];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (var i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    /** @type {?} */\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" not dirty\", \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (var i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    /** @type {?} */\n    var len = view.def.nodes.length;\n    for (var i = 0; i < len; i++) {\n        /** @type {?} */\n        var def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nvar ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';\nViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';\nViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';\nViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';\nViewAction[ViewAction.Destroy] = 'Destroy';\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            var embeddedViews = /** @type {?} */ ((asElementData(view, i).viewContainer))._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    /** @type {?} */\n    var viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    /** @type {?} */\n    var nodeCount = view.def.nodes.length;\n    for (var i = 0; i < nodeCount; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DebugElement, DebugNode, EventListener, getDebugNode, indexDebugNode, removeDebugNodeFromIndex } from '../debug/debug_node';\nimport { ErrorHandler } from '../error_handler';\nimport { isDevMode } from '../is_dev_mode';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { tokenKey } from '../view/util';\nimport { isViewDebugError, viewDestroyedError, viewWrappedDebugError } from './errors';\nimport { resolveDep } from './provider';\nimport { dirtyParentQueries, getQueryValue } from './query';\nimport { createInjector, createNgModuleRef, getComponentViewDefinitionFactory } from './refs';\nimport { Services, asElementData, asPureExpressionData } from './types';\nimport { NOOP, isComponentView, renderNode, resolveDefinition, splitDepsDsl, viewParentEl } from './util';\nimport { checkAndUpdateNode, checkAndUpdateView, checkNoChangesNode, checkNoChangesView, createComponentView, createEmbeddedView, createRootView, destroyView } from './view';\n/** @type {?} */\nvar initialized = false;\n/**\n * @return {?}\n */\nexport function initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    /** @type {?} */\n    var services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: function () { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: function (view, nodeIndex, eventName, event) {\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\n        },\n        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    /** @type {?} */\n    var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    /** @type {?} */\n    var sanitizer = ngModule.injector.get(Sanitizer);\n    /** @type {?} */\n    var errorHandler = ngModule.injector.get(ErrorHandler);\n    /** @type {?} */\n    var renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule: ngModule,\n        injector: elInjector, projectableNodes: projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    var overrideComponentView = viewDefOverrides.get(/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n/** @type {?} */\nvar providerOverrides = new Map();\n/** @type {?} */\nvar providerOverridesWithScope = new Map();\n/** @type {?} */\nvar viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    if (typeof override.token === 'function' && override.token.ngInjectableDef &&\n        typeof override.token.ngInjectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set(/** @type {?} */ (override.token), override);\n    }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    /** @type {?} */\n    var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    /** @type {?} */\n    var compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    /** @type {?} */\n    var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        /** @type {?} */\n        var elIndicesWithOverwrittenProviders = [];\n        /** @type {?} */\n        var lastElementDef = null;\n        for (var i = 0; i < def.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                /** @type {?} */\n                var provider = /** @type {?} */ ((nodeDef.provider));\n                /** @type {?} */\n                var override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        /** @type {?} */\n        var hasOverrides = false;\n        /** @type {?} */\n        var hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        def.providers.forEach(function (node) {\n            /** @type {?} */\n            var override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        def.modules.forEach(function (module) {\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (token.ngInjectableDef.providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n        });\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (var i = 0; i < def.providers.length; i++) {\n            /** @type {?} */\n            var provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            /** @type {?} */\n            var override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            /** @type {?} */\n            var moduleSet_1 = new Set(def.modules);\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (moduleSet_1.has(token.ngInjectableDef.providedIn)) {\n                    /** @type {?} */\n                    var provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            });\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nvar DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = 'create';\nDebugAction[DebugAction.detectChanges] = 'detectChanges';\nDebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';\nDebugAction[DebugAction.destroy] = 'destroy';\nDebugAction[DebugAction.handleEvent] = 'handleEvent';\n/** @type {?} */\nvar _currentAction;\n/** @type {?} */\nvar _currentView;\n/** @type {?} */\nvar _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    /** @type {?} */\n    var changed = (/** @type {?} */ (checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));\n    if (changed) {\n        /** @type {?} */\n        var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            /** @type {?} */\n            var bindingValues = {};\n            for (var i = 0; i < nodeDef.bindings.length; i++) {\n                /** @type {?} */\n                var binding = nodeDef.bindings[i];\n                /** @type {?} */\n                var value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            /** @type {?} */\n            var elDef = /** @type {?} */ ((nodeDef.parent));\n            /** @type {?} */\n            var el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!/** @type {?} */ ((elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n            }\n            else {\n                // a regular element.\n                for (var attr in bindingValues) {\n                    /** @type {?} */\n                    var value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    (/** @type {?} */ (checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return \"ng-reflect-\" + name;\n}\n/** @type {?} */\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nvar DebugContext_ = /** @class */ (function () {\n    function DebugContext_(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        var elDef = this.nodeDef;\n        /** @type {?} */\n        var elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = /** @type {?} */ ((elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = /** @type {?} */ ((viewParentEl(elView)));\n                elView = /** @type {?} */ ((elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return createInjector(this.elView, this.elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var tokens = [];\n            if (this.elDef) {\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    /** @type {?} */\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        tokens.push(/** @type {?} */ ((childDef.provider)).token);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return tokens;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var references = {};\n            if (this.elDef) {\n                collectReferences(this.elView, this.elDef, references);\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    /** @type {?} */\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        collectReferences(this.elView, childDef, references);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return references;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var elData = findHostElement(this.elOrCompView);\n            return elData ? elData.renderElement : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                renderNode(this.elView, this.elDef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext_.prototype.logError = /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        /** @type {?} */\n        var logViewDef;\n        /** @type {?} */\n        var logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        /** @type {?} */\n        var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        /** @type {?} */\n        var currRenderNodeIndex = -1;\n        /** @type {?} */\n        var nodeLogger = function () {\n            var _a;\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return (_a = console.error).bind.apply(_a, [console].concat(values));\n            }\n            else {\n                return NOOP;\n            }\n        }; /** @type {?} */\n        ((logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            console.error.apply(console, values);\n        }\n    };\n    return DebugContext_;\n}());\nif (false) {\n    /** @type {?} */\n    DebugContext_.prototype.nodeDef;\n    /** @type {?} */\n    DebugContext_.prototype.elView;\n    /** @type {?} */\n    DebugContext_.prototype.elDef;\n    /** @type {?} */\n    DebugContext_.prototype.view;\n    /** @type {?} */\n    DebugContext_.prototype.nodeIndex;\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    /** @type {?} */\n    var renderNodeIndex = -1;\n    for (var i = 0; i <= nodeIndex; i++) {\n        /** @type {?} */\n        var nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = /** @type {?} */ ((view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (var refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    /** @type {?} */\n    var oldAction = _currentAction;\n    /** @type {?} */\n    var oldView = _currentView;\n    /** @type {?} */\n    var oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        /** @type {?} */\n        var result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nexport function getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nvar DebugRendererFactory2 = /** @class */ (function () {\n    function DebugRendererFactory2(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.createRenderer = /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    function (element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.begin = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.end = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.whenRenderingDone = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    };\n    return DebugRendererFactory2;\n}());\nexport { DebugRendererFactory2 };\nif (false) {\n    /** @type {?} */\n    DebugRendererFactory2.prototype.delegate;\n}\nvar DebugRenderer2 = /** @class */ (function () {\n    function DebugRenderer2(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    Object.defineProperty(DebugRenderer2.prototype, \"debugContext\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.debugContextFactory(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroyNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this.delegate.destroy(); };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createElement = /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (name, namespace) {\n        /** @type {?} */\n        var el = this.delegate.createElement(name, namespace);\n        /** @type {?} */\n        var debugCtx = this.debugContext;\n        if (debugCtx) {\n            /** @type {?} */\n            var debugEl = new DebugElement(el, null, debugCtx);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createComment = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var comment = this.delegate.createComment(value);\n        /** @type {?} */\n        var debugCtx = this.debugContext;\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(comment, null, debugCtx));\n        }\n        return comment;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createText = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var text = this.delegate.createText(value);\n        /** @type {?} */\n        var debugCtx = this.debugContext;\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(text, null, debugCtx));\n        }\n        return text;\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.appendChild = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (parent, newChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.insertBefore = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    function (parent, newChild, refChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(newChild);\n        /** @type {?} */\n        var debugRefEl = /** @type {?} */ ((getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeChild = /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    function (parent, oldChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    };\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    DebugRenderer2.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    function (selectorOrNode, preserveContent) {\n        /** @type {?} */\n        var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        /** @type {?} */\n        var debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement(el, null, debugCtx));\n        }\n        return el;\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, value, namespace) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            /** @type {?} */\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, namespace) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            /** @type {?} */\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.addClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, value, flags) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, flags) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setProperty = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (el, name, value) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    DebugRenderer2.prototype.listen = /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, eventName, callback) {\n        if (typeof target !== 'string') {\n            /** @type {?} */\n            var debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.parentNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.parentNode(node); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.nextSibling = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.nextSibling(node); };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setValue = /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    function (node, value) { return this.delegate.setValue(node, value); };\n    return DebugRenderer2;\n}());\nexport { DebugRenderer2 };\nif (false) {\n    /** @type {?} */\n    DebugRenderer2.prototype.data;\n    /**\n     * Factory function used to create a `DebugContext` when a node is created.\n     *\n     * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n     *\n     * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n     * or a Render context.\n     * @type {?}\n     */\n    DebugRenderer2.prototype.debugContextFactory;\n    /** @type {?} */\n    DebugRenderer2.prototype.delegate;\n}\n//# sourceMappingURL=services.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { NgModuleFactory } from '../linker/ng_module_factory';\nimport { initServicesIfNeeded } from './services';\nimport { Services } from './types';\nimport { resolveDefinition } from './util';\n/**\n * @param {?} override\n * @return {?}\n */\nexport function overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nexport function overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nexport function clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nexport function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction cloneNgModuleDefinition(def) {\n    /** @type {?} */\n    var providers = Array.from(def.providers);\n    /** @type {?} */\n    var modules = Array.from(def.modules);\n    /** @type {?} */\n    var providersByKey = {};\n    for (var key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers: providers, modules: modules, providersByKey: providersByKey,\n    };\n}\nvar NgModuleFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory_, _super);\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.moduleType = moduleType;\n        _this._bootstrapComponents = _bootstrapComponents;\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory_.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        initServicesIfNeeded();\n        /** @type {?} */\n        var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    };\n    return NgModuleFactory_;\n}(NgModuleFactory));\nif (false) {\n    /** @type {?} */\n    NgModuleFactory_.prototype.moduleType;\n    /** @type {?} */\n    NgModuleFactory_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleFactory_.prototype._ngModuleDefFactory;\n}\n//# sourceMappingURL=entrypoint.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { DebugRendererFactory2 } from '../view/services';\nimport * as di from './di';\nimport { NG_HOST_SYMBOL, _getViewData } from './instructions';\nimport { CONTEXT, DIRECTIVES, TVIEW } from './interfaces/view';\n/**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nvar /**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nRender3DebugRendererFactory2 = /** @class */ (function (_super) {\n    tslib_1.__extends(Render3DebugRendererFactory2, _super);\n    function Render3DebugRendererFactory2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    Render3DebugRendererFactory2.prototype.createRenderer = /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    function (element, renderData) {\n        /** @type {?} */\n        var renderer = /** @type {?} */ (_super.prototype.createRenderer.call(this, element, renderData));\n        renderer.debugContextFactory = function () { return new Render3DebugContext(_getViewData()); };\n        return renderer;\n    };\n    return Render3DebugRendererFactory2;\n}(DebugRendererFactory2));\n/**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nexport { Render3DebugRendererFactory2 };\n/**\n * Stores context information about view nodes.\n *\n * Used in tests to retrieve information those nodes.\n */\nvar /**\n * Stores context information about view nodes.\n *\n * Used in tests to retrieve information those nodes.\n */\nRender3DebugContext = /** @class */ (function () {\n    function Render3DebugContext(viewData) {\n        this.viewData = viewData;\n        // The LNode will be created next and appended to viewData\n        this.nodeIndex = viewData ? viewData.length : null;\n    }\n    Object.defineProperty(Render3DebugContext.prototype, \"view\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.viewData; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (this.nodeIndex !== null) {\n                /** @type {?} */\n                var lElementNode = this.view[this.nodeIndex];\n                /** @type {?} */\n                var nodeInjector = lElementNode.nodeInjector;\n                if (nodeInjector) {\n                    return new di.NodeInjector(nodeInjector);\n                }\n            }\n            return Injector.NULL;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // TODO(vicb): why/when\n            if (this.nodeIndex === null) {\n                return null;\n            }\n            /** @type {?} */\n            var tView = this.view[TVIEW];\n            /** @type {?} */\n            var components = tView.components;\n            return (components && components.indexOf(this.nodeIndex) == -1) ?\n                null :\n                this.view[this.nodeIndex].data[CONTEXT];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"providerTokens\", {\n        // TODO(vicb): add view providers when supported\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var matchedDirectives = [];\n            // TODO(vicb): why/when\n            if (this.nodeIndex === null) {\n                return matchedDirectives;\n            }\n            /** @type {?} */\n            var directives = this.view[DIRECTIVES];\n            if (directives) {\n                /** @type {?} */\n                var currentNode = this.view[this.nodeIndex];\n                for (var dirIndex = 0; dirIndex < directives.length; dirIndex++) {\n                    /** @type {?} */\n                    var directive = directives[dirIndex];\n                    if (directive[NG_HOST_SYMBOL] === currentNode) {\n                        matchedDirectives.push(directive.constructor);\n                    }\n                }\n            }\n            return matchedDirectives;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // TODO(vicb): implement retrieving references\n            throw new Error('Not implemented yet in ivy');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (this.nodeIndex === null) {\n                return null;\n            }\n            /** @type {?} */\n            var lNode = this.view[this.nodeIndex];\n            return lNode.view[CONTEXT];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"componentRenderElement\", {\n        get: /**\n         * @return {?}\n         */\n        function () { throw new Error('Not implemented in ivy'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"renderNode\", {\n        get: /**\n         * @return {?}\n         */\n        function () { throw new Error('Not implemented in ivy'); },\n        enumerable: true,\n        configurable: true\n    });\n    // TODO(vicb): check previous implementation\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    Render3DebugContext.prototype.logError = /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        console.error.apply(console, values);\n    };\n    return Render3DebugContext;\n}());\nif (false) {\n    /** @type {?} */\n    Render3DebugContext.prototype.nodeIndex;\n    /** @type {?} */\n    Render3DebugContext.prototype.viewData;\n}\n//# sourceMappingURL=debug.js.map"]}