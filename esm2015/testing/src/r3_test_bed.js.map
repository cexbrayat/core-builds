{"version":3,"file":"r3_test_bed.js","sourceRoot":"","sources":["../../../../../packages/core/testing/src/r3_test_bed.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, Injector, NgModule, Pipe, PlatformRef, Provider, RendererFactory2, SchemaMetadata, Type, ɵNgModuleDefInternal as NgModuleDefInternal, ɵNgModuleTransitiveScopes as NgModuleTransitiveScopes, ɵRender3ComponentFactory as ComponentFactory, ɵRender3DebugRendererFactory2 as Render3DebugRendererFactory2, ɵRender3NgModuleRef as NgModuleRef, ɵWRAP_RENDERER_FACTORY2 as WRAP_RENDERER_FACTORY2, ɵcompileComponent as compileComponent, ɵcompileDirective as compileDirective, ɵcompileNgModuleDefs as compileNgModuleDefs, ɵcompilePipe as compilePipe, ɵpatchComponentDefWithScope as patchComponentDefWithScope, ɵstringify as stringify} from '@angular/core';\n\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {ComponentResolver, DirectiveResolver, NgModuleResolver, PipeResolver, Resolver} from './resolvers';\nimport {TestBed} from './test_bed';\nimport {ComponentFixtureAutoDetect, TestBedStatic, TestComponentRenderer, TestModuleMetadata} from './test_bed_common';\n\nlet _nextRootElementId = 0;\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport class TestBedRender3 implements Injector, TestBed {\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @experimental\n   */\n  static initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed {\n    const testBed = _getTestBedRender3();\n    testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n    return testBed;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @experimental\n   */\n  static resetTestEnvironment(): void { _getTestBedRender3().resetTestEnvironment(); }\n\n  static configureCompiler(config: {providers?: any[]; useJit?: boolean;}): TestBedStatic {\n    _getTestBedRender3().configureCompiler(config);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic {\n    _getTestBedRender3().configureTestingModule(moduleDef);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents(): Promise<any> { return _getTestBedRender3().compileComponents(); }\n\n  static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic {\n    _getTestBedRender3().overrideModule(ngModule, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      TestBedStatic {\n    _getTestBedRender3().overrideComponent(component, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      TestBedStatic {\n    _getTestBedRender3().overrideDirective(directive, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic {\n    _getTestBedRender3().overridePipe(pipe, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideTemplate(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedRender3().overrideComponent(component, {set: {template, templateUrl: null !}});\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string): void {\n    throw new Error('Render3TestBed.overrideTemplateUsingTestingModule is not implemented yet');\n  }\n\n  static overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): TestBedStatic;\n  static overrideProvider(token: any, provider: {useValue: any;}): TestBedStatic;\n  static overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    _getTestBedRender3().overrideProvider(token, provider);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  static deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    throw new Error('Render3TestBed.deprecatedOverrideProvider is not implemented');\n  }\n\n  static get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n    return _getTestBedRender3().get(token, notFoundValue);\n  }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return _getTestBedRender3().createComponent(component);\n  }\n\n  static resetTestingModule(): TestBedStatic {\n    _getTestBedRender3().resetTestingModule();\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  // Properties\n\n  platform: PlatformRef = null !;\n  ngModule: Type<any>|Type<any>[] = null !;\n\n  // metadata overrides\n  private _moduleOverrides: [Type<any>, MetadataOverride<NgModule>][] = [];\n  private _componentOverrides: [Type<any>, MetadataOverride<Component>][] = [];\n  private _directiveOverrides: [Type<any>, MetadataOverride<Directive>][] = [];\n  private _pipeOverrides: [Type<any>, MetadataOverride<Pipe>][] = [];\n  private _providerOverrides: Provider[] = [];\n  private _rootProviderOverrides: Provider[] = [];\n\n  // test module configuration\n  private _providers: Provider[] = [];\n  private _declarations: Array<Type<any>|any[]|any> = [];\n  private _imports: Array<Type<any>|any[]|any> = [];\n  private _schemas: Array<SchemaMetadata|any[]> = [];\n\n  private _activeFixtures: ComponentFixture<any>[] = [];\n\n  private _moduleRef: NgModuleRef<any> = null !;\n\n  private _instantiated: boolean = false;\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @experimental\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @experimental\n   */\n  resetTestEnvironment(): void {\n    this.resetTestingModule();\n    this.platform = null !;\n    this.ngModule = null !;\n  }\n\n  resetTestingModule(): void {\n    // reset metadata overrides\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n    this._providerOverrides = [];\n    this._rootProviderOverrides = [];\n\n    // reset test module config\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._moduleRef = null !;\n\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e,\n        });\n      }\n    });\n    this._activeFixtures = [];\n  }\n\n  configureCompiler(config: {providers?: any[]; useJit?: boolean;}): void {\n    throw new Error('the Render3 compiler is not configurable !');\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void {\n    this._assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.schemas) {\n      this._schemas.push(...moduleDef.schemas);\n    }\n  }\n\n  // TODO(vicb): implement\n  compileComponents(): Promise<any> {\n    throw new Error('Render3TestBed.compileComponents is not implemented yet');\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n    this._initIfNeeded();\n    if (token === TestBedRender3) {\n      return this;\n    }\n    return this._moduleRef.injector.get(token, notFoundValue);\n  }\n\n  execute(tokens: any[], fn: Function, context?: any): any {\n    this._initIfNeeded();\n    const params = tokens.map(t => this.get(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this._assertNotInstantiated('overrideModule', 'override module metadata');\n    this._moduleOverrides.push([ngModule, override]);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this._assertNotInstantiated('overrideComponent', 'override component metadata');\n    this._componentOverrides.push([component, override]);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this._directiveOverrides.push([directive, override]);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this._pipeOverrides.push([pipe, override]);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void {\n    const isRoot =\n        (typeof token !== 'string' && token.ngInjectableDef &&\n         token.ngInjectableDef.providedIn === 'root');\n    const overrides = isRoot ? this._rootProviderOverrides : this._providerOverrides;\n\n    if (provider.useFactory) {\n      overrides.push({provide: token, useFactory: provider.useFactory, deps: provider.deps || []});\n    } else {\n      overrides.push({provide: token, useValue: provider.useValue});\n    }\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  deprecatedOverrideProvider(\n      token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}): void {\n    throw new Error('No implemented in IVY');\n  }\n\n  createComponent<T>(type: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n\n    const testComponentRenderer: TestComponentRenderer = this.get(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const componentDef = (type as any).ngComponentDef;\n\n    if (!componentDef) {\n      throw new Error(\n          `It looks like '${stringify(type)}' has not been IVY compiled - it has no 'ngComponentDef' field`);\n    }\n\n    const componentFactory = new ComponentFactory(componentDef);\n    const componentRef =\n        componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n    const autoDetect: boolean = this.get(ComponentFixtureAutoDetect, false);\n    const fixture = new ComponentFixture<any>(componentRef, null, autoDetect);\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n\n  // internal methods\n\n  private _initIfNeeded(): void {\n    if (this._instantiated) {\n      return;\n    }\n\n    const resolvers = this._getResolvers();\n    const testModuleType = this._createTestModule();\n\n    compileNgModule(testModuleType, resolvers);\n\n    const parentInjector = this.platform.injector;\n    this._moduleRef = new NgModuleRef(testModuleType, parentInjector);\n\n    this._instantiated = true;\n  }\n\n  // creates resolvers taking overrides into account\n  private _getResolvers() {\n    const module = new NgModuleResolver();\n    module.setOverrides(this._moduleOverrides);\n\n    const component = new ComponentResolver();\n    component.setOverrides(this._componentOverrides);\n\n    const directive = new DirectiveResolver();\n    directive.setOverrides(this._directiveOverrides);\n\n    const pipe = new PipeResolver();\n    pipe.setOverrides(this._pipeOverrides);\n\n    return {module, component, directive, pipe};\n  }\n\n  private _assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._instantiated) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n\n  private _createTestModule(): Type<any> {\n    const rootProviderOverrides = this._rootProviderOverrides;\n\n    const rendererFactoryWrapper = {\n      provide: WRAP_RENDERER_FACTORY2,\n      useFactory: () => (rf: RendererFactory2) => new Render3DebugRendererFactory2(rf),\n    };\n\n    @NgModule({\n      providers: [...rootProviderOverrides, rendererFactoryWrapper],\n      jit: true,\n    })\n    class RootScopeModule {\n    }\n\n    const providers = [...this._providers, ...this._providerOverrides];\n\n    const declarations = this._declarations;\n    const imports = [RootScopeModule, this.ngModule, this._imports];\n    const schemas = this._schemas;\n\n    @NgModule({providers, declarations, imports, schemas, jit: true})\n    class DynamicTestModule {\n    }\n\n    return DynamicTestModule;\n  }\n}\n\nlet testBed: TestBedRender3;\n\nexport function _getTestBedRender3(): TestBedRender3 {\n  return testBed = testBed || new TestBedRender3();\n}\n\n\n// Module compiler\n\nconst EMPTY_ARRAY: Type<any>[] = [];\n\n// Resolvers for Angular decorators\ntype Resolvers = {\n  module: Resolver<NgModule>,\n  component: Resolver<Directive>,\n  directive: Resolver<Component>,\n  pipe: Resolver<Pipe>,\n};\n\nfunction compileNgModule(moduleType: Type<any>, resolvers: Resolvers): void {\n  const ngModule = resolvers.module.resolve(moduleType);\n\n  if (ngModule === null) {\n    throw new Error(`${stringify(moduleType)} has not @NgModule annotation`);\n  }\n\n  compileNgModuleDefs(moduleType, ngModule);\n\n  const declarations: Type<any>[] = flatten(ngModule.declarations || EMPTY_ARRAY);\n\n  const compiledComponents: Type<any>[] = [];\n\n  // Compile the components, directives and pipes declared by this module\n  declarations.forEach(declaration => {\n    const component = resolvers.component.resolve(declaration);\n    if (component) {\n      compileComponent(declaration, component);\n      compiledComponents.push(declaration);\n      return;\n    }\n\n    const directive = resolvers.directive.resolve(declaration);\n    if (directive) {\n      compileDirective(declaration, directive);\n      return;\n    }\n\n    const pipe = resolvers.pipe.resolve(declaration);\n    if (pipe) {\n      compilePipe(declaration, pipe);\n      return;\n    }\n  });\n\n  // Compile transitive modules, components, directives and pipes\n  const transitiveScope = transitiveScopesFor(moduleType, resolvers);\n  compiledComponents.forEach(\n      cmp => patchComponentDefWithScope((cmp as any).ngComponentDef, transitiveScope));\n}\n\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n */\nfunction transitiveScopesFor<T>(\n    moduleType: Type<T>, resolvers: Resolvers): NgModuleTransitiveScopes {\n  if (!isNgModule(moduleType)) {\n    throw new Error(`${moduleType.name} does not have an ngModuleDef`);\n  }\n  const def = moduleType.ngModuleDef;\n\n  if (def.transitiveCompileScopes !== null) {\n    return def.transitiveCompileScopes;\n  }\n\n  const scopes: NgModuleTransitiveScopes = {\n    compilation: {\n      directives: new Set<any>(),\n      pipes: new Set<any>(),\n    },\n    exported: {\n      directives: new Set<any>(),\n      pipes: new Set<any>(),\n    },\n  };\n\n  def.declarations.forEach(declared => {\n    const declaredWithDefs = declared as Type<any>& { ngPipeDef?: any; };\n\n    if (declaredWithDefs.ngPipeDef !== undefined) {\n      scopes.compilation.pipes.add(declared);\n    } else {\n      scopes.compilation.directives.add(declared);\n    }\n  });\n\n  def.imports.forEach(<I>(imported: Type<I>) => {\n    const ngModule = resolvers.module.resolve(imported);\n\n    if (ngModule === null) {\n      throw new Error(`Importing ${imported.name} which does not have an @ngModule`);\n    } else {\n      compileNgModule(imported, resolvers);\n    }\n\n    // When this module imports another, the imported module's exported directives and pipes are\n    // added to the compilation scope of this module.\n    const importedScope = transitiveScopesFor(imported, resolvers);\n    importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n    importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n  });\n\n  def.exports.forEach(<E>(exported: Type<E>) => {\n    const exportedTyped = exported as Type<E>& {\n      // Components, Directives, NgModules, and Pipes can all be exported.\n      ngComponentDef?: any;\n      ngDirectiveDef?: any;\n      ngModuleDef?: NgModuleDefInternal<E>;\n      ngPipeDef?: any;\n    };\n\n    // Either the type is a module, a pipe, or a component/directive (which may not have an\n    // ngComponentDef as it might be compiled asynchronously).\n    if (isNgModule(exportedTyped)) {\n      // When this module exports another, the exported module's exported directives and pipes are\n      // added to both the compilation and exported scopes of this module.\n      const exportedScope = transitiveScopesFor(exportedTyped, resolvers);\n      exportedScope.exported.directives.forEach(entry => {\n        scopes.compilation.directives.add(entry);\n        scopes.exported.directives.add(entry);\n      });\n      exportedScope.exported.pipes.forEach(entry => {\n        scopes.compilation.pipes.add(entry);\n        scopes.exported.pipes.add(entry);\n      });\n    } else if (exportedTyped.ngPipeDef !== undefined) {\n      scopes.exported.pipes.add(exportedTyped);\n    } else {\n      scopes.exported.directives.add(exportedTyped);\n    }\n  });\n\n  def.transitiveCompileScopes = scopes;\n  return scopes;\n}\n\nfunction flatten<T>(values: any[]): T[] {\n  const out: T[] = [];\n  values.forEach(value => {\n    if (Array.isArray(value)) {\n      out.push(...flatten<T>(value));\n    } else {\n      out.push(value);\n    }\n  });\n  return out;\n}\n\nfunction isNgModule<T>(value: Type<T>): value is Type<T>&{ngModuleDef: NgModuleDefInternal<T>} {\n  return (value as{ngModuleDef?: NgModuleDefInternal<T>}).ngModuleDef !== undefined;\n}\n"]}