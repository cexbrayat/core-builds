{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/styling/util.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,OAAO,EAAC,UAAU,EAAC,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAC,YAAY,EAAa,MAAM,yBAAyB,CAAC;AAKjE,OAAO,EAAC,KAAK,EAAE,aAAa,EAAE,IAAI,EAAY,MAAM,oBAAoB,CAAC;AACzE,OAAO,EAAC,QAAQ,EAAC,MAAM,SAAS,CAAC;;AAEjC,aAAa,SAAS,GAAU,EAAE,CAAC;;AACnC,aAAa,SAAS,GAAyB,EAAE,CAAC;;;;;;;AAElD,MAAM,UAAU,yBAAyB,CACrC,OAAyB,EAAE,SAAkC,EAC7D,oBAAoC;IACtC,OAAO;QACL,IAAI;;QACJ,SAAS,IAAI,IAAI;;QACjB,oBAAoB,IAAI,CAAC,IAAI,CAAC;QAC9B,CAAC;QACD,CAAC;;QACD,OAAO,IAAI,IAAI;QACf,IAAI;QACJ,IAAI;KACL,CAAC;CACH;;;;;;;;;;AAQD,MAAM,UAAU,mBAAmB,CAC/B,OAAwB,EAAE,oBAAoC;;IAEhE,MAAM,OAAO,sBAAG,oBAAoB,CAAC,KAAK,EAAS,GAAmB;IACtE,OAAO,yBAA8B,GAAG,OAAO,CAAC;IAChD,OAAO,OAAO,CAAC;CAChB;;;;;;;;;;;;;AAaD,MAAM,UAAU,iBAAiB,CAAC,KAAa,EAAE,QAAmB;;IAClE,IAAI,YAAY,GAAG,KAAK,GAAG,aAAa,CAAC;;IACzC,IAAI,SAAS,GAAiD,QAAQ,CAAC,YAAY,CAAC,CAAC;;IACrF,IAAI,OAAO,GAAwC,QAAQ,CAAC;IAE5D,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QAC/B,OAAO,GAAG,SAAS,CAAC;QACpB,SAAS,qBAAG,SAAS,CAAC,IAAI,CAA0C,CAAA,CAAC;KACtE;IAED,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE;QAC7B,yBAAO,OAAyB,EAAC;KAClC;SAAM;;QAEL,MAAM,eAAe,GAAG,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC;QAElE,IAAI,OAAO,KAAK,QAAQ;YAAE,YAAY,GAAG,IAAI,CAAC;QAC9C,OAAO,OAAO,CAAC,YAAY,CAAC,GAAG,eAAe,CAAC,CAAC;YAC5C,mBAAmB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC,CAAC;YACjD,yBAAyB,CAAC,SAAS,CAAC,CAAC;KAC1C;CACF;;;;;AAED,SAAS,gBAAgB,CAAC,KAA8C;;IAEtE,OAAO,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,QAAQ,IAAI,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,QAAQ,CAAC;CACpF;;;;;;AAED,MAAM,UAAU,wBAAwB,CAAC,MAAU,EAAE,OAAyB;IAC5E,OAAO,GAAG,OAAO,uBAAI,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;IAC1C,IAAI,SAAS,IAAI,CAAC,OAAO,EAAE;QACzB,MAAM,IAAI,KAAK,CACX,kFAAkF,CAAC,CAAC;KACzF;IAED,MAAM,EAAC,SAAS,EAAE,SAAS,EAAC,GAAG,OAAO,CAAC;;IACvC,MAAM,cAAc,GAAG,iBAAiB,CAAC,SAAS,GAAG,aAAa,EAAE,SAAS,CAAC,CAAC;IAC/E,OAAO,cAAc,uBAA4B,IAAI,kBAAkB,CAAC,cAAc,CAAC,CAAC;CACzF;;;;;AAED,SAAS,kBAAkB,CAAC,IAAoB;IAC9C,OAAO,IAAI,uBAA4B,GAAG,EAAE,CAAC;CAC9C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StyleSanitizeFn} from '../../sanitization/style_sanitizer';\nimport {getContext} from '../context_discovery';\nimport {ACTIVE_INDEX, LContainer} from '../interfaces/container';\nimport {LContext} from '../interfaces/context';\nimport {PlayerContext} from '../interfaces/player';\nimport {RElement} from '../interfaces/renderer';\nimport {InitialStyles, StylingContext, StylingIndex} from '../interfaces/styling';\nimport {FLAGS, HEADER_OFFSET, HOST, LViewData} from '../interfaces/view';\nimport {getTNode} from '../util';\n\nexport const EMPTY_ARR: any[] = [];\nexport const EMPTY_OBJ: {[key: string]: any} = {};\n\nexport function createEmptyStylingContext(\n    element?: RElement | null, sanitizer?: StyleSanitizeFn | null,\n    initialStylingValues?: InitialStyles): StylingContext {\n  return [\n    null,                            // PlayerContext\n    sanitizer || null,               // StyleSanitizer\n    initialStylingValues || [null],  // InitialStyles\n    0,                               // MasterFlags\n    0,                               // ClassOffset\n    element || null,                 // Element\n    null,                            // PreviousMultiClassValue\n    null                             // PreviousMultiStyleValue\n  ];\n}\n\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n */\nexport function allocStylingContext(\n    element: RElement | null, templateStyleContext: StylingContext): StylingContext {\n  // each instance gets a copy\n  const context = templateStyleContext.slice() as any as StylingContext;\n  context[StylingIndex.ElementPosition] = element;\n  return context;\n}\n\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param index Index of the style allocation. See: `elementStyling`.\n * @param viewData The view to search for the styling context\n */\nexport function getStylingContext(index: number, viewData: LViewData): StylingContext {\n  let storageIndex = index + HEADER_OFFSET;\n  let slotValue: LContainer|LViewData|StylingContext|RElement = viewData[storageIndex];\n  let wrapper: LContainer|LViewData|StylingContext = viewData;\n\n  while (Array.isArray(slotValue)) {\n    wrapper = slotValue;\n    slotValue = slotValue[HOST] as LViewData | StylingContext | RElement;\n  }\n\n  if (isStylingContext(wrapper)) {\n    return wrapper as StylingContext;\n  } else {\n    // This is an LViewData or an LContainer\n    const stylingTemplate = getTNode(index, viewData).stylingTemplate;\n\n    if (wrapper !== viewData) storageIndex = HOST;\n    return wrapper[storageIndex] = stylingTemplate ?\n        allocStylingContext(slotValue, stylingTemplate) :\n        createEmptyStylingContext(slotValue);\n  }\n}\n\nfunction isStylingContext(value: LViewData | LContainer | StylingContext) {\n  // Not an LViewData or an LContainer\n  return typeof value[FLAGS] !== 'number' && typeof value[ACTIVE_INDEX] !== 'number';\n}\n\nexport function getOrCreatePlayerContext(target: {}, context?: LContext | null): PlayerContext {\n  context = context || getContext(target) !;\n  if (ngDevMode && !context) {\n    throw new Error(\n        'Only elements that exist in an Angular application can be used for player access');\n  }\n\n  const {lViewData, nodeIndex} = context;\n  const stylingContext = getStylingContext(nodeIndex - HEADER_OFFSET, lViewData);\n  return stylingContext[StylingIndex.PlayerContext] || allocPlayerContext(stylingContext);\n}\n\nfunction allocPlayerContext(data: StylingContext): PlayerContext {\n  return data[StylingIndex.PlayerContext] = [];\n}\n"]}