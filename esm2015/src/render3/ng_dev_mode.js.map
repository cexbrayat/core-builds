{"version":3,"file":"ng_dev_mode.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/ng_dev_mode.ts"],"names":[],"mappings":";;;;;;;;;;;;AAsCA,MAAM,QAAQ,GACV,OAAO,MAAM,IAAI,WAAW,IAAI,MAAM,IAAI,OAAO,MAAM,IAAI,WAAW,IAAI,MAAM;IAChF,OAAO,IAAI,IAAI,WAAW,IAAI,IAAI,CAAC;;;;AAEvC,MAAM,UAAU,0BAA0B;;IAExC,OAAO,QAAQ,CAAC,WAAW,CAAC,GAAG;QAC7B,iBAAiB,EAAE,CAAC;QACpB,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,CAAC;QACR,sBAAsB,EAAE,CAAC;QACzB,eAAe,EAAE,CAAC;QAClB,qBAAqB,EAAE,CAAC;QACxB,wBAAwB,EAAE,CAAC;QAC3B,oBAAoB,EAAE,CAAC;QACvB,uBAAuB,EAAE,CAAC;QAC1B,mBAAmB,EAAE,CAAC;QACtB,oBAAoB,EAAE,CAAC;QACvB,gBAAgB,EAAE,CAAC;QACnB,mBAAmB,EAAE,CAAC;QACtB,gBAAgB,EAAE,CAAC;QACnB,mBAAmB,EAAE,CAAC;QACtB,eAAe,EAAE,CAAC;QAClB,mBAAmB,EAAE,CAAC;QACtB,gBAAgB,EAAE,CAAC;QACnB,kBAAkB,EAAE,CAAC;QACrB,qBAAqB,EAAE,CAAC;KACzB,CAAC;CACH;;;;;;;;;AAUD,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,EAAE;;IAEjD,QAAQ,CAAC,WAAW,CAAC,GAAG,0BAA0B,EAAE,CAAC;CACtD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare global {\n  const ngDevMode: null|NgDevModePerfCounters;\n  interface NgDevModePerfCounters {\n    firstTemplatePass: number;\n    tNode: number;\n    tView: number;\n    rendererCreateTextNode: number;\n    rendererSetText: number;\n    rendererCreateElement: number;\n    rendererAddEventListener: number;\n    rendererSetAttribute: number;\n    rendererRemoveAttribute: number;\n    rendererSetProperty: number;\n    rendererSetClassName: number;\n    rendererAddClass: number;\n    rendererRemoveClass: number;\n    rendererSetStyle: number;\n    rendererRemoveStyle: number;\n    rendererDestroy: number;\n    rendererDestroyNode: number;\n    rendererMoveNode: number;\n    rendererRemoveNode: number;\n    rendererCreateComment: number;\n  }\n}\n\ndeclare let global: any;\n\n// NOTE: The order here matters: Checking window, then global, then self is important.\n//   checking them in another order can result in errors in some Node environments.\nconst __global: {ngDevMode: NgDevModePerfCounters | boolean} =\n    typeof window != 'undefined' && window || typeof global != 'undefined' && global ||\n    typeof self != 'undefined' && self;\n\nexport function ngDevModeResetPerfCounters(): NgDevModePerfCounters {\n  // Make sure to refer to ngDevMode as ['ngDevMode'] for clousre.\n  return __global['ngDevMode'] = {\n    firstTemplatePass: 0,\n    tNode: 0,\n    tView: 0,\n    rendererCreateTextNode: 0,\n    rendererSetText: 0,\n    rendererCreateElement: 0,\n    rendererAddEventListener: 0,\n    rendererSetAttribute: 0,\n    rendererRemoveAttribute: 0,\n    rendererSetProperty: 0,\n    rendererSetClassName: 0,\n    rendererAddClass: 0,\n    rendererRemoveClass: 0,\n    rendererSetStyle: 0,\n    rendererRemoveStyle: 0,\n    rendererDestroy: 0,\n    rendererDestroyNode: 0,\n    rendererMoveNode: 0,\n    rendererRemoveNode: 0,\n    rendererCreateComment: 0,\n  };\n}\n\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n  // Make sure to refer to ngDevMode as ['ngDevMode'] for clousre.\n  __global['ngDevMode'] = ngDevModeResetPerfCounters();\n}\n"]}