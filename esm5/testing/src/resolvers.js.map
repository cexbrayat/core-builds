{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../../../../../packages/core/testing/src/resolvers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAQ,uBAAuB,IAAI,sBAAsB,EAAC,MAAM,eAAe,CAAC;AAG5H,OAAO,EAAC,iBAAiB,EAAC,MAAM,sBAAsB,CAAC;AAEvD,IAAM,UAAU,GAAG,IAAI,sBAAsB,EAAE,CAAC;AAOhD;;GAEG;AACH;IAAA;QACU,cAAS,GAAG,IAAI,GAAG,EAAkC,CAAC;QACtD,aAAQ,GAAG,IAAI,GAAG,EAAqB,CAAC;IA8BlD,CAAC;IA1BC,uCAAY,GAAZ,UAAa,SAAkD;QAA/D,iBAGC;QAFC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,SAAS,CAAC,OAAO,CAAC,UAAC,EAAgB;gBAAf,YAAI,EAAE,gBAAQ;YAAM,OAAA,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC;QAAlC,CAAkC,CAAC,CAAC;IAC9E,CAAC;IAED,wCAAa,GAAb,UAAc,IAAe;QAA7B,iBAEC;QADC,OAAO,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,YAAY,KAAI,CAAC,IAAI,EAAtB,CAAsB,CAAC,IAAI,IAAI,CAAC;IAChF,CAAC;IAED,kCAAO,GAAP,UAAQ,IAAe;QACrB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;QAE/C,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACpC,IAAI,QAAQ,EAAE;gBACZ,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC1C,IAAI,QAAQ,EAAE;oBACZ,IAAM,SAAS,GAAG,IAAI,iBAAiB,EAAE,CAAC;oBAC1C,QAAQ,GAAG,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;iBACtE;aACF;YACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SACnC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IACH,uBAAC;AAAD,CAAC,AAhCD,IAgCC;AAGD;IAAuC,6CAA2B;IAAlE;;IAEA,CAAC;IADC,sBAAI,mCAAI;aAAR,cAAa,OAAO,SAAS,CAAC,CAAC,CAAC;;;OAAA;IAClC,wBAAC;AAAD,CAAC,AAFD,CAAuC,gBAAgB,GAEtD;;AAED;IAAuC,6CAA2B;IAAlE;;IAEA,CAAC;IADC,sBAAI,mCAAI;aAAR,cAAa,OAAO,SAAS,CAAC,CAAC,CAAC;;;OAAA;IAClC,wBAAC;AAAD,CAAC,AAFD,CAAuC,gBAAgB,GAEtD;;AAED;IAAkC,wCAAsB;IAAxD;;IAEA,CAAC;IADC,sBAAI,8BAAI;aAAR,cAAa,OAAO,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAC7B,mBAAC;AAAD,CAAC,AAFD,CAAkC,gBAAgB,GAEjD;;AAED;IAAsC,4CAA0B;IAAhE;;IAEA,CAAC;IADC,sBAAI,kCAAI;aAAR,cAAa,OAAO,QAAQ,CAAC,CAAC,CAAC;;;OAAA;IACjC,uBAAC;AAAD,CAAC,AAFD,CAAsC,gBAAgB,GAErD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, NgModule, Pipe, Type, ÉµReflectionCapabilities as ReflectionCapabilities} from '@angular/core';\n\nimport {MetadataOverride} from './metadata_override';\nimport {MetadataOverrider} from './metadata_overrider';\n\nconst reflection = new ReflectionCapabilities();\n\n/**\n * Base interface to resolve `@Component`, `@Directive`, `@Pipe` and `@NgModule`.\n */\nexport interface Resolver<T> { resolve(type: Type<any>): T|null; }\n\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nabstract class OverrideResolver<T> implements Resolver<T> {\n  private overrides = new Map<Type<any>, MetadataOverride<T>>();\n  private resolved = new Map<Type<any>, T|null>();\n\n  abstract get type(): any;\n\n  setOverrides(overrides: Array<[Type<any>, MetadataOverride<T>]>) {\n    this.overrides.clear();\n    overrides.forEach(([type, override]) => this.overrides.set(type, override));\n  }\n\n  getAnnotation(type: Type<any>): T|null {\n    return reflection.annotations(type).find(a => a instanceof this.type) || null;\n  }\n\n  resolve(type: Type<any>): T|null {\n    let resolved = this.resolved.get(type) || null;\n\n    if (!resolved) {\n      resolved = this.getAnnotation(type);\n      if (resolved) {\n        const override = this.overrides.get(type);\n        if (override) {\n          const overrider = new MetadataOverrider();\n          resolved = overrider.overrideMetadata(this.type, resolved, override);\n        }\n      }\n      this.resolved.set(type, resolved);\n    }\n\n    return resolved;\n  }\n}\n\n\nexport class DirectiveResolver extends OverrideResolver<Directive> {\n  get type() { return Directive; }\n}\n\nexport class ComponentResolver extends OverrideResolver<Component> {\n  get type() { return Component; }\n}\n\nexport class PipeResolver extends OverrideResolver<Pipe> {\n  get type() { return Pipe; }\n}\n\nexport class NgModuleResolver extends OverrideResolver<NgModule> {\n  get type() { return NgModule; }\n}\n"]}