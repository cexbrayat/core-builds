{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/util.ts"],"names":[],"mappings":";;;;AAOA,OAAO,EAAC,YAAY,EAAC,MAAM,2CAA2C,CAAC;AACvE,OAAO,EAAC,cAAc,EAAC,MAAM,UAAU,CAAC;AAExC,OAAO,EAAC,aAAa,EAAY,MAAM,mBAAmB,CAAC;;;;;;;;;;AAO3D,MAAM,UAAU,WAAW,CAAC,CAAM,EAAE,CAAM,EAAE,kBAA2B;IACrE,IAAI,SAAS,IAAI,kBAAkB,EAAE;QACnC,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAC5B;;;IAGD,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CACzC;;;;;AAED,MAAM,UAAU,SAAS,CAAC,KAAU;IAClC,IAAI,OAAO,KAAK,IAAI,UAAU;QAAE,OAAO,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC;IAC3D,IAAI,OAAO,KAAK,IAAI,QAAQ;QAAE,OAAO,KAAK,CAAC;IAC3C,IAAI,KAAK,IAAI,IAAI;QAAE,OAAO,EAAE,CAAC;IAC7B,OAAO,EAAE,GAAG,KAAK,CAAC;CACnB;;;;;;;AAQD,MAAM,UAAU,cAAc;IAC5B,OAAO,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;CACpC;;;;;;AAKD,MAAM,UAAU,OAAO,CAAC,IAAW;;IACjC,IAAM,MAAM,GAAU,EAAE,CAAC;;IACzB,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE;;QACtB,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtC,CAAC,GAAG,CAAC,CAAC;aACP;iBAAM;gBACL,CAAC,EAAE,CAAC;aACL;SACF;aAAM;YACL,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,EAAE,CAAC;SACL;KACF;IAED,OAAO,MAAM,CAAC;CACf;;;;;;;;AAGD,MAAM,UAAU,YAAY,CAAI,KAAa,EAAE,GAAc;IAC3D,SAAS,IAAI,yBAAyB,CAAC,KAAK,GAAG,aAAa,EAAE,GAAG,CAAC,CAAC;IACnE,OAAO,GAAG,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC;CACnC;;;;;;AAED,MAAM,UAAU,yBAAyB,CAAC,KAAa,EAAE,GAAU;IACjE,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,yCAAyC,CAAC,CAAC;CACxF;;;;;;;;;;AAOD,MAAM,UAAU,mBAAmB,CAAC,KAAa,EAAE,GAAc;;IAC/D,IAAM,KAAK,GAAG,YAAY,CAAe,KAAK,EAAE,GAAG,CAAC,CAAC;IACrD,OAAO,gBAAgB,CAAC,KAAK,CAAC,CAAC;CAChC;;;;;AAED,MAAM,UAAU,gBAAgB,CAAC,KAA2B;IAC1D,yBAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,oBAAC,KAAY,GAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAiB,EAAC;CACpF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {devModeEqual} from '../change_detection/change_detection_util';\nimport {assertLessThan} from './assert';\nimport {LElementNode} from './interfaces/node';\nimport {HEADER_OFFSET, LViewData} from './interfaces/view';\n\n/**\n * Returns wether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n */\nexport function isDifferent(a: any, b: any, checkNoChangesMode: boolean): boolean {\n  if (ngDevMode && checkNoChangesMode) {\n    return !devModeEqual(a, b);\n  }\n  // NaN is the only value that is not equal to itself so the first\n  // test checks if both a and b are not NaN\n  return !(a !== a && b !== b) && a !== b;\n}\n\nexport function stringify(value: any): string {\n  if (typeof value == 'function') return value.name || value;\n  if (typeof value == 'string') return value;\n  if (value == null) return '';\n  return '' + value;\n}\n\n/**\n *  Function that throws a \"not implemented\" error so it's clear certain\n *  behaviors/methods aren't yet ready.\n *\n * @returns Not implemented error\n */\nexport function notImplemented(): Error {\n  return new Error('NotImplemented');\n}\n\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n */\nexport function flatten(list: any[]): any[] {\n  const result: any[] = [];\n  let i = 0;\n\n  while (i < list.length) {\n    const item = list[i];\n    if (Array.isArray(item)) {\n      if (item.length > 0) {\n        list = item.concat(list.slice(i + 1));\n        i = 0;\n      } else {\n        i++;\n      }\n    } else {\n      result.push(item);\n      i++;\n    }\n  }\n\n  return result;\n}\n\n/** Retrieves a value from any `LViewData`. */\nexport function loadInternal<T>(index: number, arr: LViewData): T {\n  ngDevMode && assertDataInRangeInternal(index + HEADER_OFFSET, arr);\n  return arr[index + HEADER_OFFSET];\n}\n\nexport function assertDataInRangeInternal(index: number, arr: any[]) {\n  assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n\n/** Retrieves an element value from the provided `viewData`.\n  *\n  * Elements that are read may be wrapped in a style context,\n  * therefore reading the value may involve unwrapping that.\n  */\nexport function loadElementInternal(index: number, arr: LViewData): LElementNode {\n  const value = loadInternal<LElementNode>(index, arr);\n  return readElementValue(value);\n}\n\nexport function readElementValue(value: LElementNode | any[]): LElementNode {\n  return (Array.isArray(value) ? (value as any as any[])[0] : value) as LElementNode;\n}\n"]}