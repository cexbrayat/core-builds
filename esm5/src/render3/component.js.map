{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport {Type} from '../core';\nimport {Injector} from '../di/injector';\nimport {Sanitizer} from '../sanitization/security';\n\nimport {assertComponentType, assertDefined} from './assert';\nimport {getComponentViewByInstance} from './context_discovery';\nimport {getComponentDef} from './definition';\nimport {queueInitHooks, queueLifecycleHooks} from './hooks';\nimport {CLEAN_PROMISE, baseDirectiveCreate, createLViewData, createNodeAtIndex, createTView, detectChangesInternal, enterView, executeInitAndContentHooks, getOrCreateTView, leaveView, locateHostElement, prefillHostVars, resetComponentState, setHostBindings} from './instructions';\nimport {ComponentDef, ComponentType} from './interfaces/definition';\nimport {TElementNode, TNodeFlags, TNodeType} from './interfaces/node';\nimport {PlayerHandler} from './interfaces/player';\nimport {RElement, RNode, Renderer3, RendererFactory3, domRendererFactory3} from './interfaces/renderer';\nimport {CONTEXT, HEADER_OFFSET, HOST, HOST_NODE, INJECTOR, LViewData, LViewFlags, RootContext, RootContextFlags, TVIEW} from './interfaces/view';\nimport {getRootView, readElementValue, readPatchedLViewData, stringify} from './util';\n\n\n\n// Root component will always have an element index of 0 and an injector size of 1\nconst ROOT_EXPANDO_INSTRUCTIONS = [0, 1];\n\n/** Options that control how the component should be bootstrapped. */\nexport interface CreateComponentOptions {\n  /** Which renderer factory to use. */\n  rendererFactory?: RendererFactory3;\n\n  /** A custom sanitizer instance */\n  sanitizer?: Sanitizer;\n\n  /** A custom animation player handler */\n  playerHandler?: PlayerHandler;\n\n  /**\n   * Host element on which the component will be bootstrapped. If not specified,\n   * the component definition's `tag` is used to query the existing DOM for the\n   * element to bootstrap.\n   */\n  host?: RElement|string;\n\n  /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n  injector?: Injector;\n\n  /**\n   * List of features to be applied to the created component. Features are simply\n   * functions that decorate a component with a certain behavior.\n   *\n   * Typically, the features in this list are features that cannot be added to the\n   * other features list in the component definition because they rely on other factors.\n   *\n   * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n   * to root components in a tree-shakable way. It cannot be added to the component\n   * features list because there's no way of knowing when the component will be used as\n   * a root component.\n   */\n  hostFeatures?: HostFeature[];\n\n  /**\n   * A function which is used to schedule change detection work in the future.\n   *\n   * When marking components as dirty, it is necessary to schedule the work of\n   * change detection in the future. This is done to coalesce multiple\n   * {@link markDirty} calls into a single changed detection processing.\n   *\n   * The default value of the scheduler is the `requestAnimationFrame` function.\n   *\n   * It is also useful to override this function for testing purposes.\n   */\n  scheduler?: (work: () => void) => void;\n}\n\n/** See CreateComponentOptions.hostFeatures */\ntype HostFeature = (<T>(component: T, componentDef: ComponentDef<T>) => void);\n\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport const NULL_INJECTOR: Injector = {\n  get: (token: any, notFoundValue?: any) => {\n    throw new Error('NullInjector: Not found: ' + stringify(token));\n  }\n};\n\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport function renderComponent<T>(\n    componentType: ComponentType<T>|\n        Type<T>/* Type as workaround for: Microsoft/TypeScript/issues/4881 */\n    ,\n    opts: CreateComponentOptions = {}): T {\n  ngDevMode && assertComponentType(componentType);\n  const rendererFactory = opts.rendererFactory || domRendererFactory3;\n  const sanitizer = opts.sanitizer || null;\n  const componentDef = getComponentDef<T>(componentType) !;\n  if (componentDef.type != componentType) componentDef.type = componentType;\n\n  // The first index of the first selector is the tag name.\n  const componentTag = componentDef.selectors ![0] ![0] as string;\n  const hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n  const rootFlags = componentDef.onPush ? LViewFlags.Dirty | LViewFlags.IsRoot :\n                                          LViewFlags.CheckAlways | LViewFlags.IsRoot;\n  const rootContext = createRootContext(\n      opts.scheduler || requestAnimationFrame.bind(window), opts.playerHandler || null);\n\n  const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n  const rootView: LViewData = createLViewData(\n      renderer, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags);\n  rootView[INJECTOR] = opts.injector || null;\n\n  const oldView = enterView(rootView, null);\n  let component: T;\n  try {\n    if (rendererFactory.begin) rendererFactory.begin();\n\n    const componentView =\n        createRootComponentView(hostRNode, componentDef, rootView, renderer, sanitizer);\n    component = createRootComponent(\n        hostRNode, componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n\n    executeInitAndContentHooks();\n    detectChangesInternal(componentView, component);\n  } finally {\n    leaveView(oldView);\n    if (rendererFactory.end) rendererFactory.end();\n  }\n\n  return component;\n}\n\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param renderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nexport function createRootComponentView(\n    rNode: RElement | null, def: ComponentDef<any>, rootView: LViewData, renderer: Renderer3,\n    sanitizer?: Sanitizer | null): LViewData {\n  resetComponentState();\n  const tView = rootView[TVIEW];\n  const componentView = createLViewData(\n      renderer,\n      getOrCreateTView(\n          def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery),\n      null, def.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways, sanitizer);\n  const tNode = createNodeAtIndex(0, TNodeType.Element, rNode, null, null);\n\n  if (tView.firstTemplatePass) {\n    tView.expandoInstructions = ROOT_EXPANDO_INSTRUCTIONS.slice();\n    if (def.diPublic) def.diPublic(def);\n    tNode.flags =\n        rootView.length << TNodeFlags.DirectiveStartingIndexShift | TNodeFlags.isComponent;\n  }\n\n  // Store component view at node index, with node as the HOST\n  componentView[HOST] = rootView[HEADER_OFFSET];\n  componentView[HOST_NODE] = tNode as TElementNode;\n  return rootView[HEADER_OFFSET] = componentView;\n}\n\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nexport function createRootComponent<T>(\n    hostRNode: RNode | null, componentView: LViewData, componentDef: ComponentDef<T>,\n    rootView: LViewData, rootContext: RootContext, hostFeatures: HostFeature[] | null): any {\n  // Create directive instance with factory() and store at next index in viewData\n  const component =\n      baseDirectiveCreate(rootView.length, componentDef.factory() as T, componentDef, hostRNode);\n\n  rootContext.components.push(component);\n  componentView[CONTEXT] = component;\n\n  hostFeatures && hostFeatures.forEach((feature) => feature(component, componentDef));\n  if (rootView[TVIEW].firstTemplatePass) prefillHostVars(componentDef.hostVars);\n  setHostBindings();\n  return component;\n}\n\n\nexport function createRootContext(\n    scheduler: (workFn: () => void) => void, playerHandler?: PlayerHandler|null): RootContext {\n  return {\n    components: [],\n    scheduler: scheduler,\n    clean: CLEAN_PROMISE,\n    playerHandler: playerHandler || null,\n    flags: RootContextFlags.Empty\n  };\n}\n\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n */\nexport function LifecycleHooksFeature(component: any, def: ComponentDef<any>): void {\n  const rootTView = readPatchedLViewData(component) ![TVIEW];\n  const dirIndex = rootTView.data.length - 1;\n\n  queueInitHooks(dirIndex, def.onInit, def.doCheck, rootTView);\n  queueLifecycleHooks(dirIndex << TNodeFlags.DirectiveStartingIndexShift | 1, rootTView);\n}\n\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param component any component\n */\nfunction getRootContext(component: any): RootContext {\n  const rootContext = getRootView(component)[CONTEXT] as RootContext;\n  ngDevMode && assertDefined(rootContext, 'rootContext');\n  return rootContext;\n}\n\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param component Component for which the host element should be retrieved.\n */\nexport function getHostElement<T>(component: T): HTMLElement {\n  return readElementValue(getComponentViewByInstance(component)) as HTMLElement;\n}\n\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport function getRenderedText(component: any): string {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component: any): Promise<null> {\n  return getRootContext(component).clean;\n}\n"]}