{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport {Type} from '../core';\nimport {Injector} from '../di/injector';\nimport {Sanitizer} from '../sanitization/security';\n\nimport {assertComponentType, assertDefined} from './assert';\nimport {queueInitHooks, queueLifecycleHooks} from './hooks';\nimport {CLEAN_PROMISE, _getComponentHostLElementNode, baseDirectiveCreate, createLViewData, createTView, detectChangesInternal, enterView, executeInitAndContentHooks, getRootView, hostElement, initChangeDetectorIfExisting, leaveView, locateHostElement, setHostBindings, queueHostBindingForCheck,} from './instructions';\nimport {ComponentDef, ComponentDefInternal, ComponentType} from './interfaces/definition';\nimport {LElementNode} from './interfaces/node';\nimport {RElement, RendererFactory3, domRendererFactory3} from './interfaces/renderer';\nimport {LViewData, LViewFlags, RootContext, BINDING_INDEX, INJECTOR, CONTEXT, TVIEW} from './interfaces/view';\nimport {stringify} from './util';\n\n\n/** Options that control how the component should be bootstrapped. */\nexport interface CreateComponentOptions {\n  /** Which renderer factory to use. */\n  rendererFactory?: RendererFactory3;\n\n  /** A custom sanitizer instance */\n  sanitizer?: Sanitizer;\n\n  /**\n   * Host element on which the component will be bootstrapped. If not specified,\n   * the component definition's `tag` is used to query the existing DOM for the\n   * element to bootstrap.\n   */\n  host?: RElement|string;\n\n  /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n  injector?: Injector;\n\n  /**\n   * List of features to be applied to the created component. Features are simply\n   * functions that decorate a component with a certain behavior.\n   *\n   * Typically, the features in this list are features that cannot be added to the\n   * other features list in the component definition because they rely on other factors.\n   *\n   * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n   * to root components in a tree-shakable way. It cannot be added to the component\n   * features list because there's no way of knowing when the component will be used as\n   * a root component.\n   */\n  hostFeatures?: (<T>(component: T, componentDef: ComponentDef<T, string>) => void)[];\n\n  /**\n   * A function which is used to schedule change detection work in the future.\n   *\n   * When marking components as dirty, it is necessary to schedule the work of\n   * change detection in the future. This is done to coalesce multiple\n   * {@link markDirty} calls into a single changed detection processing.\n   *\n   * The default value of the scheduler is the `requestAnimationFrame` function.\n   *\n   * It is also useful to override this function for testing purposes.\n   */\n  scheduler?: (work: () => void) => void;\n}\n\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport const NULL_INJECTOR: Injector = {\n  get: (token: any, notFoundValue?: any) => {\n    throw new Error('NullInjector: Not found: ' + stringify(token));\n  }\n};\n\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport function renderComponent<T>(\n    componentType: ComponentType<T>|\n        Type<T>/* Type as workaround for: Microsoft/TypeScript/issues/4881 */\n    ,\n    opts: CreateComponentOptions = {}): T {\n  ngDevMode && assertComponentType(componentType);\n  const rendererFactory = opts.rendererFactory || domRendererFactory3;\n  const sanitizer = opts.sanitizer || null;\n  const componentDef =\n      (componentType as ComponentType<T>).ngComponentDef as ComponentDefInternal<T>;\n  if (componentDef.type != componentType) componentDef.type = componentType;\n\n  // The first index of the first selector is the tag name.\n  const componentTag = componentDef.selectors ![0] ![0] as string;\n  const hostNode = locateHostElement(rendererFactory, opts.host || componentTag);\n  const rootContext = createRootContext(opts.scheduler || requestAnimationFrame.bind(window));\n\n  const rootView: LViewData = createLViewData(\n      rendererFactory.createRenderer(hostNode, componentDef),\n      createTView(-1, null, 1, 0, null, null, null), rootContext,\n      componentDef.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways);\n  rootView[INJECTOR] = opts.injector || null;\n\n  const oldView = enterView(rootView, null !);\n  let elementNode: LElementNode;\n  let component: T;\n  try {\n    if (rendererFactory.begin) rendererFactory.begin();\n\n    // Create element node at index 0 in data array\n    elementNode = hostElement(componentTag, hostNode, componentDef, sanitizer);\n\n    // Create directive instance with factory() and store at index 0 in directives array\n    component = baseDirectiveCreate(0, componentDef.factory() as T, componentDef);\n    if (componentDef.hostBindings) {\n      queueHostBindingForCheck(0, componentDef.hostVars);\n    }\n    rootContext.components.push(component);\n    (elementNode.data as LViewData)[CONTEXT] = component;\n    initChangeDetectorIfExisting(elementNode.nodeInjector, component, elementNode.data !);\n\n    opts.hostFeatures && opts.hostFeatures.forEach((feature) => feature(component, componentDef));\n\n    executeInitAndContentHooks();\n    setHostBindings(rootView[TVIEW].hostBindings);\n    detectChangesInternal(elementNode.data as LViewData, elementNode, component);\n  } finally {\n    leaveView(oldView);\n    if (rendererFactory.end) rendererFactory.end();\n  }\n\n  return component;\n}\n\nexport function createRootContext(scheduler: (workFn: () => void) => void): RootContext {\n  return {\n    components: [],\n    scheduler: scheduler,\n    clean: CLEAN_PROMISE,\n  };\n}\n\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n */\nexport function LifecycleHooksFeature(component: any, def: ComponentDefInternal<any>): void {\n  const elementNode = _getComponentHostLElementNode(component);\n\n  // Root component is always created at dir index 0\n  const tView = elementNode.view[TVIEW];\n  queueInitHooks(0, def.onInit, def.doCheck, tView);\n  queueLifecycleHooks(elementNode.tNode.flags, tView);\n}\n\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param component any component\n */\nfunction getRootContext(component: any): RootContext {\n  const rootContext = getRootView(component)[CONTEXT] as RootContext;\n  ngDevMode && assertDefined(rootContext, 'rootContext');\n  return rootContext;\n}\n\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param component Component for which the host element should be retrieved.\n */\nexport function getHostElement<T>(component: T): HTMLElement {\n  return _getComponentHostLElementNode(component).native as any;\n}\n\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport function getRenderedText(component: any): string {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component: any): Promise<null> {\n  return getRootContext(component).clean;\n}\n"]}