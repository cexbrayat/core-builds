{"version":3,"file":"inherit_definition_feature.js","sourceRoot":"","sources":["../../../../../../../packages/core/src/render3/features/inherit_definition_feature.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../../type';\nimport {fillProperties} from '../../util/property';\nimport {ComponentDefInternal, ComponentTemplate, DirectiveDefFeature, DirectiveDefInternal, RenderFlags} from '../interfaces/definition';\n\n\n\n/**\n * Determines if a definition is a {@link ComponentDefInternal} or a {@link DirectiveDefInternal}\n * @param definition The definition to examine\n */\nfunction isComponentDef<T>(definition: ComponentDefInternal<T>| DirectiveDefInternal<T>):\n    definition is ComponentDefInternal<T> {\n  const def = definition as ComponentDefInternal<T>;\n  return typeof def.template === 'function';\n}\n\nfunction getSuperType(type: Type<any>): Type<any>&\n    {ngComponentDef?: ComponentDefInternal<any>, ngDirectiveDef?: DirectiveDefInternal<any>} {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n */\nexport function InheritDefinitionFeature(\n    definition: DirectiveDefInternal<any>| ComponentDefInternal<any>): void {\n  let superType = getSuperType(definition.type);\n\n  while (superType) {\n    let superDef: DirectiveDefInternal<any>|ComponentDefInternal<any>|undefined = undefined;\n    if (isComponentDef(definition)) {\n      superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n    } else {\n      if (superType.ngComponentDef) {\n        throw new Error('Directives cannot inherit Components');\n      }\n      superDef = superType.ngDirectiveDef;\n    }\n\n    const baseDef = (superType as any).ngBaseDef;\n    if (baseDef) {\n      // Merge inputs and outputs\n      fillProperties(definition.inputs, baseDef.inputs);\n      fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n      fillProperties(definition.outputs, baseDef.outputs);\n    }\n\n    if (superDef) {\n      // Merge hostBindings\n      const prevHostBindings = definition.hostBindings;\n      const superHostBindings = superDef.hostBindings;\n      if (superHostBindings) {\n        if (prevHostBindings) {\n          definition.hostBindings = (directiveIndex: number, elementIndex: number) => {\n            superHostBindings(directiveIndex, elementIndex);\n            prevHostBindings(directiveIndex, elementIndex);\n          };\n        } else {\n          definition.hostBindings = superHostBindings;\n        }\n      }\n\n      // Merge View Queries\n      if (isComponentDef(definition) && isComponentDef(superDef)) {\n        const prevViewQuery = definition.viewQuery;\n        const superViewQuery = superDef.viewQuery;\n        if (superViewQuery) {\n          if (prevViewQuery) {\n            definition.viewQuery = <T>(rf: RenderFlags, ctx: T): void => {\n              superViewQuery(rf, ctx);\n              prevViewQuery(rf, ctx);\n            };\n          } else {\n            definition.viewQuery = superViewQuery;\n          }\n        }\n      }\n\n      // Merge Content Queries\n      const prevContentQueries = definition.contentQueries;\n      const superContentQueries = superDef.contentQueries;\n      if (superContentQueries) {\n        if (prevContentQueries) {\n          definition.contentQueries = () => {\n            superContentQueries();\n            prevContentQueries();\n          };\n        } else {\n          definition.contentQueries = superContentQueries;\n        }\n      }\n\n      // Merge Content Queries Refresh\n      const prevContentQueriesRefresh = definition.contentQueriesRefresh;\n      const superContentQueriesRefresh = superDef.contentQueriesRefresh;\n      if (superContentQueriesRefresh) {\n        if (prevContentQueriesRefresh) {\n          definition.contentQueriesRefresh = (directiveIndex: number, queryIndex: number) => {\n            superContentQueriesRefresh(directiveIndex, queryIndex);\n            prevContentQueriesRefresh(directiveIndex, queryIndex);\n          };\n        } else {\n          definition.contentQueriesRefresh = superContentQueriesRefresh;\n        }\n      }\n\n\n      // Merge inputs and outputs\n      fillProperties(definition.inputs, superDef.inputs);\n      fillProperties(definition.declaredInputs, superDef.declaredInputs);\n      fillProperties(definition.outputs, superDef.outputs);\n\n      // Inherit hooks\n      // Assume super class inheritance feature has already run.\n      definition.afterContentChecked =\n          definition.afterContentChecked || superDef.afterContentChecked;\n      definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n      definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n      definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n      definition.doCheck = definition.doCheck || superDef.doCheck;\n      definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n      definition.onInit = definition.onInit || superDef.onInit;\n\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (const feature of features) {\n          if (feature && feature !== InheritDefinitionFeature) {\n            (feature as DirectiveDefFeature)(definition);\n          }\n        }\n      }\n\n      break;\n    } else {\n      // Even if we don't have a definition, check the type for the hooks and use those if need be\n      const superPrototype = superType.prototype;\n\n      if (superPrototype) {\n        definition.afterContentChecked =\n            definition.afterContentChecked || superPrototype.afterContentChecked;\n        definition.afterContentInit =\n            definition.afterContentInit || superPrototype.afterContentInit;\n        definition.afterViewChecked =\n            definition.afterViewChecked || superPrototype.afterViewChecked;\n        definition.afterViewInit = definition.afterViewInit || superPrototype.afterViewInit;\n        definition.doCheck = definition.doCheck || superPrototype.doCheck;\n        definition.onDestroy = definition.onDestroy || superPrototype.onDestroy;\n        definition.onInit = definition.onInit || superPrototype.onInit;\n      }\n    }\n\n    superType = Object.getPrototypeOf(superType);\n  }\n}\n"]}