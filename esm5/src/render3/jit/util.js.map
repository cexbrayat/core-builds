{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../../packages/core/src/render3/jit/util.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,WAAW,EAAwB,wBAAwB,EAAE,eAAe,EAAC,MAAM,mBAAmB,CAAC;AAE/G,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC3C,OAAO,EAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAIzE,OAAO,EAAC,SAAS,EAAC,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAC,sBAAsB,EAAC,MAAM,0CAA0C,CAAC;;AAGhF,IAAI,QAAQ,GAAgC,IAAI,CAAC;;;;AAEjD,MAAM,UAAU,UAAU;IACxB,OAAO,CAAC,QAAQ,GAAG,QAAQ,IAAI,IAAI,sBAAsB,EAAE,CAAC,CAAC;CAC9D;;;;;AAED,MAAM,UAAU,mBAAmB,CAAC,IAAe;IACjD,OAAO,mBAAmB,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;CAC3D;;;;;AAED,MAAM,UAAU,mBAAmB,CAAC,IAAW;IAC7C,OAAO,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,iBAAiB,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC,CAAC;CAChD;;;;;AAED,SAAS,iBAAiB,CAAC,GAAgB;;IACzC,IAAM,IAAI,GAAyB;QACjC,KAAK,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC;QAC5B,IAAI,EAAE,KAAK;QACX,QAAQ,EAAE,KAAK;QACf,QAAQ,EAAE,wBAAwB,CAAC,KAAK;QACxC,IAAI,EAAE,KAAK;QACX,QAAQ,EAAE,KAAK;KAChB,CAAC;;;;;IAEF,SAAS,uBAAuB,CAAC,KAAU;QACzC,IAAI,KAAK,KAAK,QAAQ,EAAE;YACtB,IAAI,CAAC,QAAQ,GAAG,wBAAwB,CAAC,QAAQ,CAAC;SACnD;aAAM;YACL,IAAI,CAAC,QAAQ,GAAG,wBAAwB,CAAC,KAAK,CAAC;SAChD;QACD,IAAI,CAAC,KAAK,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;KACzC;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACtB,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC1D;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;YACnC,IAAM,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,KAAK,YAAY,QAAQ,IAAI,KAAK,CAAC,SAAS,CAAC,cAAc,KAAK,UAAU,EAAE;gBAC9E,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;aACtB;iBAAM,IAAI,KAAK,YAAY,QAAQ,IAAI,KAAK,CAAC,SAAS,CAAC,cAAc,KAAK,UAAU,EAAE;gBACrF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;aACtB;iBAAM,IAAI,KAAK,YAAY,IAAI,IAAI,KAAK,CAAC,SAAS,CAAC,cAAc,KAAK,MAAM,EAAE;gBAC7E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aAClB;iBAAM,IAAI,KAAK,YAAY,IAAI,IAAI,KAAK,CAAC,SAAS,CAAC,cAAc,KAAK,MAAM,EAAE;gBAC7E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aAClB;iBAAM,IAAI,KAAK,YAAY,MAAM,EAAE;gBAClC,IAAI,CAAC,KAAK,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAC/C;iBAAM,IAAI,KAAK,YAAY,SAAS,EAAE;gBACrC,IAAI,KAAK,CAAC,aAAa,KAAK,SAAS,EAAE;oBACrC,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;iBACpD;gBACD,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;gBAClD,IAAI,CAAC,QAAQ,GAAG,wBAAwB,CAAC,SAAS,CAAC;aACpD;iBAAM;gBACL,uBAAuB,CAAC,KAAK,CAAC,CAAC;aAChC;SACF;KACF;SAAM;QACL,uBAAuB,CAAC,GAAG,CAAC,CAAC;KAC9B;IACD,OAAO,IAAI,CAAC;CACb","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiteralExpr, R3DependencyMetadata, R3ResolvedDependencyType, WrappedNodeExpr} from '@angular/compiler';\n\nimport {Injector} from '../../di/injector';\nimport {Host, Inject, Optional, Self, SkipSelf} from '../../di/metadata';\nimport {ElementRef} from '../../linker/element_ref';\nimport {TemplateRef} from '../../linker/template_ref';\nimport {ViewContainerRef} from '../../linker/view_container_ref';\nimport {Attribute} from '../../metadata/di';\nimport {ReflectionCapabilities} from '../../reflection/reflection_capabilities';\nimport {Type} from '../../type';\n\nlet _reflect: ReflectionCapabilities|null = null;\n\nexport function getReflect(): ReflectionCapabilities {\n  return (_reflect = _reflect || new ReflectionCapabilities());\n}\n\nexport function reflectDependencies(type: Type<any>): R3DependencyMetadata[] {\n  return convertDependencies(getReflect().parameters(type));\n}\n\nexport function convertDependencies(deps: any[]): R3DependencyMetadata[] {\n  return deps.map(dep => reflectDependency(dep));\n}\n\nfunction reflectDependency(dep: any | any[]): R3DependencyMetadata {\n  const meta: R3DependencyMetadata = {\n    token: new LiteralExpr(null),\n    host: false,\n    optional: false,\n    resolved: R3ResolvedDependencyType.Token,\n    self: false,\n    skipSelf: false,\n  };\n\n  function setTokenAndResolvedType(token: any): void {\n    if (token === Injector) {\n      meta.resolved = R3ResolvedDependencyType.Injector;\n    } else {\n      meta.resolved = R3ResolvedDependencyType.Token;\n    }\n    meta.token = new WrappedNodeExpr(token);\n  }\n\n  if (Array.isArray(dep)) {\n    if (dep.length === 0) {\n      throw new Error('Dependency array must have arguments.');\n    }\n    for (let j = 0; j < dep.length; j++) {\n      const param = dep[j];\n      if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = new WrappedNodeExpr(param.token);\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new Error(`Attribute name must be defined.`);\n        }\n        meta.token = new LiteralExpr(param.attributeName);\n        meta.resolved = R3ResolvedDependencyType.Attribute;\n      } else {\n        setTokenAndResolvedType(param);\n      }\n    }\n  } else {\n    setTokenAndResolvedType(dep);\n  }\n  return meta;\n}\n"]}