{"version":3,"file":"ivy_switch_legacy.js","sourceRoot":"","sources":["../../../../../packages/core/src/ivy_switch_legacy.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectableType, InjectorType, defineInjectable, defineInjector} from './di/defs';\nimport {InjectableProvider} from './di/injectable';\nimport {inject, injectArgs} from './di/injector';\nimport {ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueProvider, ValueSansProvider} from './di/provider';\nimport * as ivyOn from './ivy_switch_on';\nimport {NgModule} from './metadata';\nimport {ReflectionCapabilities} from './reflection/reflection_capabilities';\nimport {Type} from './type';\nimport {getClosureSafeProperty} from './util/property';\n\nfunction noop() {}\n\nexport interface DirectiveCompiler { (type: any, meta: any): void; }\n\nexport const R3_COMPILE_COMPONENT__POST_NGCC__: DirectiveCompiler = ivyOn.R3_COMPILE_COMPONENT;\nexport const R3_COMPILE_DIRECTIVE__POST_NGCC__: DirectiveCompiler = ivyOn.R3_COMPILE_DIRECTIVE;\nexport const R3_COMPILE_INJECTABLE__POST_NGCC__: DirectiveCompiler = ivyOn.R3_COMPILE_INJECTABLE;\nexport const R3_COMPILE_NGMODULE__POST_NGCC__: DirectiveCompiler = ivyOn.R3_COMPILE_NGMODULE;\nexport const R3_COMPILE_PIPE__POST_NGCC__: DirectiveCompiler = ivyOn.R3_COMPILE_PIPE;\nexport const ivyEnable__POST_NGCC__: boolean = ivyOn.ivyEnabled;\n\nconst R3_COMPILE_COMPONENT__PRE_NGCC__: DirectiveCompiler = noop;\nconst R3_COMPILE_DIRECTIVE__PRE_NGCC__: DirectiveCompiler = noop;\nconst R3_COMPILE_INJECTABLE__PRE_NGCC__: DirectiveCompiler = preR3InjectableCompile;\nconst R3_COMPILE_NGMODULE__PRE_NGCC__: DirectiveCompiler = preR3NgModuleCompile;\nconst R3_COMPILE_PIPE__PRE_NGCC__: DirectiveCompiler = noop;\nconst ivyEnable__PRE_NGCC__ = false;\n\nexport const ivyEnabled = ivyEnable__PRE_NGCC__;\nexport let R3_COMPILE_COMPONENT: DirectiveCompiler = R3_COMPILE_COMPONENT__PRE_NGCC__;\nexport let R3_COMPILE_DIRECTIVE: DirectiveCompiler = R3_COMPILE_DIRECTIVE__PRE_NGCC__;\nexport let R3_COMPILE_INJECTABLE: DirectiveCompiler = R3_COMPILE_INJECTABLE__PRE_NGCC__;\nexport let R3_COMPILE_NGMODULE: DirectiveCompiler = R3_COMPILE_NGMODULE__PRE_NGCC__;\nexport let R3_COMPILE_PIPE: DirectiveCompiler = R3_COMPILE_PIPE__PRE_NGCC__;\n\n\n////////////////////////////////////////////////////////////\n// Glue code which should be removed after Ivy is default //\n////////////////////////////////////////////////////////////\n\nfunction preR3NgModuleCompile(moduleType: InjectorType<any>, metadata: NgModule): void {\n  let imports = (metadata && metadata.imports) || [];\n  if (metadata && metadata.exports) {\n    imports = [...imports, metadata.exports];\n  }\n\n  moduleType.ngInjectorDef = defineInjector({\n    factory: convertInjectableProviderToFactory(moduleType, {useClass: moduleType}),\n    providers: metadata && metadata.providers,\n    imports: imports,\n  });\n}\n\nconst GET_PROPERTY_NAME = {} as any;\nconst USE_VALUE = getClosureSafeProperty<ValueProvider>(\n    {provide: String, useValue: GET_PROPERTY_NAME}, GET_PROPERTY_NAME);\nconst EMPTY_ARRAY: any[] = [];\n\nfunction convertInjectableProviderToFactory(type: Type<any>, provider?: InjectableProvider): () =>\n    any {\n  if (!provider) {\n    const reflectionCapabilities = new ReflectionCapabilities();\n    const deps = reflectionCapabilities.parameters(type);\n    // TODO - convert to flags.\n    return () => new type(...injectArgs(deps as any[]));\n  }\n\n  if (USE_VALUE in provider) {\n    const valueProvider = (provider as ValueSansProvider);\n    return () => valueProvider.useValue;\n  } else if ((provider as ExistingSansProvider).useExisting) {\n    const existingProvider = (provider as ExistingSansProvider);\n    return () => inject(existingProvider.useExisting);\n  } else if ((provider as FactorySansProvider).useFactory) {\n    const factoryProvider = (provider as FactorySansProvider);\n    return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY));\n  } else if ((provider as StaticClassSansProvider | ClassSansProvider).useClass) {\n    const classProvider = (provider as StaticClassSansProvider | ClassSansProvider);\n    let deps = (provider as StaticClassSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new classProvider.useClass(...injectArgs(deps));\n  } else {\n    let deps = (provider as ConstructorSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new type(...injectArgs(deps !));\n  }\n}\n\n/**\n * Supports @Injectable() in JIT mode for Render2.\n */\nfunction preR3InjectableCompile(\n    injectableType: InjectableType<any>,\n    options: {providedIn?: Type<any>| 'root' | null} & InjectableProvider): void {\n  if (options && options.providedIn !== undefined && injectableType.ngInjectableDef === undefined) {\n    injectableType.ngInjectableDef = defineInjectable({\n      providedIn: options.providedIn,\n      factory: convertInjectableProviderToFactory(injectableType, options),\n    });\n  }\n}"]}